/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package securityandcompliancecenterapiv3_test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/IBM/scc-go-sdk/v5/securityandcompliancecenterapiv3"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`securityandcompliancecenterapiv3`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		It(`Instantiate service client`, func() {
			securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
				Authenticator: &core.NoAuthAuthenticator{},
			})
			Expect(securityAndComplianceCenterService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
				URL: "{BAD_URL_STRING",
			})
			Expect(securityAndComplianceCenterService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
				URL: "https://securityandcompliancecenterapiv3/api",
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(securityAndComplianceCenterService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			testEnvironment := map[string]string{
				"SECURITY_AND_COMPLIANCE_CENTER_URL":       "https://securityandcompliancecenterapiv3/api",
				"SECURITY_AND_COMPLIANCE_CENTER_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{})
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := securityAndComplianceCenterService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != securityAndComplianceCenterService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(securityAndComplianceCenterService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(securityAndComplianceCenterService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL: "https://testService/api",
				})
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := securityAndComplianceCenterService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != securityAndComplianceCenterService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(securityAndComplianceCenterService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(securityAndComplianceCenterService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{})
				err := securityAndComplianceCenterService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := securityAndComplianceCenterService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != securityAndComplianceCenterService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(securityAndComplianceCenterService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(securityAndComplianceCenterService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			testEnvironment := map[string]string{
				"SECURITY_AND_COMPLIANCE_CENTER_URL":       "https://securityandcompliancecenterapiv3/api",
				"SECURITY_AND_COMPLIANCE_CENTER_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{})

			It(`Instantiate service client with error`, func() {
				Expect(securityAndComplianceCenterService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			testEnvironment := map[string]string{
				"SECURITY_AND_COMPLIANCE_CENTER_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
				URL: "{BAD_URL_STRING",
			})

			It(`Instantiate service client with error`, func() {
				Expect(securityAndComplianceCenterService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("us-south")
			Expect(url).To(Equal("https://us-south.compliance.cloud.ibm.com"))
			Expect(err).To(BeNil())

			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("eu-de")
			Expect(url).To(Equal("https://eu-de.compliance.cloud.ibm.com"))
			Expect(err).To(BeNil())

			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("eu-fr2")
			Expect(url).To(Equal("https://eu-fr2.compliance.cloud.ibm.com"))
			Expect(err).To(BeNil())

			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("ca-tor")
			Expect(url).To(Equal("https://ca-tor.compliance.cloud.ibm.com"))
			Expect(err).To(BeNil())

			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("au-syd")
			Expect(url).To(Equal("https://au-syd.compliance.cloud.ibm.com"))
			Expect(err).To(BeNil())

			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("eu-es")
			Expect(url).To(Equal("https://eu-es.compliance.cloud.ibm.com"))
			Expect(err).To(BeNil())

			url, err = securityandcompliancecenterapiv3.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`GetSettings(getSettingsOptions *GetSettingsOptions) - Operation response error`, func() {
		getSettingsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/settings"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSettingsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSettings with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetSettingsOptions model
				getSettingsOptionsModel := new(securityandcompliancecenterapiv3.GetSettingsOptions)
				getSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetSettings(getSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetSettings(getSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSettings(getSettingsOptions *GetSettingsOptions)`, func() {
		getSettingsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/settings"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"event_notifications": {"instance_crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::", "updated_on": "2019-01-01T12:00:00.000Z", "source_id": "crn:v1:bluemix:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::", "source_description": "This source is used for integration with IBM Cloud Security and Compliance Center.", "source_name": "compliance"}, "object_storage": {"instance_crn": "InstanceCRN", "bucket": "Bucket", "bucket_location": "BucketLocation", "bucket_endpoint": "BucketEndpoint", "updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetSettings successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetSettingsOptions model
				getSettingsOptionsModel := new(securityandcompliancecenterapiv3.GetSettingsOptions)
				getSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetSettingsWithContext(ctx, getSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetSettings(getSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetSettingsWithContext(ctx, getSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSettingsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"event_notifications": {"instance_crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::", "updated_on": "2019-01-01T12:00:00.000Z", "source_id": "crn:v1:bluemix:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::", "source_description": "This source is used for integration with IBM Cloud Security and Compliance Center.", "source_name": "compliance"}, "object_storage": {"instance_crn": "InstanceCRN", "bucket": "Bucket", "bucket_location": "BucketLocation", "bucket_endpoint": "BucketEndpoint", "updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke GetSettings successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSettingsOptions model
				getSettingsOptionsModel := new(securityandcompliancecenterapiv3.GetSettingsOptions)
				getSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetSettings(getSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSettings with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetSettingsOptions model
				getSettingsOptionsModel := new(securityandcompliancecenterapiv3.GetSettingsOptions)
				getSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetSettings(getSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSettingsOptions model with no property values
				getSettingsOptionsModelNew := new(securityandcompliancecenterapiv3.GetSettingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetSettings(getSettingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSettings successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetSettingsOptions model
				getSettingsOptionsModel := new(securityandcompliancecenterapiv3.GetSettingsOptions)
				getSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetSettings(getSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSettings(updateSettingsOptions *UpdateSettingsOptions) - Operation response error`, func() {
		updateSettingsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/settings"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSettingsPath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSettings with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ObjectStoragePrototype model
				objectStoragePrototypeModel := new(securityandcompliancecenterapiv3.ObjectStoragePrototype)
				objectStoragePrototypeModel.Bucket = core.StringPtr("px-scan-results")
				objectStoragePrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")

				// Construct an instance of the EventNotificationsPrototype model
				eventNotificationsPrototypeModel := new(securityandcompliancecenterapiv3.EventNotificationsPrototype)
				eventNotificationsPrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")
				eventNotificationsPrototypeModel.SourceDescription = core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")
				eventNotificationsPrototypeModel.SourceName = core.StringPtr("scc-sdk-integration")

				// Construct an instance of the UpdateSettingsOptions model
				updateSettingsOptionsModel := new(securityandcompliancecenterapiv3.UpdateSettingsOptions)
				updateSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSettingsOptionsModel.ObjectStorage = objectStoragePrototypeModel
				updateSettingsOptionsModel.EventNotifications = eventNotificationsPrototypeModel
				updateSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSettings(updateSettingsOptions *UpdateSettingsOptions)`, func() {
		updateSettingsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/settings"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSettingsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"event_notifications": {"instance_crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::", "updated_on": "2019-01-01T12:00:00.000Z", "source_id": "crn:v1:bluemix:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::", "source_description": "This source is used for integration with IBM Cloud Security and Compliance Center.", "source_name": "compliance"}, "object_storage": {"instance_crn": "InstanceCRN", "bucket": "Bucket", "bucket_location": "BucketLocation", "bucket_endpoint": "BucketEndpoint", "updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateSettings successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ObjectStoragePrototype model
				objectStoragePrototypeModel := new(securityandcompliancecenterapiv3.ObjectStoragePrototype)
				objectStoragePrototypeModel.Bucket = core.StringPtr("px-scan-results")
				objectStoragePrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")

				// Construct an instance of the EventNotificationsPrototype model
				eventNotificationsPrototypeModel := new(securityandcompliancecenterapiv3.EventNotificationsPrototype)
				eventNotificationsPrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")
				eventNotificationsPrototypeModel.SourceDescription = core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")
				eventNotificationsPrototypeModel.SourceName = core.StringPtr("scc-sdk-integration")

				// Construct an instance of the UpdateSettingsOptions model
				updateSettingsOptionsModel := new(securityandcompliancecenterapiv3.UpdateSettingsOptions)
				updateSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSettingsOptionsModel.ObjectStorage = objectStoragePrototypeModel
				updateSettingsOptionsModel.EventNotifications = eventNotificationsPrototypeModel
				updateSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.UpdateSettingsWithContext(ctx, updateSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.UpdateSettingsWithContext(ctx, updateSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSettingsPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"event_notifications": {"instance_crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::", "updated_on": "2019-01-01T12:00:00.000Z", "source_id": "crn:v1:bluemix:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::", "source_description": "This source is used for integration with IBM Cloud Security and Compliance Center.", "source_name": "compliance"}, "object_storage": {"instance_crn": "InstanceCRN", "bucket": "Bucket", "bucket_location": "BucketLocation", "bucket_endpoint": "BucketEndpoint", "updated_on": "2019-01-01T12:00:00.000Z"}}`)
				}))
			})
			It(`Invoke UpdateSettings successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.UpdateSettings(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ObjectStoragePrototype model
				objectStoragePrototypeModel := new(securityandcompliancecenterapiv3.ObjectStoragePrototype)
				objectStoragePrototypeModel.Bucket = core.StringPtr("px-scan-results")
				objectStoragePrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")

				// Construct an instance of the EventNotificationsPrototype model
				eventNotificationsPrototypeModel := new(securityandcompliancecenterapiv3.EventNotificationsPrototype)
				eventNotificationsPrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")
				eventNotificationsPrototypeModel.SourceDescription = core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")
				eventNotificationsPrototypeModel.SourceName = core.StringPtr("scc-sdk-integration")

				// Construct an instance of the UpdateSettingsOptions model
				updateSettingsOptionsModel := new(securityandcompliancecenterapiv3.UpdateSettingsOptions)
				updateSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSettingsOptionsModel.ObjectStorage = objectStoragePrototypeModel
				updateSettingsOptionsModel.EventNotifications = eventNotificationsPrototypeModel
				updateSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSettings with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ObjectStoragePrototype model
				objectStoragePrototypeModel := new(securityandcompliancecenterapiv3.ObjectStoragePrototype)
				objectStoragePrototypeModel.Bucket = core.StringPtr("px-scan-results")
				objectStoragePrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")

				// Construct an instance of the EventNotificationsPrototype model
				eventNotificationsPrototypeModel := new(securityandcompliancecenterapiv3.EventNotificationsPrototype)
				eventNotificationsPrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")
				eventNotificationsPrototypeModel.SourceDescription = core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")
				eventNotificationsPrototypeModel.SourceName = core.StringPtr("scc-sdk-integration")

				// Construct an instance of the UpdateSettingsOptions model
				updateSettingsOptionsModel := new(securityandcompliancecenterapiv3.UpdateSettingsOptions)
				updateSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSettingsOptionsModel.ObjectStorage = objectStoragePrototypeModel
				updateSettingsOptionsModel.EventNotifications = eventNotificationsPrototypeModel
				updateSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSettingsOptions model with no property values
				updateSettingsOptionsModelNew := new(securityandcompliancecenterapiv3.UpdateSettingsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateSettings successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ObjectStoragePrototype model
				objectStoragePrototypeModel := new(securityandcompliancecenterapiv3.ObjectStoragePrototype)
				objectStoragePrototypeModel.Bucket = core.StringPtr("px-scan-results")
				objectStoragePrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")

				// Construct an instance of the EventNotificationsPrototype model
				eventNotificationsPrototypeModel := new(securityandcompliancecenterapiv3.EventNotificationsPrototype)
				eventNotificationsPrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")
				eventNotificationsPrototypeModel.SourceDescription = core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")
				eventNotificationsPrototypeModel.SourceName = core.StringPtr("scc-sdk-integration")

				// Construct an instance of the UpdateSettingsOptions model
				updateSettingsOptionsModel := new(securityandcompliancecenterapiv3.UpdateSettingsOptions)
				updateSettingsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSettingsOptionsModel.ObjectStorage = objectStoragePrototypeModel
				updateSettingsOptionsModel.EventNotifications = eventNotificationsPrototypeModel
				updateSettingsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.UpdateSettings(updateSettingsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostTestEvent(postTestEventOptions *PostTestEventOptions) - Operation response error`, func() {
		postTestEventPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/test_event"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postTestEventPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke PostTestEvent with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the PostTestEventOptions model
				postTestEventOptionsModel := new(securityandcompliancecenterapiv3.PostTestEventOptions)
				postTestEventOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				postTestEventOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`PostTestEvent(postTestEventOptions *PostTestEventOptions)`, func() {
		postTestEventPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/test_event"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postTestEventPath))
					Expect(req.Method).To(Equal("POST"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"success": false}`)
				}))
			})
			It(`Invoke PostTestEvent successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the PostTestEventOptions model
				postTestEventOptionsModel := new(securityandcompliancecenterapiv3.PostTestEventOptions)
				postTestEventOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				postTestEventOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.PostTestEventWithContext(ctx, postTestEventOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.PostTestEventWithContext(ctx, postTestEventOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(postTestEventPath))
					Expect(req.Method).To(Equal("POST"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"success": false}`)
				}))
			})
			It(`Invoke PostTestEvent successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.PostTestEvent(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PostTestEventOptions model
				postTestEventOptionsModel := new(securityandcompliancecenterapiv3.PostTestEventOptions)
				postTestEventOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				postTestEventOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke PostTestEvent with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the PostTestEventOptions model
				postTestEventOptionsModel := new(securityandcompliancecenterapiv3.PostTestEventOptions)
				postTestEventOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				postTestEventOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the PostTestEventOptions model with no property values
				postTestEventOptionsModelNew := new(securityandcompliancecenterapiv3.PostTestEventOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke PostTestEvent successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the PostTestEventOptions model
				postTestEventOptionsModel := new(securityandcompliancecenterapiv3.PostTestEventOptions)
				postTestEventOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				postTestEventOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.PostTestEvent(postTestEventOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceAttachments(listInstanceAttachmentsOptions *ListInstanceAttachmentsOptions) - Operation response error`, func() {
		listInstanceAttachmentsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/attachments"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version_group_label"]).To(Equal([]string{"33fc7b80-0fa5-4f16-bbba-1f293f660f0d"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"created_on"}))
					Expect(req.URL.Query()["direction"]).To(Equal([]string{"desc"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceAttachments with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListInstanceAttachmentsOptions model
				listInstanceAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions)
				listInstanceAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listInstanceAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.VersionGroupLabel = core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")
				listInstanceAttachmentsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listInstanceAttachmentsOptionsModel.Sort = core.StringPtr("created_on")
				listInstanceAttachmentsOptionsModel.Direction = core.StringPtr("desc")
				listInstanceAttachmentsOptionsModel.Start = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceAttachments(listInstanceAttachmentsOptions *ListInstanceAttachmentsOptions)`, func() {
		listInstanceAttachmentsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/attachments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version_group_label"]).To(Equal([]string{"33fc7b80-0fa5-4f16-bbba-1f293f660f0d"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"created_on"}))
					Expect(req.URL.Query()["direction"]).To(Equal([]string{"desc"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "attachments": [{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListInstanceAttachments successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceAttachmentsOptions model
				listInstanceAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions)
				listInstanceAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listInstanceAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.VersionGroupLabel = core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")
				listInstanceAttachmentsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listInstanceAttachmentsOptionsModel.Sort = core.StringPtr("created_on")
				listInstanceAttachmentsOptionsModel.Direction = core.StringPtr("desc")
				listInstanceAttachmentsOptionsModel.Start = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListInstanceAttachmentsWithContext(ctx, listInstanceAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListInstanceAttachmentsWithContext(ctx, listInstanceAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["version_group_label"]).To(Equal([]string{"33fc7b80-0fa5-4f16-bbba-1f293f660f0d"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"created_on"}))
					Expect(req.URL.Query()["direction"]).To(Equal([]string{"desc"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "attachments": [{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListInstanceAttachments successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListInstanceAttachments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceAttachmentsOptions model
				listInstanceAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions)
				listInstanceAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listInstanceAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.VersionGroupLabel = core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")
				listInstanceAttachmentsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listInstanceAttachmentsOptionsModel.Sort = core.StringPtr("created_on")
				listInstanceAttachmentsOptionsModel.Direction = core.StringPtr("desc")
				listInstanceAttachmentsOptionsModel.Start = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListInstanceAttachments with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListInstanceAttachmentsOptions model
				listInstanceAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions)
				listInstanceAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listInstanceAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.VersionGroupLabel = core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")
				listInstanceAttachmentsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listInstanceAttachmentsOptionsModel.Sort = core.StringPtr("created_on")
				listInstanceAttachmentsOptionsModel.Direction = core.StringPtr("desc")
				listInstanceAttachmentsOptionsModel.Start = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceAttachmentsOptions model with no property values
				listInstanceAttachmentsOptionsModelNew := new(securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceAttachments successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListInstanceAttachmentsOptions model
				listInstanceAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions)
				listInstanceAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listInstanceAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.VersionGroupLabel = core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")
				listInstanceAttachmentsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listInstanceAttachmentsOptionsModel.Sort = core.StringPtr("created_on")
				listInstanceAttachmentsOptionsModel.Direction = core.StringPtr("desc")
				listInstanceAttachmentsOptionsModel.Start = core.StringPtr("testString")
				listInstanceAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListInstanceAttachments(listInstanceAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ProfileAttachmentCollection)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ProfileAttachmentCollection)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"attachments":[{"attachment_parameters":[{"assessment_type":"AssessmentType","assessment_id":"AssessmentID","parameter_name":"location","parameter_display_name":"Location","parameter_type":"string","parameter_value":"anyValue"}],"description":"Description","name":"Name","notifications":{"enabled":false,"controls":{"threshold_limit":15,"failed_control_ids":["FailedControlIds"]}},"schedule":"daily","scope":[{"id":"ID","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}]}],"status":"enabled","account_id":"AccountID","created_by":"CreatedBy","created_on":"2019-01-01T12:00:00.000Z","id":"ID","instance_id":"InstanceID","last_scan":{"id":"ID","status":"Status","time":"2019-01-01T12:00:00.000Z"},"next_scan_time":"2019-01-01T12:00:00.000Z","profile_id":"ProfileID","updated_by":"UpdatedBy","updated_on":"2019-01-01T12:00:00.000Z"}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"attachments":[{"attachment_parameters":[{"assessment_type":"AssessmentType","assessment_id":"AssessmentID","parameter_name":"location","parameter_display_name":"Location","parameter_type":"string","parameter_value":"anyValue"}],"description":"Description","name":"Name","notifications":{"enabled":false,"controls":{"threshold_limit":15,"failed_control_ids":["FailedControlIds"]}},"schedule":"daily","scope":[{"id":"ID","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}]}],"status":"enabled","account_id":"AccountID","created_by":"CreatedBy","created_on":"2019-01-01T12:00:00.000Z","id":"ID","instance_id":"InstanceID","last_scan":{"id":"ID","status":"Status","time":"2019-01-01T12:00:00.000Z"},"next_scan_time":"2019-01-01T12:00:00.000Z","profile_id":"ProfileID","updated_by":"UpdatedBy","updated_on":"2019-01-01T12:00:00.000Z"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use InstanceAttachmentsPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listInstanceAttachmentsOptionsModel := &securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions{
					InstanceID:        core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					AccountID:         core.StringPtr("testString"),
					VersionGroupLabel: core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d"),
					Limit:             core.Int64Ptr(int64(10)),
					Sort:              core.StringPtr("created_on"),
					Direction:         core.StringPtr("desc"),
				}

				pager, err := securityAndComplianceCenterService.NewInstanceAttachmentsPager(listInstanceAttachmentsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.ProfileAttachment
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use InstanceAttachmentsPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listInstanceAttachmentsOptionsModel := &securityandcompliancecenterapiv3.ListInstanceAttachmentsOptions{
					InstanceID:        core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					AccountID:         core.StringPtr("testString"),
					VersionGroupLabel: core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d"),
					Limit:             core.Int64Ptr(int64(10)),
					Sort:              core.StringPtr("created_on"),
					Direction:         core.StringPtr("desc"),
				}

				pager, err := securityAndComplianceCenterService.NewInstanceAttachmentsPager(listInstanceAttachmentsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`CreateProfileAttachment(createProfileAttachmentOptions *CreateProfileAttachmentOptions) - Operation response error`, func() {
		createProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProfileAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateProfileAttachment with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("automated")
				parameterModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				parameterModel.ParameterName = core.StringPtr("tls_version")
				parameterModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				parameterModel.ParameterType = core.StringPtr("string_list")
				parameterModel.ParameterValue = core.StringPtr("['1.2', '1.3']")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")
				profileAttachmentBaseModel.Name = core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateProfileAttachmentOptions model
				createProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileAttachmentOptions)
				createProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				createProfileAttachmentOptionsModel.Attachments = []securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel}
				createProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				createProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProfileAttachment(createProfileAttachmentOptions *CreateProfileAttachmentOptions)`, func() {
		createProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProfileAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"profile_id": "ProfileID", "attachments": [{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke CreateProfileAttachment successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("automated")
				parameterModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				parameterModel.ParameterName = core.StringPtr("tls_version")
				parameterModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				parameterModel.ParameterType = core.StringPtr("string_list")
				parameterModel.ParameterValue = core.StringPtr("['1.2', '1.3']")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")
				profileAttachmentBaseModel.Name = core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateProfileAttachmentOptions model
				createProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileAttachmentOptions)
				createProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				createProfileAttachmentOptionsModel.Attachments = []securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel}
				createProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				createProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateProfileAttachmentWithContext(ctx, createProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateProfileAttachmentWithContext(ctx, createProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProfileAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"profile_id": "ProfileID", "attachments": [{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke CreateProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateProfileAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("automated")
				parameterModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				parameterModel.ParameterName = core.StringPtr("tls_version")
				parameterModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				parameterModel.ParameterType = core.StringPtr("string_list")
				parameterModel.ParameterValue = core.StringPtr("['1.2', '1.3']")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")
				profileAttachmentBaseModel.Name = core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateProfileAttachmentOptions model
				createProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileAttachmentOptions)
				createProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				createProfileAttachmentOptionsModel.Attachments = []securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel}
				createProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				createProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateProfileAttachment with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("automated")
				parameterModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				parameterModel.ParameterName = core.StringPtr("tls_version")
				parameterModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				parameterModel.ParameterType = core.StringPtr("string_list")
				parameterModel.ParameterValue = core.StringPtr("['1.2', '1.3']")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")
				profileAttachmentBaseModel.Name = core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateProfileAttachmentOptions model
				createProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileAttachmentOptions)
				createProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				createProfileAttachmentOptionsModel.Attachments = []securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel}
				createProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				createProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateProfileAttachmentOptions model with no property values
				createProfileAttachmentOptionsModelNew := new(securityandcompliancecenterapiv3.CreateProfileAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("automated")
				parameterModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				parameterModel.ParameterName = core.StringPtr("tls_version")
				parameterModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				parameterModel.ParameterType = core.StringPtr("string_list")
				parameterModel.ParameterValue = core.StringPtr("['1.2', '1.3']")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")
				profileAttachmentBaseModel.Name = core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateProfileAttachmentOptions model
				createProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileAttachmentOptions)
				createProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				createProfileAttachmentOptionsModel.Attachments = []securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel}
				createProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				createProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateProfileAttachment(createProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProfileAttachments(listProfileAttachmentsOptions *ListProfileAttachmentsOptions) - Operation response error`, func() {
		listProfileAttachmentsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfileAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProfileAttachments with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfileAttachmentsOptions model
				listProfileAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListProfileAttachmentsOptions)
				listProfileAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileAttachmentsOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listProfileAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProfileAttachments(listProfileAttachmentsOptions *ListProfileAttachmentsOptions)`, func() {
		listProfileAttachmentsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfileAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "attachments": [{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListProfileAttachments successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListProfileAttachmentsOptions model
				listProfileAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListProfileAttachmentsOptions)
				listProfileAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileAttachmentsOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listProfileAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListProfileAttachmentsWithContext(ctx, listProfileAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListProfileAttachmentsWithContext(ctx, listProfileAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfileAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "attachments": [{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}]}`)
				}))
			})
			It(`Invoke ListProfileAttachments successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListProfileAttachments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProfileAttachmentsOptions model
				listProfileAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListProfileAttachmentsOptions)
				listProfileAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileAttachmentsOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listProfileAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListProfileAttachments with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfileAttachmentsOptions model
				listProfileAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListProfileAttachmentsOptions)
				listProfileAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileAttachmentsOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listProfileAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListProfileAttachmentsOptions model with no property values
				listProfileAttachmentsOptionsModelNew := new(securityandcompliancecenterapiv3.ListProfileAttachmentsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProfileAttachments successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfileAttachmentsOptions model
				listProfileAttachmentsOptionsModel := new(securityandcompliancecenterapiv3.ListProfileAttachmentsOptions)
				listProfileAttachmentsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileAttachmentsOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileAttachmentsOptionsModel.AccountID = core.StringPtr("testString")
				listProfileAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListProfileAttachments(listProfileAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProfileAttachment(getProfileAttachmentOptions *GetProfileAttachmentOptions) - Operation response error`, func() {
		getProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProfileAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProfileAttachment with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProfileAttachmentOptions model
				getProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.GetProfileAttachmentOptions)
				getProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProfileAttachment(getProfileAttachmentOptions *GetProfileAttachmentOptions)`, func() {
		getProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProfileAttachmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetProfileAttachment successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetProfileAttachmentOptions model
				getProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.GetProfileAttachmentOptions)
				getProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetProfileAttachmentWithContext(ctx, getProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetProfileAttachmentWithContext(ctx, getProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProfileAttachmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetProfileAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProfileAttachmentOptions model
				getProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.GetProfileAttachmentOptions)
				getProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetProfileAttachment with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProfileAttachmentOptions model
				getProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.GetProfileAttachmentOptions)
				getProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProfileAttachmentOptions model with no property values
				getProfileAttachmentOptionsModelNew := new(securityandcompliancecenterapiv3.GetProfileAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProfileAttachmentOptions model
				getProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.GetProfileAttachmentOptions)
				getProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				getProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetProfileAttachment(getProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceProfileAttachment(replaceProfileAttachmentOptions *ReplaceProfileAttachmentOptions) - Operation response error`, func() {
		replaceProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfileAttachmentPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceProfileAttachment with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{"testString"}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("testString")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ReplaceProfileAttachmentOptions model
				replaceProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileAttachmentOptions)
				replaceProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				replaceProfileAttachmentOptionsModel.Description = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Name = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Notifications = attachmentNotificationsModel
				replaceProfileAttachmentOptionsModel.Schedule = core.StringPtr("daily")
				replaceProfileAttachmentOptionsModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				replaceProfileAttachmentOptionsModel.Status = core.StringPtr("enabled")
				replaceProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceProfileAttachment(replaceProfileAttachmentOptions *ReplaceProfileAttachmentOptions)`, func() {
		replaceProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfileAttachmentPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceProfileAttachment successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{"testString"}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("testString")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model

				// Construct an instance of the ReplaceProfileAttachmentOptions model
				replaceProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileAttachmentOptions)
				replaceProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				replaceProfileAttachmentOptionsModel.Description = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Name = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Notifications = attachmentNotificationsModel
				replaceProfileAttachmentOptionsModel.Schedule = core.StringPtr("daily")
				replaceProfileAttachmentOptionsModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				replaceProfileAttachmentOptionsModel.Status = core.StringPtr("enabled")
				replaceProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ReplaceProfileAttachmentWithContext(ctx, replaceProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ReplaceProfileAttachmentWithContext(ctx, replaceProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfileAttachmentPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke ReplaceProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{"testString"}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("testString")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ReplaceProfileAttachmentOptions model
				replaceProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileAttachmentOptions)
				replaceProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				replaceProfileAttachmentOptionsModel.Description = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Name = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Notifications = attachmentNotificationsModel
				replaceProfileAttachmentOptionsModel.Schedule = core.StringPtr("daily")
				replaceProfileAttachmentOptionsModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				replaceProfileAttachmentOptionsModel.Status = core.StringPtr("enabled")
				replaceProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceProfileAttachment with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{"testString"}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("testString")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model

				// Construct an instance of the ReplaceProfileAttachmentOptions model
				replaceProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileAttachmentOptions)
				replaceProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				replaceProfileAttachmentOptionsModel.Description = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Name = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Notifications = attachmentNotificationsModel
				replaceProfileAttachmentOptionsModel.Schedule = core.StringPtr("daily")
				replaceProfileAttachmentOptionsModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				replaceProfileAttachmentOptionsModel.Status = core.StringPtr("enabled")
				replaceProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceProfileAttachmentOptions model with no property values
				replaceProfileAttachmentOptionsModelNew := new(securityandcompliancecenterapiv3.ReplaceProfileAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{"testString"}

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				multiCloudScopePayloadModel.ID = core.StringPtr("testString")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the ProfileAttachmentBase model

				// Construct an instance of the ReplaceProfileAttachmentOptions model
				replaceProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileAttachmentOptions)
				replaceProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				replaceProfileAttachmentOptionsModel.Description = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Name = core.StringPtr("testString")
				replaceProfileAttachmentOptionsModel.Notifications = attachmentNotificationsModel
				replaceProfileAttachmentOptionsModel.Schedule = core.StringPtr("daily")
				replaceProfileAttachmentOptionsModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				replaceProfileAttachmentOptionsModel.Status = core.StringPtr("enabled")
				replaceProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileAttachment(replaceProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteProfileAttachment(deleteProfileAttachmentOptions *DeleteProfileAttachmentOptions) - Operation response error`, func() {
		deleteProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProfileAttachmentPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DeleteProfileAttachment with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteProfileAttachmentOptions model
				deleteProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.DeleteProfileAttachmentOptions)
				deleteProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteProfileAttachment(deleteProfileAttachmentOptions *DeleteProfileAttachmentOptions)`, func() {
		deleteProfileAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProfileAttachmentPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke DeleteProfileAttachment successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the DeleteProfileAttachmentOptions model
				deleteProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.DeleteProfileAttachmentOptions)
				deleteProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.DeleteProfileAttachmentWithContext(ctx, deleteProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.DeleteProfileAttachmentWithContext(ctx, deleteProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProfileAttachmentPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke DeleteProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.DeleteProfileAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteProfileAttachmentOptions model
				deleteProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.DeleteProfileAttachmentOptions)
				deleteProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke DeleteProfileAttachment with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteProfileAttachmentOptions model
				deleteProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.DeleteProfileAttachmentOptions)
				deleteProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteProfileAttachmentOptions model with no property values
				deleteProfileAttachmentOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteProfileAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DeleteProfileAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteProfileAttachmentOptions model
				deleteProfileAttachmentOptionsModel := new(securityandcompliancecenterapiv3.DeleteProfileAttachmentOptions)
				deleteProfileAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProfileAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteProfileAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				deleteProfileAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.DeleteProfileAttachment(deleteProfileAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpgradeAttachment(upgradeAttachmentOptions *UpgradeAttachmentOptions) - Operation response error`, func() {
		upgradeAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString/upgrade"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(upgradeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpgradeAttachment with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the UpgradeAttachmentOptions model
				upgradeAttachmentOptionsModel := new(securityandcompliancecenterapiv3.UpgradeAttachmentOptions)
				upgradeAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				upgradeAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				upgradeAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				upgradeAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpgradeAttachment(upgradeAttachmentOptions *UpgradeAttachmentOptions)`, func() {
		upgradeAttachmentPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/attachments/testString/upgrade"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(upgradeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpgradeAttachment successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the UpgradeAttachmentOptions model
				upgradeAttachmentOptionsModel := new(securityandcompliancecenterapiv3.UpgradeAttachmentOptions)
				upgradeAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				upgradeAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				upgradeAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				upgradeAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.UpgradeAttachmentWithContext(ctx, upgradeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.UpgradeAttachmentWithContext(ctx, upgradeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(upgradeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"attachment_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "description": "Description", "name": "Name", "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}, "schedule": "daily", "scope": [{"id": "ID", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}], "status": "enabled", "account_id": "AccountID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "id": "ID", "instance_id": "InstanceID", "last_scan": {"id": "ID", "status": "Status", "time": "2019-01-01T12:00:00.000Z"}, "next_scan_time": "2019-01-01T12:00:00.000Z", "profile_id": "ProfileID", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpgradeAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.UpgradeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the UpgradeAttachmentOptions model
				upgradeAttachmentOptionsModel := new(securityandcompliancecenterapiv3.UpgradeAttachmentOptions)
				upgradeAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				upgradeAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				upgradeAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				upgradeAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpgradeAttachment with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the UpgradeAttachmentOptions model
				upgradeAttachmentOptionsModel := new(securityandcompliancecenterapiv3.UpgradeAttachmentOptions)
				upgradeAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				upgradeAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				upgradeAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				upgradeAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpgradeAttachmentOptions model with no property values
				upgradeAttachmentOptionsModelNew := new(securityandcompliancecenterapiv3.UpgradeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpgradeAttachment successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")

				// Construct an instance of the UpgradeAttachmentOptions model
				upgradeAttachmentOptionsModel := new(securityandcompliancecenterapiv3.UpgradeAttachmentOptions)
				upgradeAttachmentOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				upgradeAttachmentOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				upgradeAttachmentOptionsModel.AttachmentID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				upgradeAttachmentOptionsModel.AccountID = core.StringPtr("testString")
				upgradeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.UpgradeAttachment(upgradeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateCustomControlLibrary(createCustomControlLibraryOptions *CreateCustomControlLibraryOptions) - Operation response error`, func() {
		createCustomControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCustomControlLibraryPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateCustomControlLibrary with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.AssessmentPrototype)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("This rule will check on regulation")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecificationPrototype)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("apprapp")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("This field is used to describe a control specification")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.ControlPrototype)
				controlPrototypeModel.ControlName = core.StringPtr("security")
				controlPrototypeModel.ControlDescription = core.StringPtr("This is a description of a control")
				controlPrototypeModel.ControlCategory = core.StringPtr("test-control")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateCustomControlLibraryOptions model
				createCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.CreateCustomControlLibraryOptions)
				createCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("custom control library from SDK")
				createCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("This is a custom control library made from the SDK test framework")
				createCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				createCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("0.0.1")
				createCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel}
				createCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				createCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateCustomControlLibrary(createCustomControlLibraryOptions *CreateCustomControlLibraryOptions)`, func() {
		createCustomControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCustomControlLibraryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke CreateCustomControlLibrary successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.AssessmentPrototype)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("This rule will check on regulation")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecificationPrototype)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("apprapp")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("This field is used to describe a control specification")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.ControlPrototype)
				controlPrototypeModel.ControlName = core.StringPtr("security")
				controlPrototypeModel.ControlDescription = core.StringPtr("This is a description of a control")
				controlPrototypeModel.ControlCategory = core.StringPtr("test-control")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateCustomControlLibraryOptions model
				createCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.CreateCustomControlLibraryOptions)
				createCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("custom control library from SDK")
				createCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("This is a custom control library made from the SDK test framework")
				createCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				createCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("0.0.1")
				createCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel}
				createCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				createCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateCustomControlLibraryWithContext(ctx, createCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateCustomControlLibraryWithContext(ctx, createCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createCustomControlLibraryPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke CreateCustomControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateCustomControlLibrary(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.AssessmentPrototype)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("This rule will check on regulation")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecificationPrototype)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("apprapp")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("This field is used to describe a control specification")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.ControlPrototype)
				controlPrototypeModel.ControlName = core.StringPtr("security")
				controlPrototypeModel.ControlDescription = core.StringPtr("This is a description of a control")
				controlPrototypeModel.ControlCategory = core.StringPtr("test-control")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateCustomControlLibraryOptions model
				createCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.CreateCustomControlLibraryOptions)
				createCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("custom control library from SDK")
				createCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("This is a custom control library made from the SDK test framework")
				createCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				createCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("0.0.1")
				createCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel}
				createCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				createCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateCustomControlLibrary with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.AssessmentPrototype)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("This rule will check on regulation")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecificationPrototype)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("apprapp")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("This field is used to describe a control specification")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.ControlPrototype)
				controlPrototypeModel.ControlName = core.StringPtr("security")
				controlPrototypeModel.ControlDescription = core.StringPtr("This is a description of a control")
				controlPrototypeModel.ControlCategory = core.StringPtr("test-control")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateCustomControlLibraryOptions model
				createCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.CreateCustomControlLibraryOptions)
				createCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("custom control library from SDK")
				createCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("This is a custom control library made from the SDK test framework")
				createCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				createCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("0.0.1")
				createCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel}
				createCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				createCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateCustomControlLibraryOptions model with no property values
				createCustomControlLibraryOptionsModelNew := new(securityandcompliancecenterapiv3.CreateCustomControlLibraryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateCustomControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.AssessmentPrototype)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("This rule will check on regulation")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecificationPrototype)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("apprapp")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("This field is used to describe a control specification")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.ControlPrototype)
				controlPrototypeModel.ControlName = core.StringPtr("security")
				controlPrototypeModel.ControlDescription = core.StringPtr("This is a description of a control")
				controlPrototypeModel.ControlCategory = core.StringPtr("test-control")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("disabled")

				// Construct an instance of the CreateCustomControlLibraryOptions model
				createCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.CreateCustomControlLibraryOptions)
				createCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("custom control library from SDK")
				createCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("This is a custom control library made from the SDK test framework")
				createCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				createCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("0.0.1")
				createCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel}
				createCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				createCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateCustomControlLibrary(createCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListControlLibraries(listControlLibrariesOptions *ListControlLibrariesOptions) - Operation response error`, func() {
		listControlLibrariesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listControlLibrariesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListControlLibraries with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListControlLibrariesOptions model
				listControlLibrariesOptionsModel := new(securityandcompliancecenterapiv3.ListControlLibrariesOptions)
				listControlLibrariesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listControlLibrariesOptionsModel.AccountID = core.StringPtr("testString")
				listControlLibrariesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListControlLibraries(listControlLibrariesOptions *ListControlLibrariesOptions)`, func() {
		listControlLibrariesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listControlLibrariesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "control_libraries": [{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}]}`)
				}))
			})
			It(`Invoke ListControlLibraries successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListControlLibrariesOptions model
				listControlLibrariesOptionsModel := new(securityandcompliancecenterapiv3.ListControlLibrariesOptions)
				listControlLibrariesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listControlLibrariesOptionsModel.AccountID = core.StringPtr("testString")
				listControlLibrariesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListControlLibrariesWithContext(ctx, listControlLibrariesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListControlLibrariesWithContext(ctx, listControlLibrariesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listControlLibrariesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "control_libraries": [{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}]}`)
				}))
			})
			It(`Invoke ListControlLibraries successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListControlLibraries(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListControlLibrariesOptions model
				listControlLibrariesOptionsModel := new(securityandcompliancecenterapiv3.ListControlLibrariesOptions)
				listControlLibrariesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listControlLibrariesOptionsModel.AccountID = core.StringPtr("testString")
				listControlLibrariesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListControlLibraries with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListControlLibrariesOptions model
				listControlLibrariesOptionsModel := new(securityandcompliancecenterapiv3.ListControlLibrariesOptions)
				listControlLibrariesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listControlLibrariesOptionsModel.AccountID = core.StringPtr("testString")
				listControlLibrariesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListControlLibrariesOptions model with no property values
				listControlLibrariesOptionsModelNew := new(securityandcompliancecenterapiv3.ListControlLibrariesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListControlLibraries successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListControlLibrariesOptions model
				listControlLibrariesOptionsModel := new(securityandcompliancecenterapiv3.ListControlLibrariesOptions)
				listControlLibrariesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listControlLibrariesOptionsModel.AccountID = core.StringPtr("testString")
				listControlLibrariesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListControlLibraries(listControlLibrariesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceCustomControlLibrary(replaceCustomControlLibraryOptions *ReplaceCustomControlLibraryOptions) - Operation response error`, func() {
		replaceCustomControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries/51ca566e-c559-412b-8d64-f05b57044c32"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceCustomControlLibraryPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["bss_account"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceCustomControlLibrary with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.Assessment)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("testString")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecification)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.Control)
				controlPrototypeModel.ControlName = core.StringPtr("testString")
				controlPrototypeModel.ControlDescription = core.StringPtr("testString")
				controlPrototypeModel.ControlCategory = core.StringPtr("testString")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("testString")

				// Construct an instance of the ReplaceCustomControlLibraryOptions model
				replaceCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.ReplaceCustomControlLibraryOptions)
				replaceCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				replaceCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				replaceCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.Control{*controlPrototypeModel}
				replaceCustomControlLibraryOptionsModel.BssAccount = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceCustomControlLibrary(replaceCustomControlLibraryOptions *ReplaceCustomControlLibraryOptions)`, func() {
		replaceCustomControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries/51ca566e-c559-412b-8d64-f05b57044c32"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceCustomControlLibraryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["bss_account"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke ReplaceCustomControlLibrary successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.Assessment)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("testString")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecification)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.Control)
				controlPrototypeModel.ControlName = core.StringPtr("testString")
				controlPrototypeModel.ControlDescription = core.StringPtr("testString")
				controlPrototypeModel.ControlCategory = core.StringPtr("testString")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("testString")

				// Construct an instance of the ReplaceCustomControlLibraryOptions model
				replaceCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.ReplaceCustomControlLibraryOptions)
				replaceCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				replaceCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				replaceCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.Control{*controlPrototypeModel}
				replaceCustomControlLibraryOptionsModel.BssAccount = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ReplaceCustomControlLibraryWithContext(ctx, replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ReplaceCustomControlLibraryWithContext(ctx, replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceCustomControlLibraryPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["bss_account"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke ReplaceCustomControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ReplaceCustomControlLibrary(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.Assessment)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("testString")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecification)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.Control)
				controlPrototypeModel.ControlName = core.StringPtr("testString")
				controlPrototypeModel.ControlDescription = core.StringPtr("testString")
				controlPrototypeModel.ControlCategory = core.StringPtr("testString")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("testString")

				// Construct an instance of the ReplaceCustomControlLibraryOptions model
				replaceCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.ReplaceCustomControlLibraryOptions)
				replaceCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				replaceCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				replaceCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.Control{*controlPrototypeModel}
				replaceCustomControlLibraryOptionsModel.BssAccount = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceCustomControlLibrary with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.Assessment)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("testString")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecification)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.Control)
				controlPrototypeModel.ControlName = core.StringPtr("testString")
				controlPrototypeModel.ControlDescription = core.StringPtr("testString")
				controlPrototypeModel.ControlCategory = core.StringPtr("testString")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("testString")

				// Construct an instance of the ReplaceCustomControlLibraryOptions model
				replaceCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.ReplaceCustomControlLibraryOptions)
				replaceCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				replaceCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				replaceCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.Control{*controlPrototypeModel}
				replaceCustomControlLibraryOptionsModel.BssAccount = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceCustomControlLibraryOptions model with no property values
				replaceCustomControlLibraryOptionsModelNew := new(securityandcompliancecenterapiv3.ReplaceCustomControlLibraryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceCustomControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.Assessment)
				assessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("testString")

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecification)
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.Control)
				controlPrototypeModel.ControlName = core.StringPtr("testString")
				controlPrototypeModel.ControlDescription = core.StringPtr("testString")
				controlPrototypeModel.ControlCategory = core.StringPtr("testString")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("testString")

				// Construct an instance of the ReplaceCustomControlLibraryOptions model
				replaceCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.ReplaceCustomControlLibraryOptions)
				replaceCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				replaceCustomControlLibraryOptionsModel.ControlLibraryName = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryDescription = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.ControlLibraryType = core.StringPtr("custom")
				replaceCustomControlLibraryOptionsModel.ControlLibraryVersion = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Controls = []securityandcompliancecenterapiv3.Control{*controlPrototypeModel}
				replaceCustomControlLibraryOptionsModel.BssAccount = core.StringPtr("testString")
				replaceCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ReplaceCustomControlLibrary(replaceCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetControlLibrary(getControlLibraryOptions *GetControlLibraryOptions) - Operation response error`, func() {
		getControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries/51ca566e-c559-412b-8d64-f05b57044c32"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getControlLibraryPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetControlLibrary with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetControlLibraryOptions model
				getControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.GetControlLibraryOptions)
				getControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				getControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				getControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetControlLibrary(getControlLibraryOptions *GetControlLibraryOptions)`, func() {
		getControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries/51ca566e-c559-412b-8d64-f05b57044c32"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getControlLibraryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke GetControlLibrary successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetControlLibraryOptions model
				getControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.GetControlLibraryOptions)
				getControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				getControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				getControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetControlLibraryWithContext(ctx, getControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetControlLibraryWithContext(ctx, getControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getControlLibraryPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke GetControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetControlLibrary(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetControlLibraryOptions model
				getControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.GetControlLibraryOptions)
				getControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				getControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				getControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetControlLibrary with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetControlLibraryOptions model
				getControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.GetControlLibraryOptions)
				getControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				getControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				getControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetControlLibraryOptions model with no property values
				getControlLibraryOptionsModelNew := new(securityandcompliancecenterapiv3.GetControlLibraryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetControlLibraryOptions model
				getControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.GetControlLibraryOptions)
				getControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				getControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				getControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetControlLibrary(getControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteCustomControlLibrary(deleteCustomControlLibraryOptions *DeleteCustomControlLibraryOptions) - Operation response error`, func() {
		deleteCustomControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries/51ca566e-c559-412b-8d64-f05b57044c32"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCustomControlLibraryPath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DeleteCustomControlLibrary with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteCustomControlLibraryOptions model
				deleteCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomControlLibraryOptions)
				deleteCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				deleteCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteCustomControlLibrary(deleteCustomControlLibraryOptions *DeleteCustomControlLibraryOptions)`, func() {
		deleteCustomControlLibraryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/control_libraries/51ca566e-c559-412b-8d64-f05b57044c32"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCustomControlLibraryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke DeleteCustomControlLibrary successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the DeleteCustomControlLibraryOptions model
				deleteCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomControlLibraryOptions)
				deleteCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				deleteCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.DeleteCustomControlLibraryWithContext(ctx, deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.DeleteCustomControlLibraryWithContext(ctx, deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCustomControlLibraryPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"control_library_name": "ControlLibraryName", "control_library_description": "ControlLibraryDescription", "control_library_type": "custom", "control_library_version": "ControlLibraryVersion", "controls": [{"control_name": "ControlName", "control_description": "ControlDescription", "control_category": "ControlCategory", "control_requirement": true, "control_parent": "ControlParent", "control_specifications": [{"component_id": "ComponentID", "environment": "ibm-cloud", "control_specification_description": "ControlSpecificationDescription", "assessments": [{"assessment_id": "AssessmentID", "assessment_description": "AssessmentDescription"}]}], "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "status": "Status"}], "id": "ID", "account_id": "AccountID", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "hierarchy_enabled": true, "controls_count": 13, "control_parents_count": 19}`)
				}))
			})
			It(`Invoke DeleteCustomControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomControlLibrary(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteCustomControlLibraryOptions model
				deleteCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomControlLibraryOptions)
				deleteCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				deleteCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke DeleteCustomControlLibrary with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteCustomControlLibraryOptions model
				deleteCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomControlLibraryOptions)
				deleteCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				deleteCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteCustomControlLibraryOptions model with no property values
				deleteCustomControlLibraryOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteCustomControlLibraryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DeleteCustomControlLibrary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteCustomControlLibraryOptions model
				deleteCustomControlLibraryOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomControlLibraryOptions)
				deleteCustomControlLibraryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomControlLibraryOptionsModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				deleteCustomControlLibraryOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomControlLibraryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomControlLibrary(deleteCustomControlLibraryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProfile(createProfileOptions *CreateProfileOptions) - Operation response error`, func() {
		createProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProfilePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateProfile with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				profileControlsPrototypeModel.ControlID = core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("automated")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("tls_version")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr(`["1.2","1.3"]`)
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("string_list")

				// Construct an instance of the CreateProfileOptions model
				createProfileOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileOptions)
				createProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileOptionsModel.ProfileName = core.StringPtr("Profile Example")
				createProfileOptionsModel.ProfileDescription = core.StringPtr("This is a profile")
				createProfileOptionsModel.ProfileVersion = core.StringPtr("1.0.0")
				createProfileOptionsModel.Latest = core.BoolPtr(true)
				createProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				createProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				createProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				createProfileOptionsModel.AccountID = core.StringPtr("testString")
				createProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateProfile(createProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateProfile(createProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProfile(createProfileOptions *CreateProfileOptions)`, func() {
		createProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProfilePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke CreateProfile successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				profileControlsPrototypeModel.ControlID = core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("automated")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("tls_version")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr(`["1.2","1.3"]`)
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("string_list")

				// Construct an instance of the CreateProfileOptions model
				createProfileOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileOptions)
				createProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileOptionsModel.ProfileName = core.StringPtr("Profile Example")
				createProfileOptionsModel.ProfileDescription = core.StringPtr("This is a profile")
				createProfileOptionsModel.ProfileVersion = core.StringPtr("1.0.0")
				createProfileOptionsModel.Latest = core.BoolPtr(true)
				createProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				createProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				createProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				createProfileOptionsModel.AccountID = core.StringPtr("testString")
				createProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateProfileWithContext(ctx, createProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateProfile(createProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateProfileWithContext(ctx, createProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProfilePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke CreateProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				profileControlsPrototypeModel.ControlID = core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("automated")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("tls_version")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr(`["1.2","1.3"]`)
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("string_list")

				// Construct an instance of the CreateProfileOptions model
				createProfileOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileOptions)
				createProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileOptionsModel.ProfileName = core.StringPtr("Profile Example")
				createProfileOptionsModel.ProfileDescription = core.StringPtr("This is a profile")
				createProfileOptionsModel.ProfileVersion = core.StringPtr("1.0.0")
				createProfileOptionsModel.Latest = core.BoolPtr(true)
				createProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				createProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				createProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				createProfileOptionsModel.AccountID = core.StringPtr("testString")
				createProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateProfile(createProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateProfile with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				profileControlsPrototypeModel.ControlID = core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("automated")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("tls_version")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr(`["1.2","1.3"]`)
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("string_list")

				// Construct an instance of the CreateProfileOptions model
				createProfileOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileOptions)
				createProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileOptionsModel.ProfileName = core.StringPtr("Profile Example")
				createProfileOptionsModel.ProfileDescription = core.StringPtr("This is a profile")
				createProfileOptionsModel.ProfileVersion = core.StringPtr("1.0.0")
				createProfileOptionsModel.Latest = core.BoolPtr(true)
				createProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				createProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				createProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				createProfileOptionsModel.AccountID = core.StringPtr("testString")
				createProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateProfile(createProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateProfileOptions model with no property values
				createProfileOptionsModelNew := new(securityandcompliancecenterapiv3.CreateProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateProfile(createProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				profileControlsPrototypeModel.ControlID = core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("automated")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("tls_version")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr(`["1.2","1.3"]`)
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("string_list")

				// Construct an instance of the CreateProfileOptions model
				createProfileOptionsModel := new(securityandcompliancecenterapiv3.CreateProfileOptions)
				createProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileOptionsModel.ProfileName = core.StringPtr("Profile Example")
				createProfileOptionsModel.ProfileDescription = core.StringPtr("This is a profile")
				createProfileOptionsModel.ProfileVersion = core.StringPtr("1.0.0")
				createProfileOptionsModel.Latest = core.BoolPtr(true)
				createProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				createProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				createProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				createProfileOptionsModel.AccountID = core.StringPtr("testString")
				createProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateProfile(createProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProfiles(listProfilesOptions *ListProfilesOptions) - Operation response error`, func() {
		listProfilesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProfiles with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfilesOptions model
				listProfilesOptionsModel := new(securityandcompliancecenterapiv3.ListProfilesOptions)
				listProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfilesOptionsModel.AccountID = core.StringPtr("testString")
				listProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProfiles(listProfilesOptions *ListProfilesOptions)`, func() {
		listProfilesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "profiles": [{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}]}`)
				}))
			})
			It(`Invoke ListProfiles successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListProfilesOptions model
				listProfilesOptionsModel := new(securityandcompliancecenterapiv3.ListProfilesOptions)
				listProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfilesOptionsModel.AccountID = core.StringPtr("testString")
				listProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListProfilesWithContext(ctx, listProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListProfilesWithContext(ctx, listProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "profiles": [{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}]}`)
				}))
			})
			It(`Invoke ListProfiles successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProfilesOptions model
				listProfilesOptionsModel := new(securityandcompliancecenterapiv3.ListProfilesOptions)
				listProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfilesOptionsModel.AccountID = core.StringPtr("testString")
				listProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListProfiles with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfilesOptions model
				listProfilesOptionsModel := new(securityandcompliancecenterapiv3.ListProfilesOptions)
				listProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfilesOptionsModel.AccountID = core.StringPtr("testString")
				listProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListProfilesOptions model with no property values
				listProfilesOptionsModelNew := new(securityandcompliancecenterapiv3.ListProfilesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProfiles successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfilesOptions model
				listProfilesOptionsModel := new(securityandcompliancecenterapiv3.ListProfilesOptions)
				listProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfilesOptionsModel.AccountID = core.StringPtr("testString")
				listProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListProfiles(listProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceProfile(replaceProfileOptions *ReplaceProfileOptions) - Operation response error`, func() {
		replaceProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfilePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceProfile with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("testString")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileOptions model
				replaceProfileOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileOptions)
				replaceProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileOptionsModel.ProfileName = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileDescription = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileType = core.StringPtr("custom")
				replaceProfileOptionsModel.ProfileVersion = core.StringPtr("testString")
				replaceProfileOptionsModel.Latest = core.BoolPtr(true)
				replaceProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				replaceProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				replaceProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				replaceProfileOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceProfile(replaceProfileOptions *ReplaceProfileOptions)`, func() {
		replaceProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfilePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke ReplaceProfile successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("testString")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileOptions model
				replaceProfileOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileOptions)
				replaceProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileOptionsModel.ProfileName = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileDescription = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileType = core.StringPtr("custom")
				replaceProfileOptionsModel.ProfileVersion = core.StringPtr("testString")
				replaceProfileOptionsModel.Latest = core.BoolPtr(true)
				replaceProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				replaceProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				replaceProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				replaceProfileOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ReplaceProfileWithContext(ctx, replaceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ReplaceProfileWithContext(ctx, replaceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfilePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke ReplaceProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("testString")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileOptions model
				replaceProfileOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileOptions)
				replaceProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileOptionsModel.ProfileName = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileDescription = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileType = core.StringPtr("custom")
				replaceProfileOptionsModel.ProfileVersion = core.StringPtr("testString")
				replaceProfileOptionsModel.Latest = core.BoolPtr(true)
				replaceProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				replaceProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				replaceProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				replaceProfileOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceProfile with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("testString")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileOptions model
				replaceProfileOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileOptions)
				replaceProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileOptionsModel.ProfileName = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileDescription = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileType = core.StringPtr("custom")
				replaceProfileOptionsModel.ProfileVersion = core.StringPtr("testString")
				replaceProfileOptionsModel.Latest = core.BoolPtr(true)
				replaceProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				replaceProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				replaceProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				replaceProfileOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceProfileOptions model with no property values
				replaceProfileOptionsModelNew := new(securityandcompliancecenterapiv3.ReplaceProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("testString")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileOptions model
				replaceProfileOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileOptions)
				replaceProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileOptionsModel.ProfileName = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileDescription = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileType = core.StringPtr("testString")
				replaceProfileOptionsModel.ProfileVersion = core.StringPtr("testString")
				replaceProfileOptionsModel.Latest = core.BoolPtr(true)
				replaceProfileOptionsModel.VersionGroupLabel = core.StringPtr("testString")
				replaceProfileOptionsModel.Controls = []securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}
				replaceProfileOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}
				replaceProfileOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfile(replaceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProfile(getProfileOptions *GetProfileOptions) - Operation response error`, func() {
		getProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProfile with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProfileOptions model
				getProfileOptionsModel := new(securityandcompliancecenterapiv3.GetProfileOptions)
				getProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileOptionsModel.AccountID = core.StringPtr("testString")
				getProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetProfile(getProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetProfile(getProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProfile(getProfileOptions *GetProfileOptions)`, func() {
		getProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke GetProfile successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetProfileOptions model
				getProfileOptionsModel := new(securityandcompliancecenterapiv3.GetProfileOptions)
				getProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileOptionsModel.AccountID = core.StringPtr("testString")
				getProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetProfileWithContext(ctx, getProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetProfile(getProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetProfileWithContext(ctx, getProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke GetProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProfileOptions model
				getProfileOptionsModel := new(securityandcompliancecenterapiv3.GetProfileOptions)
				getProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileOptionsModel.AccountID = core.StringPtr("testString")
				getProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetProfile(getProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetProfile with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProfileOptions model
				getProfileOptionsModel := new(securityandcompliancecenterapiv3.GetProfileOptions)
				getProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileOptionsModel.AccountID = core.StringPtr("testString")
				getProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetProfile(getProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProfileOptions model with no property values
				getProfileOptionsModelNew := new(securityandcompliancecenterapiv3.GetProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetProfile(getProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProfileOptions model
				getProfileOptionsModel := new(securityandcompliancecenterapiv3.GetProfileOptions)
				getProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileOptionsModel.AccountID = core.StringPtr("testString")
				getProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetProfile(getProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteCustomProfile(deleteCustomProfileOptions *DeleteCustomProfileOptions) - Operation response error`, func() {
		deleteCustomProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCustomProfilePath))
					Expect(req.Method).To(Equal("DELETE"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke DeleteCustomProfile with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteCustomProfileOptions model
				deleteCustomProfileOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomProfileOptions)
				deleteCustomProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteCustomProfileOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteCustomProfile(deleteCustomProfileOptions *DeleteCustomProfileOptions)`, func() {
		deleteCustomProfilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCustomProfilePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke DeleteCustomProfile successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the DeleteCustomProfileOptions model
				deleteCustomProfileOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomProfileOptions)
				deleteCustomProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteCustomProfileOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.DeleteCustomProfileWithContext(ctx, deleteCustomProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.DeleteCustomProfileWithContext(ctx, deleteCustomProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteCustomProfilePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13, "attachments_count": 16, "controls": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke DeleteCustomProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DeleteCustomProfileOptions model
				deleteCustomProfileOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomProfileOptions)
				deleteCustomProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteCustomProfileOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke DeleteCustomProfile with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteCustomProfileOptions model
				deleteCustomProfileOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomProfileOptions)
				deleteCustomProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteCustomProfileOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the DeleteCustomProfileOptions model with no property values
				deleteCustomProfileOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteCustomProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke DeleteCustomProfile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteCustomProfileOptions model
				deleteCustomProfileOptionsModel := new(securityandcompliancecenterapiv3.DeleteCustomProfileOptions)
				deleteCustomProfileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomProfileOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				deleteCustomProfileOptionsModel.AccountID = core.StringPtr("testString")
				deleteCustomProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.DeleteCustomProfile(deleteCustomProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceProfileParameters(replaceProfileParametersOptions *ReplaceProfileParametersOptions) - Operation response error`, func() {
		replaceProfileParametersPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/parameters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfileParametersPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceProfileParameters with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DefaultParameters model
				defaultParametersModel := new(securityandcompliancecenterapiv3.DefaultParameters)
				defaultParametersModel.AssessmentType = core.StringPtr("testString")
				defaultParametersModel.AssessmentID = core.StringPtr("testString")
				defaultParametersModel.ParameterName = core.StringPtr("testString")
				defaultParametersModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileParametersOptions model
				replaceProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileParametersOptions)
				replaceProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileParametersOptionsModel.ID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel}
				replaceProfileParametersOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceProfileParameters(replaceProfileParametersOptions *ReplaceProfileParametersOptions)`, func() {
		replaceProfileParametersPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/parameters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfileParametersPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke ReplaceProfileParameters successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the DefaultParameters model
				defaultParametersModel := new(securityandcompliancecenterapiv3.DefaultParameters)
				defaultParametersModel.AssessmentType = core.StringPtr("testString")
				defaultParametersModel.AssessmentID = core.StringPtr("testString")
				defaultParametersModel.ParameterName = core.StringPtr("testString")
				defaultParametersModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileParametersOptions model
				replaceProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileParametersOptions)
				replaceProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileParametersOptionsModel.ID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel}
				replaceProfileParametersOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ReplaceProfileParametersWithContext(ctx, replaceProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ReplaceProfileParametersWithContext(ctx, replaceProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceProfileParametersPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke ReplaceProfileParameters successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileParameters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DefaultParameters model
				defaultParametersModel := new(securityandcompliancecenterapiv3.DefaultParameters)
				defaultParametersModel.AssessmentType = core.StringPtr("testString")
				defaultParametersModel.AssessmentID = core.StringPtr("testString")
				defaultParametersModel.ParameterName = core.StringPtr("testString")
				defaultParametersModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileParametersOptions model
				replaceProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileParametersOptions)
				replaceProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileParametersOptionsModel.ID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel}
				replaceProfileParametersOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceProfileParameters with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DefaultParameters model
				defaultParametersModel := new(securityandcompliancecenterapiv3.DefaultParameters)
				defaultParametersModel.AssessmentType = core.StringPtr("testString")
				defaultParametersModel.AssessmentID = core.StringPtr("testString")
				defaultParametersModel.ParameterName = core.StringPtr("testString")
				defaultParametersModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileParametersOptions model
				replaceProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileParametersOptions)
				replaceProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileParametersOptionsModel.ID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel}
				replaceProfileParametersOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceProfileParametersOptions model with no property values
				replaceProfileParametersOptionsModelNew := new(securityandcompliancecenterapiv3.ReplaceProfileParametersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceProfileParameters successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DefaultParameters model
				defaultParametersModel := new(securityandcompliancecenterapiv3.DefaultParameters)
				defaultParametersModel.AssessmentType = core.StringPtr("testString")
				defaultParametersModel.AssessmentID = core.StringPtr("testString")
				defaultParametersModel.ParameterName = core.StringPtr("testString")
				defaultParametersModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersModel.ParameterType = core.StringPtr("testString")

				// Construct an instance of the ReplaceProfileParametersOptions model
				replaceProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ReplaceProfileParametersOptions)
				replaceProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileParametersOptionsModel.ID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.DefaultParameters = []securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel}
				replaceProfileParametersOptionsModel.AccountID = core.StringPtr("testString")
				replaceProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ReplaceProfileParameters(replaceProfileParametersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProfileParameters(listProfileParametersOptions *ListProfileParametersOptions) - Operation response error`, func() {
		listProfileParametersPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/parameters"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfileParametersPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProfileParameters with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfileParametersOptions model
				listProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ListProfileParametersOptions)
				listProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProfileParameters(listProfileParametersOptions *ListProfileParametersOptions)`, func() {
		listProfileParametersPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/parameters"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfileParametersPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke ListProfileParameters successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListProfileParametersOptions model
				listProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ListProfileParametersOptions)
				listProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListProfileParametersWithContext(ctx, listProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListProfileParametersWithContext(ctx, listProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProfileParametersPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "default_parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}]}`)
				}))
			})
			It(`Invoke ListProfileParameters successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListProfileParameters(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProfileParametersOptions model
				listProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ListProfileParametersOptions)
				listProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListProfileParameters with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfileParametersOptions model
				listProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ListProfileParametersOptions)
				listProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListProfileParametersOptions model with no property values
				listProfileParametersOptionsModelNew := new(securityandcompliancecenterapiv3.ListProfileParametersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProfileParameters successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProfileParametersOptions model
				listProfileParametersOptionsModel := new(securityandcompliancecenterapiv3.ListProfileParametersOptions)
				listProfileParametersOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileParametersOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileParametersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListProfileParameters(listProfileParametersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CompareProfiles(compareProfilesOptions *CompareProfilesOptions) - Operation response error`, func() {
		compareProfilesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/compare"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(compareProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CompareProfiles with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CompareProfilesOptions model
				compareProfilesOptionsModel := new(securityandcompliancecenterapiv3.CompareProfilesOptions)
				compareProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				compareProfilesOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				compareProfilesOptionsModel.AccountID = core.StringPtr("testString")
				compareProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CompareProfiles(compareProfilesOptions *CompareProfilesOptions)`, func() {
		compareProfilesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/profiles/48279384-3d29-4089-8259-8ed354774b4a/compare"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(compareProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"current_predefined_version": {"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13}, "latest_predefined_version": {"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13}, "controls_changes": {"total_added": 10, "total_removed": 12, "total_updated": 12, "added": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "removed": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "updated": [{"current": {"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}, "latest": {"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}}]}, "default_parameters_changes": {"total_added": 10, "total_removed": 12, "total_updated": 12, "added": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}], "removed": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}], "updated": [{"current": {"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}, "latest": {"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}}]}}`)
				}))
			})
			It(`Invoke CompareProfiles successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the CompareProfilesOptions model
				compareProfilesOptionsModel := new(securityandcompliancecenterapiv3.CompareProfilesOptions)
				compareProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				compareProfilesOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				compareProfilesOptionsModel.AccountID = core.StringPtr("testString")
				compareProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CompareProfilesWithContext(ctx, compareProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CompareProfilesWithContext(ctx, compareProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(compareProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"current_predefined_version": {"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13}, "latest_predefined_version": {"id": "ID", "profile_name": "ProfileName", "profile_description": "ProfileDescription", "profile_type": "custom", "profile_version": "ProfileVersion", "version_group_label": "VersionGroupLabel", "latest": true, "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "controls_count": 13}, "controls_changes": {"total_added": 10, "total_removed": 12, "total_updated": 12, "added": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "removed": [{"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}], "updated": [{"current": {"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}, "latest": {"control_library_id": "ControlLibraryID", "control_id": "ControlID", "control_library_version": "ControlLibraryVersion", "control_name": "ControlName", "control_description": "ControlDescription", "control_severity": "ControlSeverity", "control_category": "ControlCategory", "control_parent": "ControlParent", "control_docs": {"control_docs_id": "ControlDocsID", "control_docs_type": "ControlDocsType"}, "control_specifications": [{"id": "ID", "responsibility": "Responsibility", "component_id": "ComponentID", "environment": "Environment", "description": "Description", "assessments_count": 16, "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}]}]}}]}, "default_parameters_changes": {"total_added": 10, "total_removed": 12, "total_updated": 12, "added": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}], "removed": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}], "updated": [{"current": {"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}, "latest": {"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "ParameterName", "parameter_default_value": "anyValue", "parameter_display_name": "ParameterDisplayName", "parameter_type": "ParameterType"}}]}}`)
				}))
			})
			It(`Invoke CompareProfiles successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CompareProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CompareProfilesOptions model
				compareProfilesOptionsModel := new(securityandcompliancecenterapiv3.CompareProfilesOptions)
				compareProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				compareProfilesOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				compareProfilesOptionsModel.AccountID = core.StringPtr("testString")
				compareProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CompareProfiles with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CompareProfilesOptions model
				compareProfilesOptionsModel := new(securityandcompliancecenterapiv3.CompareProfilesOptions)
				compareProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				compareProfilesOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				compareProfilesOptionsModel.AccountID = core.StringPtr("testString")
				compareProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CompareProfilesOptions model with no property values
				compareProfilesOptionsModelNew := new(securityandcompliancecenterapiv3.CompareProfilesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CompareProfiles successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CompareProfilesOptions model
				compareProfilesOptionsModel := new(securityandcompliancecenterapiv3.CompareProfilesOptions)
				compareProfilesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				compareProfilesOptionsModel.ProfileID = core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")
				compareProfilesOptionsModel.AccountID = core.StringPtr("testString")
				compareProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CompareProfiles(compareProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateScope(createScopeOptions *CreateScopeOptions) - Operation response error`, func() {
		createScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScopePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateScope with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("62ecf99b240144dea9125666249edfcb")

				// Construct an instance of the CreateScopeOptions model
				createScopeOptionsModel := new(securityandcompliancecenterapiv3.CreateScopeOptions)
				createScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScopeOptionsModel.Name = core.StringPtr("Sample Scope")
				createScopeOptionsModel.Description = core.StringPtr("The scope that is defined for IBM resources.")
				createScopeOptionsModel.Environment = core.StringPtr("ibm-cloud")
				createScopeOptionsModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				createScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateScope(createScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateScope(createScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateScope(createScopeOptions *CreateScopeOptions)`, func() {
		createScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScopePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}`)
				}))
			})
			It(`Invoke CreateScope successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("62ecf99b240144dea9125666249edfcb")

				// Construct an instance of the CreateScopeOptions model
				createScopeOptionsModel := new(securityandcompliancecenterapiv3.CreateScopeOptions)
				createScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScopeOptionsModel.Name = core.StringPtr("Sample Scope")
				createScopeOptionsModel.Description = core.StringPtr("The scope that is defined for IBM resources.")
				createScopeOptionsModel.Environment = core.StringPtr("ibm-cloud")
				createScopeOptionsModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				createScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateScopeWithContext(ctx, createScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateScope(createScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateScopeWithContext(ctx, createScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScopePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}`)
				}))
			})
			It(`Invoke CreateScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateScope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("62ecf99b240144dea9125666249edfcb")

				// Construct an instance of the CreateScopeOptions model
				createScopeOptionsModel := new(securityandcompliancecenterapiv3.CreateScopeOptions)
				createScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScopeOptionsModel.Name = core.StringPtr("Sample Scope")
				createScopeOptionsModel.Description = core.StringPtr("The scope that is defined for IBM resources.")
				createScopeOptionsModel.Environment = core.StringPtr("ibm-cloud")
				createScopeOptionsModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				createScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateScope(createScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateScope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("62ecf99b240144dea9125666249edfcb")

				// Construct an instance of the CreateScopeOptions model
				createScopeOptionsModel := new(securityandcompliancecenterapiv3.CreateScopeOptions)
				createScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScopeOptionsModel.Name = core.StringPtr("Sample Scope")
				createScopeOptionsModel.Description = core.StringPtr("The scope that is defined for IBM resources.")
				createScopeOptionsModel.Environment = core.StringPtr("ibm-cloud")
				createScopeOptionsModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				createScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateScope(createScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateScopeOptions model with no property values
				createScopeOptionsModelNew := new(securityandcompliancecenterapiv3.CreateScopeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateScope(createScopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("62ecf99b240144dea9125666249edfcb")

				// Construct an instance of the CreateScopeOptions model
				createScopeOptionsModel := new(securityandcompliancecenterapiv3.CreateScopeOptions)
				createScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScopeOptionsModel.Name = core.StringPtr("Sample Scope")
				createScopeOptionsModel.Description = core.StringPtr("The scope that is defined for IBM resources.")
				createScopeOptionsModel.Environment = core.StringPtr("ibm-cloud")
				createScopeOptionsModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				createScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateScope(createScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListScopes(listScopesOptions *ListScopesOptions) - Operation response error`, func() {
		listScopesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScopesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListScopes with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListScopesOptions model
				listScopesOptionsModel := new(securityandcompliancecenterapiv3.ListScopesOptions)
				listScopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listScopesOptionsModel.Start = core.StringPtr("testString")
				listScopesOptionsModel.Name = core.StringPtr("testString")
				listScopesOptionsModel.Description = core.StringPtr("testString")
				listScopesOptionsModel.Environment = core.StringPtr("testString")
				listScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListScopes(listScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListScopes(listScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListScopes(listScopesOptions *ListScopesOptions)`, func() {
		listScopesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScopesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}]}`)
				}))
			})
			It(`Invoke ListScopes successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListScopesOptions model
				listScopesOptionsModel := new(securityandcompliancecenterapiv3.ListScopesOptions)
				listScopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listScopesOptionsModel.Start = core.StringPtr("testString")
				listScopesOptionsModel.Name = core.StringPtr("testString")
				listScopesOptionsModel.Description = core.StringPtr("testString")
				listScopesOptionsModel.Environment = core.StringPtr("testString")
				listScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListScopesWithContext(ctx, listScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListScopes(listScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListScopesWithContext(ctx, listScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScopesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}]}`)
				}))
			})
			It(`Invoke ListScopes successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListScopes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListScopesOptions model
				listScopesOptionsModel := new(securityandcompliancecenterapiv3.ListScopesOptions)
				listScopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listScopesOptionsModel.Start = core.StringPtr("testString")
				listScopesOptionsModel.Name = core.StringPtr("testString")
				listScopesOptionsModel.Description = core.StringPtr("testString")
				listScopesOptionsModel.Environment = core.StringPtr("testString")
				listScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListScopes(listScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListScopes with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListScopesOptions model
				listScopesOptionsModel := new(securityandcompliancecenterapiv3.ListScopesOptions)
				listScopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listScopesOptionsModel.Start = core.StringPtr("testString")
				listScopesOptionsModel.Name = core.StringPtr("testString")
				listScopesOptionsModel.Description = core.StringPtr("testString")
				listScopesOptionsModel.Environment = core.StringPtr("testString")
				listScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListScopes(listScopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListScopesOptions model with no property values
				listScopesOptionsModelNew := new(securityandcompliancecenterapiv3.ListScopesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListScopes(listScopesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListScopes successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListScopesOptions model
				listScopesOptionsModel := new(securityandcompliancecenterapiv3.ListScopesOptions)
				listScopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listScopesOptionsModel.Start = core.StringPtr("testString")
				listScopesOptionsModel.Name = core.StringPtr("testString")
				listScopesOptionsModel.Description = core.StringPtr("testString")
				listScopesOptionsModel.Environment = core.StringPtr("testString")
				listScopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListScopes(listScopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ScopeCollection)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ScopeCollection)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScopesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"scopes":[{"id":"ID","name":"Name","description":"Description","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}],"account_id":"AccountID","instance_id":"InstanceID","created_by":"CreatedBy","created_on":"2019-01-01T12:00:00.000Z","updated_by":"UpdatedBy","updated_on":"2019-01-01T12:00:00.000Z","attachment_count":15}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"scopes":[{"id":"ID","name":"Name","description":"Description","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}],"account_id":"AccountID","instance_id":"InstanceID","created_by":"CreatedBy","created_on":"2019-01-01T12:00:00.000Z","updated_by":"UpdatedBy","updated_on":"2019-01-01T12:00:00.000Z","attachment_count":15}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ScopesPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listScopesOptionsModel := &securityandcompliancecenterapiv3.ListScopesOptions{
					InstanceID:  core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					Limit:       core.Int64Ptr(int64(10)),
					Name:        core.StringPtr("testString"),
					Description: core.StringPtr("testString"),
					Environment: core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewScopesPager(listScopesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.Scope
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ScopesPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listScopesOptionsModel := &securityandcompliancecenterapiv3.ListScopesOptions{
					InstanceID:  core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					Limit:       core.Int64Ptr(int64(10)),
					Name:        core.StringPtr("testString"),
					Description: core.StringPtr("testString"),
					Environment: core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewScopesPager(listScopesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`UpdateScope(updateScopeOptions *UpdateScopeOptions) - Operation response error`, func() {
		updateScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateScopePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateScope with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateScopeOptions model
				updateScopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateScopeOptions)
				updateScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateScopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateScopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateScopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateScope(updateScopeOptions *UpdateScopeOptions)`, func() {
		updateScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateScopePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}`)
				}))
			})
			It(`Invoke UpdateScope successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the UpdateScopeOptions model
				updateScopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateScopeOptions)
				updateScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateScopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateScopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateScopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.UpdateScopeWithContext(ctx, updateScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.UpdateScopeWithContext(ctx, updateScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateScopePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}`)
				}))
			})
			It(`Invoke UpdateScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.UpdateScope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateScopeOptions model
				updateScopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateScopeOptions)
				updateScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateScopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateScopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateScopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateScope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateScopeOptions model
				updateScopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateScopeOptions)
				updateScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateScopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateScopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateScopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateScopeOptions model with no property values
				updateScopeOptionsModelNew := new(securityandcompliancecenterapiv3.UpdateScopeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateScopeOptions model
				updateScopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateScopeOptions)
				updateScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateScopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateScopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateScopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.UpdateScope(updateScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetScope(getScopeOptions *GetScopeOptions) - Operation response error`, func() {
		getScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScopePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetScope with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScopeOptions model
				getScopeOptionsModel := new(securityandcompliancecenterapiv3.GetScopeOptions)
				getScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScopeOptionsModel.ScopeID = core.StringPtr("testString")
				getScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetScope(getScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetScope(getScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetScope(getScopeOptions *GetScopeOptions)`, func() {
		getScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScopePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}`)
				}))
			})
			It(`Invoke GetScope successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetScopeOptions model
				getScopeOptionsModel := new(securityandcompliancecenterapiv3.GetScopeOptions)
				getScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScopeOptionsModel.ScopeID = core.StringPtr("testString")
				getScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetScopeWithContext(ctx, getScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetScope(getScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetScopeWithContext(ctx, getScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScopePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}`)
				}))
			})
			It(`Invoke GetScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetScope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetScopeOptions model
				getScopeOptionsModel := new(securityandcompliancecenterapiv3.GetScopeOptions)
				getScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScopeOptionsModel.ScopeID = core.StringPtr("testString")
				getScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetScope(getScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetScope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScopeOptions model
				getScopeOptionsModel := new(securityandcompliancecenterapiv3.GetScopeOptions)
				getScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScopeOptionsModel.ScopeID = core.StringPtr("testString")
				getScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetScope(getScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetScopeOptions model with no property values
				getScopeOptionsModelNew := new(securityandcompliancecenterapiv3.GetScopeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetScope(getScopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScopeOptions model
				getScopeOptionsModel := new(securityandcompliancecenterapiv3.GetScopeOptions)
				getScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScopeOptionsModel.ScopeID = core.StringPtr("testString")
				getScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetScope(getScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteScope(deleteScopeOptions *DeleteScopeOptions)`, func() {
		deleteScopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteScopePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteScope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := securityAndComplianceCenterService.DeleteScope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteScopeOptions model
				deleteScopeOptionsModel := new(securityandcompliancecenterapiv3.DeleteScopeOptions)
				deleteScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteScopeOptionsModel.ScopeID = core.StringPtr("testString")
				deleteScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = securityAndComplianceCenterService.DeleteScope(deleteScopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteScope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteScopeOptions model
				deleteScopeOptionsModel := new(securityandcompliancecenterapiv3.DeleteScopeOptions)
				deleteScopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteScopeOptionsModel.ScopeID = core.StringPtr("testString")
				deleteScopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := securityAndComplianceCenterService.DeleteScope(deleteScopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteScopeOptions model with no property values
				deleteScopeOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteScopeOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = securityAndComplianceCenterService.DeleteScope(deleteScopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubscope(createSubscopeOptions *CreateSubscopeOptions) - Operation response error`, func() {
		createSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubscopePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSubscope with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("1234567")

				// Construct an instance of the ScopePrototype model
				scopePrototypeModel := new(securityandcompliancecenterapiv3.ScopePrototype)
				scopePrototypeModel.Name = core.StringPtr("ibm subscope")
				scopePrototypeModel.Description = core.StringPtr("The subscope that is defined for IBM resources.")
				scopePrototypeModel.Environment = core.StringPtr("ibm-cloud")
				scopePrototypeModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the CreateSubscopeOptions model
				createSubscopeOptionsModel := new(securityandcompliancecenterapiv3.CreateSubscopeOptions)
				createSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				createSubscopeOptionsModel.Subscopes = []securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel}
				createSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubscope(createSubscopeOptions *CreateSubscopeOptions)`, func() {
		createSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubscopePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"subscopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}]}`)
				}))
			})
			It(`Invoke CreateSubscope successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("1234567")

				// Construct an instance of the ScopePrototype model
				scopePrototypeModel := new(securityandcompliancecenterapiv3.ScopePrototype)
				scopePrototypeModel.Name = core.StringPtr("ibm subscope")
				scopePrototypeModel.Description = core.StringPtr("The subscope that is defined for IBM resources.")
				scopePrototypeModel.Environment = core.StringPtr("ibm-cloud")
				scopePrototypeModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the CreateSubscopeOptions model
				createSubscopeOptionsModel := new(securityandcompliancecenterapiv3.CreateSubscopeOptions)
				createSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				createSubscopeOptionsModel.Subscopes = []securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel}
				createSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateSubscopeWithContext(ctx, createSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateSubscopeWithContext(ctx, createSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubscopePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"subscopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}]}`)
				}))
			})
			It(`Invoke CreateSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateSubscope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("1234567")

				// Construct an instance of the ScopePrototype model
				scopePrototypeModel := new(securityandcompliancecenterapiv3.ScopePrototype)
				scopePrototypeModel.Name = core.StringPtr("ibm subscope")
				scopePrototypeModel.Description = core.StringPtr("The subscope that is defined for IBM resources.")
				scopePrototypeModel.Environment = core.StringPtr("ibm-cloud")
				scopePrototypeModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the CreateSubscopeOptions model
				createSubscopeOptionsModel := new(securityandcompliancecenterapiv3.CreateSubscopeOptions)
				createSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				createSubscopeOptionsModel.Subscopes = []securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel}
				createSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateSubscope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("1234567")

				// Construct an instance of the ScopePrototype model
				scopePrototypeModel := new(securityandcompliancecenterapiv3.ScopePrototype)
				scopePrototypeModel.Name = core.StringPtr("ibm subscope")
				scopePrototypeModel.Description = core.StringPtr("The subscope that is defined for IBM resources.")
				scopePrototypeModel.Environment = core.StringPtr("ibm-cloud")
				scopePrototypeModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the CreateSubscopeOptions model
				createSubscopeOptionsModel := new(securityandcompliancecenterapiv3.CreateSubscopeOptions)
				createSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				createSubscopeOptionsModel.Subscopes = []securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel}
				createSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSubscopeOptions model with no property values
				createSubscopeOptionsModelNew := new(securityandcompliancecenterapiv3.CreateSubscopeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("1234567")

				// Construct an instance of the ScopePrototype model
				scopePrototypeModel := new(securityandcompliancecenterapiv3.ScopePrototype)
				scopePrototypeModel.Name = core.StringPtr("ibm subscope")
				scopePrototypeModel.Description = core.StringPtr("The subscope that is defined for IBM resources.")
				scopePrototypeModel.Environment = core.StringPtr("ibm-cloud")
				scopePrototypeModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}

				// Construct an instance of the CreateSubscopeOptions model
				createSubscopeOptionsModel := new(securityandcompliancecenterapiv3.CreateSubscopeOptions)
				createSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				createSubscopeOptionsModel.Subscopes = []securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel}
				createSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateSubscope(createSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubscopes(listSubscopesOptions *ListSubscopesOptions) - Operation response error`, func() {
		listSubscopesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubscopesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSubscopes with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListSubscopesOptions model
				listSubscopesOptionsModel := new(securityandcompliancecenterapiv3.ListSubscopesOptions)
				listSubscopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listSubscopesOptionsModel.ScopeID = core.StringPtr("testString")
				listSubscopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listSubscopesOptionsModel.Start = core.StringPtr("testString")
				listSubscopesOptionsModel.Name = core.StringPtr("testString")
				listSubscopesOptionsModel.Description = core.StringPtr("testString")
				listSubscopesOptionsModel.Environment = core.StringPtr("testString")
				listSubscopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubscopes(listSubscopesOptions *ListSubscopesOptions)`, func() {
		listSubscopesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubscopesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "subscopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}]}`)
				}))
			})
			It(`Invoke ListSubscopes successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListSubscopesOptions model
				listSubscopesOptionsModel := new(securityandcompliancecenterapiv3.ListSubscopesOptions)
				listSubscopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listSubscopesOptionsModel.ScopeID = core.StringPtr("testString")
				listSubscopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listSubscopesOptionsModel.Start = core.StringPtr("testString")
				listSubscopesOptionsModel.Name = core.StringPtr("testString")
				listSubscopesOptionsModel.Description = core.StringPtr("testString")
				listSubscopesOptionsModel.Environment = core.StringPtr("testString")
				listSubscopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListSubscopesWithContext(ctx, listSubscopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListSubscopesWithContext(ctx, listSubscopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubscopesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["environment"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "subscopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}]}`)
				}))
			})
			It(`Invoke ListSubscopes successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListSubscopes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSubscopesOptions model
				listSubscopesOptionsModel := new(securityandcompliancecenterapiv3.ListSubscopesOptions)
				listSubscopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listSubscopesOptionsModel.ScopeID = core.StringPtr("testString")
				listSubscopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listSubscopesOptionsModel.Start = core.StringPtr("testString")
				listSubscopesOptionsModel.Name = core.StringPtr("testString")
				listSubscopesOptionsModel.Description = core.StringPtr("testString")
				listSubscopesOptionsModel.Environment = core.StringPtr("testString")
				listSubscopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListSubscopes with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListSubscopesOptions model
				listSubscopesOptionsModel := new(securityandcompliancecenterapiv3.ListSubscopesOptions)
				listSubscopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listSubscopesOptionsModel.ScopeID = core.StringPtr("testString")
				listSubscopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listSubscopesOptionsModel.Start = core.StringPtr("testString")
				listSubscopesOptionsModel.Name = core.StringPtr("testString")
				listSubscopesOptionsModel.Description = core.StringPtr("testString")
				listSubscopesOptionsModel.Environment = core.StringPtr("testString")
				listSubscopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSubscopesOptions model with no property values
				listSubscopesOptionsModelNew := new(securityandcompliancecenterapiv3.ListSubscopesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSubscopes successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListSubscopesOptions model
				listSubscopesOptionsModel := new(securityandcompliancecenterapiv3.ListSubscopesOptions)
				listSubscopesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listSubscopesOptionsModel.ScopeID = core.StringPtr("testString")
				listSubscopesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listSubscopesOptionsModel.Start = core.StringPtr("testString")
				listSubscopesOptionsModel.Name = core.StringPtr("testString")
				listSubscopesOptionsModel.Description = core.StringPtr("testString")
				listSubscopesOptionsModel.Environment = core.StringPtr("testString")
				listSubscopesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListSubscopes(listSubscopesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.SubScopeCollection)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.SubScopeCollection)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubscopesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"subscopes":[{"id":"ID","name":"Name","description":"Description","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}]}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"subscopes":[{"id":"ID","name":"Name","description":"Description","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}]}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use SubscopesPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listSubscopesOptionsModel := &securityandcompliancecenterapiv3.ListSubscopesOptions{
					InstanceID:  core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					ScopeID:     core.StringPtr("testString"),
					Limit:       core.Int64Ptr(int64(10)),
					Name:        core.StringPtr("testString"),
					Description: core.StringPtr("testString"),
					Environment: core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewSubscopesPager(listSubscopesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.SubScope
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use SubscopesPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listSubscopesOptionsModel := &securityandcompliancecenterapiv3.ListSubscopesOptions{
					InstanceID:  core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					ScopeID:     core.StringPtr("testString"),
					Limit:       core.Int64Ptr(int64(10)),
					Name:        core.StringPtr("testString"),
					Description: core.StringPtr("testString"),
					Environment: core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewSubscopesPager(listSubscopesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`GetSubscope(getSubscopeOptions *GetSubscopeOptions) - Operation response error`, func() {
		getSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubscopePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubscope with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetSubscopeOptions model
				getSubscopeOptionsModel := new(securityandcompliancecenterapiv3.GetSubscopeOptions)
				getSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubscope(getSubscopeOptions *GetSubscopeOptions)`, func() {
		getSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubscopePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetSubscope successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetSubscopeOptions model
				getSubscopeOptionsModel := new(securityandcompliancecenterapiv3.GetSubscopeOptions)
				getSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetSubscopeWithContext(ctx, getSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetSubscopeWithContext(ctx, getSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubscopePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}`)
				}))
			})
			It(`Invoke GetSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetSubscope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubscopeOptions model
				getSubscopeOptionsModel := new(securityandcompliancecenterapiv3.GetSubscopeOptions)
				getSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetSubscope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetSubscopeOptions model
				getSubscopeOptionsModel := new(securityandcompliancecenterapiv3.GetSubscopeOptions)
				getSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubscopeOptions model with no property values
				getSubscopeOptionsModelNew := new(securityandcompliancecenterapiv3.GetSubscopeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetSubscopeOptions model
				getSubscopeOptionsModel := new(securityandcompliancecenterapiv3.GetSubscopeOptions)
				getSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				getSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetSubscope(getSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubscope(updateSubscopeOptions *UpdateSubscopeOptions) - Operation response error`, func() {
		updateSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubscopePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSubscope with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateSubscopeOptions model
				updateSubscopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateSubscopeOptions)
				updateSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateSubscopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubscope(updateSubscopeOptions *UpdateSubscopeOptions)`, func() {
		updateSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubscopePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}`)
				}))
			})
			It(`Invoke UpdateSubscope successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the UpdateSubscopeOptions model
				updateSubscopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateSubscopeOptions)
				updateSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateSubscopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.UpdateSubscopeWithContext(ctx, updateSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.UpdateSubscopeWithContext(ctx, updateSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubscopePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}]}`)
				}))
			})
			It(`Invoke UpdateSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.UpdateSubscope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateSubscopeOptions model
				updateSubscopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateSubscopeOptions)
				updateSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateSubscopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateSubscope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateSubscopeOptions model
				updateSubscopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateSubscopeOptions)
				updateSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateSubscopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSubscopeOptions model with no property values
				updateSubscopeOptionsModelNew := new(securityandcompliancecenterapiv3.UpdateSubscopeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateSubscopeOptions model
				updateSubscopeOptionsModel := new(securityandcompliancecenterapiv3.UpdateSubscopeOptions)
				updateSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				updateSubscopeOptionsModel.Name = core.StringPtr("updated name of scope")
				updateSubscopeOptionsModel.Description = core.StringPtr("updated scope description")
				updateSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.UpdateSubscope(updateSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteSubscope(deleteSubscopeOptions *DeleteSubscopeOptions)`, func() {
		deleteSubscopePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scopes/testString/subscopes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSubscopePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSubscope successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := securityAndComplianceCenterService.DeleteSubscope(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSubscopeOptions model
				deleteSubscopeOptionsModel := new(securityandcompliancecenterapiv3.DeleteSubscopeOptions)
				deleteSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				deleteSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				deleteSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = securityAndComplianceCenterService.DeleteSubscope(deleteSubscopeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSubscope with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteSubscopeOptions model
				deleteSubscopeOptionsModel := new(securityandcompliancecenterapiv3.DeleteSubscopeOptions)
				deleteSubscopeOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteSubscopeOptionsModel.ScopeID = core.StringPtr("testString")
				deleteSubscopeOptionsModel.SubscopeID = core.StringPtr("testString")
				deleteSubscopeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := securityAndComplianceCenterService.DeleteSubscope(deleteSubscopeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSubscopeOptions model with no property values
				deleteSubscopeOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteSubscopeOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = securityAndComplianceCenterService.DeleteSubscope(deleteSubscopeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTarget(createTargetOptions *CreateTargetOptions) - Operation response error`, func() {
		createTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTargetPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateTarget with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the CreateTargetOptions model
				createTargetOptionsModel := new(securityandcompliancecenterapiv3.CreateTargetOptions)
				createTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				createTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				createTargetOptionsModel.Name = core.StringPtr("Target accountA")
				createTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				createTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateTarget(createTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateTarget(createTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateTarget(createTargetOptions *CreateTargetOptions)`, func() {
		createTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTargetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}`)
				}))
			})
			It(`Invoke CreateTarget successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the CreateTargetOptions model
				createTargetOptionsModel := new(securityandcompliancecenterapiv3.CreateTargetOptions)
				createTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				createTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				createTargetOptionsModel.Name = core.StringPtr("Target accountA")
				createTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				createTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateTargetWithContext(ctx, createTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateTarget(createTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateTargetWithContext(ctx, createTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createTargetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}`)
				}))
			})
			It(`Invoke CreateTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateTarget(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the CreateTargetOptions model
				createTargetOptionsModel := new(securityandcompliancecenterapiv3.CreateTargetOptions)
				createTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				createTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				createTargetOptionsModel.Name = core.StringPtr("Target accountA")
				createTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				createTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateTarget(createTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateTarget with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the CreateTargetOptions model
				createTargetOptionsModel := new(securityandcompliancecenterapiv3.CreateTargetOptions)
				createTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				createTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				createTargetOptionsModel.Name = core.StringPtr("Target accountA")
				createTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				createTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateTarget(createTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateTargetOptions model with no property values
				createTargetOptionsModelNew := new(securityandcompliancecenterapiv3.CreateTargetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateTarget(createTargetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the CreateTargetOptions model
				createTargetOptionsModel := new(securityandcompliancecenterapiv3.CreateTargetOptions)
				createTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				createTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				createTargetOptionsModel.Name = core.StringPtr("Target accountA")
				createTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				createTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateTarget(createTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTargets(listTargetsOptions *ListTargetsOptions) - Operation response error`, func() {
		listTargetsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTargetsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListTargets with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListTargetsOptions model
				listTargetsOptionsModel := new(securityandcompliancecenterapiv3.ListTargetsOptions)
				listTargetsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListTargets(listTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListTargets(listTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListTargets(listTargetsOptions *ListTargetsOptions)`, func() {
		listTargetsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTargetsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "targets": [{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}]}`)
				}))
			})
			It(`Invoke ListTargets successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListTargetsOptions model
				listTargetsOptionsModel := new(securityandcompliancecenterapiv3.ListTargetsOptions)
				listTargetsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListTargetsWithContext(ctx, listTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListTargets(listTargetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListTargetsWithContext(ctx, listTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listTargetsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "targets": [{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}]}`)
				}))
			})
			It(`Invoke ListTargets successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListTargets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListTargetsOptions model
				listTargetsOptionsModel := new(securityandcompliancecenterapiv3.ListTargetsOptions)
				listTargetsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListTargets(listTargetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListTargets with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListTargetsOptions model
				listTargetsOptionsModel := new(securityandcompliancecenterapiv3.ListTargetsOptions)
				listTargetsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListTargets(listTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListTargetsOptions model with no property values
				listTargetsOptionsModelNew := new(securityandcompliancecenterapiv3.ListTargetsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListTargets(listTargetsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListTargets successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListTargetsOptions model
				listTargetsOptionsModel := new(securityandcompliancecenterapiv3.ListTargetsOptions)
				listTargetsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListTargets(listTargetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTarget(getTargetOptions *GetTargetOptions) - Operation response error`, func() {
		getTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTargetPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetTarget with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetTargetOptions model
				getTargetOptionsModel := new(securityandcompliancecenterapiv3.GetTargetOptions)
				getTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getTargetOptionsModel.TargetID = core.StringPtr("testString")
				getTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetTarget(getTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetTarget(getTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetTarget(getTargetOptions *GetTargetOptions)`, func() {
		getTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTargetPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}`)
				}))
			})
			It(`Invoke GetTarget successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetTargetOptions model
				getTargetOptionsModel := new(securityandcompliancecenterapiv3.GetTargetOptions)
				getTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getTargetOptionsModel.TargetID = core.StringPtr("testString")
				getTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetTargetWithContext(ctx, getTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetTarget(getTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetTargetWithContext(ctx, getTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getTargetPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}`)
				}))
			})
			It(`Invoke GetTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetTarget(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetTargetOptions model
				getTargetOptionsModel := new(securityandcompliancecenterapiv3.GetTargetOptions)
				getTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getTargetOptionsModel.TargetID = core.StringPtr("testString")
				getTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetTarget(getTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetTarget with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetTargetOptions model
				getTargetOptionsModel := new(securityandcompliancecenterapiv3.GetTargetOptions)
				getTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getTargetOptionsModel.TargetID = core.StringPtr("testString")
				getTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetTarget(getTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetTargetOptions model with no property values
				getTargetOptionsModelNew := new(securityandcompliancecenterapiv3.GetTargetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetTarget(getTargetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetTargetOptions model
				getTargetOptionsModel := new(securityandcompliancecenterapiv3.GetTargetOptions)
				getTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getTargetOptionsModel.TargetID = core.StringPtr("testString")
				getTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetTarget(getTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceTarget(replaceTargetOptions *ReplaceTargetOptions) - Operation response error`, func() {
		replaceTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTargetPath))
					Expect(req.Method).To(Equal("PUT"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceTarget with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the ReplaceTargetOptions model
				replaceTargetOptionsModel := new(securityandcompliancecenterapiv3.ReplaceTargetOptions)
				replaceTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceTargetOptionsModel.TargetID = core.StringPtr("testString")
				replaceTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				replaceTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				replaceTargetOptionsModel.Name = core.StringPtr("Target accountA")
				replaceTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				replaceTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceTarget(replaceTargetOptions *ReplaceTargetOptions)`, func() {
		replaceTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTargetPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}`)
				}))
			})
			It(`Invoke ReplaceTarget successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the ReplaceTargetOptions model
				replaceTargetOptionsModel := new(securityandcompliancecenterapiv3.ReplaceTargetOptions)
				replaceTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceTargetOptionsModel.TargetID = core.StringPtr("testString")
				replaceTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				replaceTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				replaceTargetOptionsModel.Name = core.StringPtr("Target accountA")
				replaceTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				replaceTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ReplaceTargetWithContext(ctx, replaceTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ReplaceTargetWithContext(ctx, replaceTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceTargetPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "a2366444-ad87-40b1-81d0-476df1cc1f18", "account_id": "be200c80cabc456e91139e4152327823", "trusted_profile_id": "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3", "name": "Target Account-A", "credentials": [{"type": "iam_credentials", "secret_crn": "SecretCRN", "secret_name": "my secret", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}], "created_by": "IBMid-270007EPPC", "created_on": "2024-02-07T05:42:58Z", "updated_by": "IBMid-270007EPPC", "updated_on": "2024-02-07T05:42:58Z"}`)
				}))
			})
			It(`Invoke ReplaceTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ReplaceTarget(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the ReplaceTargetOptions model
				replaceTargetOptionsModel := new(securityandcompliancecenterapiv3.ReplaceTargetOptions)
				replaceTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceTargetOptionsModel.TargetID = core.StringPtr("testString")
				replaceTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				replaceTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				replaceTargetOptionsModel.Name = core.StringPtr("Target accountA")
				replaceTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				replaceTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceTarget with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the ReplaceTargetOptions model
				replaceTargetOptionsModel := new(securityandcompliancecenterapiv3.ReplaceTargetOptions)
				replaceTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceTargetOptionsModel.TargetID = core.StringPtr("testString")
				replaceTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				replaceTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				replaceTargetOptionsModel.Name = core.StringPtr("Target accountA")
				replaceTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				replaceTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceTargetOptions model with no property values
				replaceTargetOptionsModelNew := new(securityandcompliancecenterapiv3.ReplaceTargetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}

				// Construct an instance of the ReplaceTargetOptions model
				replaceTargetOptionsModel := new(securityandcompliancecenterapiv3.ReplaceTargetOptions)
				replaceTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceTargetOptionsModel.TargetID = core.StringPtr("testString")
				replaceTargetOptionsModel.AccountID = core.StringPtr("be200c80cabc456e91139e4152327823")
				replaceTargetOptionsModel.TrustedProfileID = core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				replaceTargetOptionsModel.Name = core.StringPtr("Target accountA")
				replaceTargetOptionsModel.Credentials = []securityandcompliancecenterapiv3.Credential{*credentialModel}
				replaceTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ReplaceTarget(replaceTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteTarget(deleteTargetOptions *DeleteTargetOptions)`, func() {
		deleteTargetPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/targets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteTargetPath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteTarget successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := securityAndComplianceCenterService.DeleteTarget(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteTargetOptions model
				deleteTargetOptionsModel := new(securityandcompliancecenterapiv3.DeleteTargetOptions)
				deleteTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteTargetOptionsModel.TargetID = core.StringPtr("testString")
				deleteTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = securityAndComplianceCenterService.DeleteTarget(deleteTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteTarget with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteTargetOptions model
				deleteTargetOptionsModel := new(securityandcompliancecenterapiv3.DeleteTargetOptions)
				deleteTargetOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteTargetOptionsModel.TargetID = core.StringPtr("testString")
				deleteTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := securityAndComplianceCenterService.DeleteTarget(deleteTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteTargetOptions model with no property values
				deleteTargetOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteTargetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = securityAndComplianceCenterService.DeleteTarget(deleteTargetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProviderTypeInstance(createProviderTypeInstanceOptions *CreateProviderTypeInstanceOptions) - Operation response error`, func() {
		createProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProviderTypeInstancePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateProviderTypeInstance with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateProviderTypeInstanceOptions model
				createProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.CreateProviderTypeInstanceOptions)
				createProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				createProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				createProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				createProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateProviderTypeInstance(createProviderTypeInstanceOptions *CreateProviderTypeInstanceOptions)`, func() {
		createProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProviderTypeInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke CreateProviderTypeInstance successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the CreateProviderTypeInstanceOptions model
				createProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.CreateProviderTypeInstanceOptions)
				createProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				createProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				createProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				createProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateProviderTypeInstanceWithContext(ctx, createProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateProviderTypeInstanceWithContext(ctx, createProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createProviderTypeInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke CreateProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateProviderTypeInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateProviderTypeInstanceOptions model
				createProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.CreateProviderTypeInstanceOptions)
				createProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				createProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				createProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				createProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateProviderTypeInstance with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateProviderTypeInstanceOptions model
				createProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.CreateProviderTypeInstanceOptions)
				createProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				createProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				createProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				createProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateProviderTypeInstanceOptions model with no property values
				createProviderTypeInstanceOptionsModelNew := new(securityandcompliancecenterapiv3.CreateProviderTypeInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateProviderTypeInstanceOptions model
				createProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.CreateProviderTypeInstanceOptions)
				createProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				createProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				createProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				createProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateProviderTypeInstance(createProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProviderTypeInstances(listProviderTypeInstancesOptions *ListProviderTypeInstancesOptions) - Operation response error`, func() {
		listProviderTypeInstancesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProviderTypeInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProviderTypeInstances with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProviderTypeInstancesOptions model
				listProviderTypeInstancesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypeInstancesOptions)
				listProviderTypeInstancesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypeInstancesOptionsModel.ProviderTypeID = core.StringPtr("testString")
				listProviderTypeInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProviderTypeInstances(listProviderTypeInstancesOptions *ListProviderTypeInstancesOptions)`, func() {
		listProviderTypeInstancesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProviderTypeInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider_type_instances": [{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}]}`)
				}))
			})
			It(`Invoke ListProviderTypeInstances successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListProviderTypeInstancesOptions model
				listProviderTypeInstancesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypeInstancesOptions)
				listProviderTypeInstancesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypeInstancesOptionsModel.ProviderTypeID = core.StringPtr("testString")
				listProviderTypeInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListProviderTypeInstancesWithContext(ctx, listProviderTypeInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListProviderTypeInstancesWithContext(ctx, listProviderTypeInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProviderTypeInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider_type_instances": [{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}]}`)
				}))
			})
			It(`Invoke ListProviderTypeInstances successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypeInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProviderTypeInstancesOptions model
				listProviderTypeInstancesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypeInstancesOptions)
				listProviderTypeInstancesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypeInstancesOptionsModel.ProviderTypeID = core.StringPtr("testString")
				listProviderTypeInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListProviderTypeInstances with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProviderTypeInstancesOptions model
				listProviderTypeInstancesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypeInstancesOptions)
				listProviderTypeInstancesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypeInstancesOptionsModel.ProviderTypeID = core.StringPtr("testString")
				listProviderTypeInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListProviderTypeInstancesOptions model with no property values
				listProviderTypeInstancesOptionsModelNew := new(securityandcompliancecenterapiv3.ListProviderTypeInstancesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProviderTypeInstances successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProviderTypeInstancesOptions model
				listProviderTypeInstancesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypeInstancesOptions)
				listProviderTypeInstancesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypeInstancesOptionsModel.ProviderTypeID = core.StringPtr("testString")
				listProviderTypeInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypeInstances(listProviderTypeInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProviderTypeInstance(getProviderTypeInstanceOptions *GetProviderTypeInstanceOptions) - Operation response error`, func() {
		getProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProviderTypeInstancePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProviderTypeInstance with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProviderTypeInstanceOptions model
				getProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeInstanceOptions)
				getProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProviderTypeInstance(getProviderTypeInstanceOptions *GetProviderTypeInstanceOptions)`, func() {
		getProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProviderTypeInstancePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke GetProviderTypeInstance successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetProviderTypeInstanceOptions model
				getProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeInstanceOptions)
				getProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetProviderTypeInstanceWithContext(ctx, getProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetProviderTypeInstanceWithContext(ctx, getProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProviderTypeInstancePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke GetProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProviderTypeInstanceOptions model
				getProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeInstanceOptions)
				getProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetProviderTypeInstance with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProviderTypeInstanceOptions model
				getProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeInstanceOptions)
				getProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProviderTypeInstanceOptions model with no property values
				getProviderTypeInstanceOptionsModelNew := new(securityandcompliancecenterapiv3.GetProviderTypeInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProviderTypeInstanceOptions model
				getProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeInstanceOptions)
				getProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				getProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeInstance(getProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProviderTypeInstance(updateProviderTypeInstanceOptions *UpdateProviderTypeInstanceOptions) - Operation response error`, func() {
		updateProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProviderTypeInstancePath))
					Expect(req.Method).To(Equal("PATCH"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateProviderTypeInstance with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateProviderTypeInstanceOptions model
				updateProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.UpdateProviderTypeInstanceOptions)
				updateProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				updateProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				updateProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateProviderTypeInstance(updateProviderTypeInstanceOptions *UpdateProviderTypeInstanceOptions)`, func() {
		updateProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProviderTypeInstancePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke UpdateProviderTypeInstance successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the UpdateProviderTypeInstanceOptions model
				updateProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.UpdateProviderTypeInstanceOptions)
				updateProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				updateProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				updateProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.UpdateProviderTypeInstanceWithContext(ctx, updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.UpdateProviderTypeInstanceWithContext(ctx, updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateProviderTypeInstancePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection-instance-1", "attributes": {"mapKey": "Inner"}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke UpdateProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.UpdateProviderTypeInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateProviderTypeInstanceOptions model
				updateProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.UpdateProviderTypeInstanceOptions)
				updateProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				updateProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				updateProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke UpdateProviderTypeInstance with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateProviderTypeInstanceOptions model
				updateProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.UpdateProviderTypeInstanceOptions)
				updateProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				updateProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				updateProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateProviderTypeInstanceOptions model with no property values
				updateProviderTypeInstanceOptionsModelNew := new(securityandcompliancecenterapiv3.UpdateProviderTypeInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the UpdateProviderTypeInstanceOptions model
				updateProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.UpdateProviderTypeInstanceOptions)
				updateProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				updateProviderTypeInstanceOptionsModel.Name = core.StringPtr("workload-protection-instance-1")
				updateProviderTypeInstanceOptionsModel.Attributes = map[string]interface{}{"key1": "testString"}
				updateProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.UpdateProviderTypeInstance(updateProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteProviderTypeInstance(deleteProviderTypeInstanceOptions *DeleteProviderTypeInstanceOptions)`, func() {
		deleteProviderTypeInstancePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString/provider_type_instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteProviderTypeInstancePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteProviderTypeInstance successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := securityAndComplianceCenterService.DeleteProviderTypeInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteProviderTypeInstanceOptions model
				deleteProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.DeleteProviderTypeInstanceOptions)
				deleteProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				deleteProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				deleteProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = securityAndComplianceCenterService.DeleteProviderTypeInstance(deleteProviderTypeInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteProviderTypeInstance with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteProviderTypeInstanceOptions model
				deleteProviderTypeInstanceOptionsModel := new(securityandcompliancecenterapiv3.DeleteProviderTypeInstanceOptions)
				deleteProviderTypeInstanceOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProviderTypeInstanceOptionsModel.ProviderTypeID = core.StringPtr("testString")
				deleteProviderTypeInstanceOptionsModel.ProviderTypeInstanceID = core.StringPtr("testString")
				deleteProviderTypeInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := securityAndComplianceCenterService.DeleteProviderTypeInstance(deleteProviderTypeInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteProviderTypeInstanceOptions model with no property values
				deleteProviderTypeInstanceOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteProviderTypeInstanceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = securityAndComplianceCenterService.DeleteProviderTypeInstance(deleteProviderTypeInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProviderTypes(listProviderTypesOptions *ListProviderTypesOptions) - Operation response error`, func() {
		listProviderTypesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProviderTypesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListProviderTypes with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProviderTypesOptions model
				listProviderTypesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypesOptions)
				listProviderTypesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListProviderTypes(listProviderTypesOptions *ListProviderTypesOptions)`, func() {
		listProviderTypesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProviderTypesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider_types": [{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection", "description": "Security and Compliance Center Workload Protection helps you accelerate your Kubernetes and cloud adoption by addressing security and regulatory compliance. Easily identify vulnerabilities, check compliance, block threats and respond faster at every stage of the container and Kubernetes lifecycle.", "s2s_enabled": true, "instance_limit": 1, "mode": "PULL", "data_type": "com.sysdig.secure.results", "icon": "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiBkYXRhLW5hbWU9IkJ1aWxkIGljb24gaGVyZSIgdmlld0JveD0iMCAwIDMyIDMyIj48ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9ImEiIHgxPSItMjgxMS4xOTgiIHgyPSItMjgxNC4xOTgiIHkxPSI1NTcuNTE3IiB5Mj0iNTU3LjUxNyIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgyODMxLjE5OCAtNTQyLjAxNykiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLW9wYWNpdHk9IjAiLz48c3RvcCBvZmZzZXQ9Ii44Ii8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeGxpbms6aHJlZj0iI2EiIGlkPSJiIiB4MT0iLTgwNi4xOTgiIHgyPSItNzk5LjE5OCIgeTE9Ii0yNDE0LjQ4MSIgeTI9Ii0yNDE0LjQ4MSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSg4MjUuMTk4IDI0MjguOTgxKSIvPjxsaW5lYXJHcmFkaWVudCB4bGluazpocmVmPSIjYSIgaWQ9ImMiIHgxPSItODEwLjE5OCIgeDI9Ii03OTguMTk4IiB5MT0iLTI0MTkuOTgxIiB5Mj0iLTI0MTkuOTgxIiBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDgzMi4xOTggMjQzMi45ODEpIi8+PGxpbmVhckdyYWRpZW50IGlkPSJlIiB4MT0iLTI1MTQiIHgyPSItMjQ4MiIgeTE9Ii0yNDgyIiB5Mj0iLTI1MTQiIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMSAwIDAgLTEgMjUxNCAtMjQ4MikiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLWNvbG9yPSIjMDhiZGJhIi8+PHN0b3Agb2Zmc2V0PSIuOSIgc3RvcC1jb2xvcj0iIzBmNjJmZSIvPjwvbGluZWFyR3JhZGllbnQ+PG1hc2sgaWQ9ImQiIHdpZHRoPSIyOS4wMTciIGhlaWdodD0iMjcuOTk2IiB4PSIxLjk4MyIgeT0iMiIgZGF0YS1uYW1lPSJtYXNrIiBtYXNrVW5pdHM9InVzZXJTcGFjZU9uVXNlIj48ZyBmaWxsPSIjZmZmIj48cGF0aCBkPSJNMjkuOTc2IDE2YzAtMy43MzktMS40NTYtNy4yNTUtNC4xMDEtOS44OTlTMTkuNzE1IDIgMTUuOTc2IDIgOC43MjEgMy40NTYgNi4wNzcgNi4xMDFjLTUuNDU5IDUuNDU5LTUuNDU5IDE0LjM0IDAgMTkuNzk4QTE0LjA0NCAxNC4wNDQgMCAwIDAgMTYgMjkuOTk1di0yLjAwMWExMi4wNCAxMi4wNCAwIDAgMS04LjUwOS0zLjUxYy00LjY3OS00LjY3OS00LjY3OS0xMi4yOTIgMC0xNi45NzEgMi4yNjctMi4yNjcgNS4yOC0zLjUxNSA4LjQ4NS0zLjUxNXM2LjIxOSAxLjI0OCA4LjQ4NSAzLjUxNSAzLjUxNSA1LjI4IDMuNTE1IDguNDg1YzAgMS4zMDgtLjIxOCAyLjU4LS42MTggMy43ODZsMS44OTcuNjMyYy40NjctMS40MDguNzIyLTIuODkyLjcyMi00LjQxOFoiLz48cGF0aCBkPSJNMjQuNyAxMy42NzVhOC45NCA4Ljk0IDAgMCAwLTQuMTkzLTUuNDY1IDguOTQyIDguOTQyIDAgMCAwLTYuODMtLjg5OSA4Ljk3MSA4Ljk3MSAwIDAgMC01LjQ2MSA0LjE5NSA4Ljk4IDguOTggMCAwIDAtLjkwMyA2LjgyOGMxLjA3NyA0LjAxNiA0LjcyMiA2LjY2IDguNjk1IDYuNjYxdi0xLjk5OGMtMy4wOS0uMDAxLTUuOTI2LTIuMDU4LTYuNzYzLTUuMTgxYTcuMDEgNy4wMSAwIDAgMSA0Ljk1LTguNTc0IDYuOTU4IDYuOTU4IDAgMCAxIDUuMzEyLjY5OSA2Ljk1NCA2Ljk1NCAwIDAgMSAzLjI2MSA0LjI1Yy4zNTkgMS4zNDIuMjc1IDIuNzMyLS4xNTQgNC4wMTNsMS45MDkuNjM2YTguOTU5IDguOTU5IDAgMCAwIC4xNzYtNS4xNjdaIi8+PC9nPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xNCAxNmMwLTEuMTAzLjg5Ny0yIDItMnMyIC44OTcgMiAyYTIgMiAwIDAgMS0uMTExLjYzbDEuODg5LjYzYy4xMzMtLjM5OC4yMjItLjgxNy4yMjItMS4yNTlhNCA0IDAgMSAwLTQgNHYtMmMtMS4xMDMgMC0yLS44OTctMi0yWiIvPjxwYXRoIGZpbGw9InVybCgjYSkiIGQ9Ik0xNyAxNGgzdjNoLTN6IiB0cmFuc2Zvcm09InJvdGF0ZSgtOTAgMTguNSAxNS41KSIvPjxwYXRoIGZpbGw9InVybCgjYikiIGQ9Ik0xOSAxMmg3djVoLTd6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyMi41IDE0LjUpIi8+PHBhdGggZmlsbD0idXJsKCNjKSIgZD0iTTIyIDEwaDEydjZIMjJ6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyOCAxMykiLz48cGF0aCBkPSJNMjUgMTloNnY0aC02ek0yMCAxOGg1djVoLTV6TTE3IDE3aDN2NmgtM3oiLz48L21hc2s+PC9kZWZzPjxwYXRoIGZpbGw9IiMwMDFkNmMiIGQ9Im0yNSAzMS4wMDEtMi4xMzktMS4wMTNBNS4wMjIgNS4wMjIgMCAwIDEgMjAgMjUuNDY4VjE5aDEwdjYuNDY4YTUuMDIzIDUuMDIzIDAgMCAxLTIuODYxIDQuNTJMMjUgMzEuMDAxWm0tMy0xMHY0LjQ2OGMwIDEuMTUzLjY3NCAyLjIxOCAxLjcxNyAyLjcxMWwxLjI4My42MDcgMS4yODMtLjYwN0EzLjAxMiAzLjAxMiAwIDAgMCAyOCAyNS40Njl2LTQuNDY4aC02WiIgZGF0YS1uYW1lPSJ1dWlkLTU1ODMwNDRiLWZmMjQtNGUyNy05MDU0LTI0MDQzYWRkZmMwNiIvPjxnIG1hc2s9InVybCgjZCkiPjxwYXRoIGZpbGw9InVybCgjZSkiIGQ9Ik0wIDBoMzJ2MzJIMHoiIHRyYW5zZm9ybT0icm90YXRlKC05MCAxNiAxNikiLz48L2c+PC9zdmc+", "label": {"text": "1 per instance", "tip": "Only 1 per instance"}, "attributes": {"mapKey": {"type": "text", "display_name": "Workload Protection Instance CRN"}}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}]}`)
				}))
			})
			It(`Invoke ListProviderTypes successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListProviderTypesOptions model
				listProviderTypesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypesOptions)
				listProviderTypesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListProviderTypesWithContext(ctx, listProviderTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListProviderTypesWithContext(ctx, listProviderTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listProviderTypesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"provider_types": [{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection", "description": "Security and Compliance Center Workload Protection helps you accelerate your Kubernetes and cloud adoption by addressing security and regulatory compliance. Easily identify vulnerabilities, check compliance, block threats and respond faster at every stage of the container and Kubernetes lifecycle.", "s2s_enabled": true, "instance_limit": 1, "mode": "PULL", "data_type": "com.sysdig.secure.results", "icon": "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiBkYXRhLW5hbWU9IkJ1aWxkIGljb24gaGVyZSIgdmlld0JveD0iMCAwIDMyIDMyIj48ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9ImEiIHgxPSItMjgxMS4xOTgiIHgyPSItMjgxNC4xOTgiIHkxPSI1NTcuNTE3IiB5Mj0iNTU3LjUxNyIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgyODMxLjE5OCAtNTQyLjAxNykiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLW9wYWNpdHk9IjAiLz48c3RvcCBvZmZzZXQ9Ii44Ii8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeGxpbms6aHJlZj0iI2EiIGlkPSJiIiB4MT0iLTgwNi4xOTgiIHgyPSItNzk5LjE5OCIgeTE9Ii0yNDE0LjQ4MSIgeTI9Ii0yNDE0LjQ4MSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSg4MjUuMTk4IDI0MjguOTgxKSIvPjxsaW5lYXJHcmFkaWVudCB4bGluazpocmVmPSIjYSIgaWQ9ImMiIHgxPSItODEwLjE5OCIgeDI9Ii03OTguMTk4IiB5MT0iLTI0MTkuOTgxIiB5Mj0iLTI0MTkuOTgxIiBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDgzMi4xOTggMjQzMi45ODEpIi8+PGxpbmVhckdyYWRpZW50IGlkPSJlIiB4MT0iLTI1MTQiIHgyPSItMjQ4MiIgeTE9Ii0yNDgyIiB5Mj0iLTI1MTQiIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMSAwIDAgLTEgMjUxNCAtMjQ4MikiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLWNvbG9yPSIjMDhiZGJhIi8+PHN0b3Agb2Zmc2V0PSIuOSIgc3RvcC1jb2xvcj0iIzBmNjJmZSIvPjwvbGluZWFyR3JhZGllbnQ+PG1hc2sgaWQ9ImQiIHdpZHRoPSIyOS4wMTciIGhlaWdodD0iMjcuOTk2IiB4PSIxLjk4MyIgeT0iMiIgZGF0YS1uYW1lPSJtYXNrIiBtYXNrVW5pdHM9InVzZXJTcGFjZU9uVXNlIj48ZyBmaWxsPSIjZmZmIj48cGF0aCBkPSJNMjkuOTc2IDE2YzAtMy43MzktMS40NTYtNy4yNTUtNC4xMDEtOS44OTlTMTkuNzE1IDIgMTUuOTc2IDIgOC43MjEgMy40NTYgNi4wNzcgNi4xMDFjLTUuNDU5IDUuNDU5LTUuNDU5IDE0LjM0IDAgMTkuNzk4QTE0LjA0NCAxNC4wNDQgMCAwIDAgMTYgMjkuOTk1di0yLjAwMWExMi4wNCAxMi4wNCAwIDAgMS04LjUwOS0zLjUxYy00LjY3OS00LjY3OS00LjY3OS0xMi4yOTIgMC0xNi45NzEgMi4yNjctMi4yNjcgNS4yOC0zLjUxNSA4LjQ4NS0zLjUxNXM2LjIxOSAxLjI0OCA4LjQ4NSAzLjUxNSAzLjUxNSA1LjI4IDMuNTE1IDguNDg1YzAgMS4zMDgtLjIxOCAyLjU4LS42MTggMy43ODZsMS44OTcuNjMyYy40NjctMS40MDguNzIyLTIuODkyLjcyMi00LjQxOFoiLz48cGF0aCBkPSJNMjQuNyAxMy42NzVhOC45NCA4Ljk0IDAgMCAwLTQuMTkzLTUuNDY1IDguOTQyIDguOTQyIDAgMCAwLTYuODMtLjg5OSA4Ljk3MSA4Ljk3MSAwIDAgMC01LjQ2MSA0LjE5NSA4Ljk4IDguOTggMCAwIDAtLjkwMyA2LjgyOGMxLjA3NyA0LjAxNiA0LjcyMiA2LjY2IDguNjk1IDYuNjYxdi0xLjk5OGMtMy4wOS0uMDAxLTUuOTI2LTIuMDU4LTYuNzYzLTUuMTgxYTcuMDEgNy4wMSAwIDAgMSA0Ljk1LTguNTc0IDYuOTU4IDYuOTU4IDAgMCAxIDUuMzEyLjY5OSA2Ljk1NCA2Ljk1NCAwIDAgMSAzLjI2MSA0LjI1Yy4zNTkgMS4zNDIuMjc1IDIuNzMyLS4xNTQgNC4wMTNsMS45MDkuNjM2YTguOTU5IDguOTU5IDAgMCAwIC4xNzYtNS4xNjdaIi8+PC9nPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xNCAxNmMwLTEuMTAzLjg5Ny0yIDItMnMyIC44OTcgMiAyYTIgMiAwIDAgMS0uMTExLjYzbDEuODg5LjYzYy4xMzMtLjM5OC4yMjItLjgxNy4yMjItMS4yNTlhNCA0IDAgMSAwLTQgNHYtMmMtMS4xMDMgMC0yLS44OTctMi0yWiIvPjxwYXRoIGZpbGw9InVybCgjYSkiIGQ9Ik0xNyAxNGgzdjNoLTN6IiB0cmFuc2Zvcm09InJvdGF0ZSgtOTAgMTguNSAxNS41KSIvPjxwYXRoIGZpbGw9InVybCgjYikiIGQ9Ik0xOSAxMmg3djVoLTd6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyMi41IDE0LjUpIi8+PHBhdGggZmlsbD0idXJsKCNjKSIgZD0iTTIyIDEwaDEydjZIMjJ6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyOCAxMykiLz48cGF0aCBkPSJNMjUgMTloNnY0aC02ek0yMCAxOGg1djVoLTV6TTE3IDE3aDN2NmgtM3oiLz48L21hc2s+PC9kZWZzPjxwYXRoIGZpbGw9IiMwMDFkNmMiIGQ9Im0yNSAzMS4wMDEtMi4xMzktMS4wMTNBNS4wMjIgNS4wMjIgMCAwIDEgMjAgMjUuNDY4VjE5aDEwdjYuNDY4YTUuMDIzIDUuMDIzIDAgMCAxLTIuODYxIDQuNTJMMjUgMzEuMDAxWm0tMy0xMHY0LjQ2OGMwIDEuMTUzLjY3NCAyLjIxOCAxLjcxNyAyLjcxMWwxLjI4My42MDcgMS4yODMtLjYwN0EzLjAxMiAzLjAxMiAwIDAgMCAyOCAyNS40Njl2LTQuNDY4aC02WiIgZGF0YS1uYW1lPSJ1dWlkLTU1ODMwNDRiLWZmMjQtNGUyNy05MDU0LTI0MDQzYWRkZmMwNiIvPjxnIG1hc2s9InVybCgjZCkiPjxwYXRoIGZpbGw9InVybCgjZSkiIGQ9Ik0wIDBoMzJ2MzJIMHoiIHRyYW5zZm9ybT0icm90YXRlKC05MCAxNiAxNikiLz48L2c+PC9zdmc+", "label": {"text": "1 per instance", "tip": "Only 1 per instance"}, "attributes": {"mapKey": {"type": "text", "display_name": "Workload Protection Instance CRN"}}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}]}`)
				}))
			})
			It(`Invoke ListProviderTypes successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListProviderTypesOptions model
				listProviderTypesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypesOptions)
				listProviderTypesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListProviderTypes with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProviderTypesOptions model
				listProviderTypesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypesOptions)
				listProviderTypesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListProviderTypesOptions model with no property values
				listProviderTypesOptionsModelNew := new(securityandcompliancecenterapiv3.ListProviderTypesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListProviderTypes successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListProviderTypesOptions model
				listProviderTypesOptionsModel := new(securityandcompliancecenterapiv3.ListProviderTypesOptions)
				listProviderTypesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListProviderTypes(listProviderTypesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProviderTypeByID(getProviderTypeByIDOptions *GetProviderTypeByIDOptions) - Operation response error`, func() {
		getProviderTypeByIDPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProviderTypeByIDPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetProviderTypeByID with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProviderTypeByIDOptions model
				getProviderTypeByIDOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeByIDOptions)
				getProviderTypeByIDOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeByIDOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeByIDOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetProviderTypeByID(getProviderTypeByIDOptions *GetProviderTypeByIDOptions)`, func() {
		getProviderTypeByIDPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/provider_types/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProviderTypeByIDPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection", "description": "Security and Compliance Center Workload Protection helps you accelerate your Kubernetes and cloud adoption by addressing security and regulatory compliance. Easily identify vulnerabilities, check compliance, block threats and respond faster at every stage of the container and Kubernetes lifecycle.", "s2s_enabled": true, "instance_limit": 1, "mode": "PULL", "data_type": "com.sysdig.secure.results", "icon": "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiBkYXRhLW5hbWU9IkJ1aWxkIGljb24gaGVyZSIgdmlld0JveD0iMCAwIDMyIDMyIj48ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9ImEiIHgxPSItMjgxMS4xOTgiIHgyPSItMjgxNC4xOTgiIHkxPSI1NTcuNTE3IiB5Mj0iNTU3LjUxNyIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgyODMxLjE5OCAtNTQyLjAxNykiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLW9wYWNpdHk9IjAiLz48c3RvcCBvZmZzZXQ9Ii44Ii8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeGxpbms6aHJlZj0iI2EiIGlkPSJiIiB4MT0iLTgwNi4xOTgiIHgyPSItNzk5LjE5OCIgeTE9Ii0yNDE0LjQ4MSIgeTI9Ii0yNDE0LjQ4MSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSg4MjUuMTk4IDI0MjguOTgxKSIvPjxsaW5lYXJHcmFkaWVudCB4bGluazpocmVmPSIjYSIgaWQ9ImMiIHgxPSItODEwLjE5OCIgeDI9Ii03OTguMTk4IiB5MT0iLTI0MTkuOTgxIiB5Mj0iLTI0MTkuOTgxIiBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDgzMi4xOTggMjQzMi45ODEpIi8+PGxpbmVhckdyYWRpZW50IGlkPSJlIiB4MT0iLTI1MTQiIHgyPSItMjQ4MiIgeTE9Ii0yNDgyIiB5Mj0iLTI1MTQiIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMSAwIDAgLTEgMjUxNCAtMjQ4MikiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLWNvbG9yPSIjMDhiZGJhIi8+PHN0b3Agb2Zmc2V0PSIuOSIgc3RvcC1jb2xvcj0iIzBmNjJmZSIvPjwvbGluZWFyR3JhZGllbnQ+PG1hc2sgaWQ9ImQiIHdpZHRoPSIyOS4wMTciIGhlaWdodD0iMjcuOTk2IiB4PSIxLjk4MyIgeT0iMiIgZGF0YS1uYW1lPSJtYXNrIiBtYXNrVW5pdHM9InVzZXJTcGFjZU9uVXNlIj48ZyBmaWxsPSIjZmZmIj48cGF0aCBkPSJNMjkuOTc2IDE2YzAtMy43MzktMS40NTYtNy4yNTUtNC4xMDEtOS44OTlTMTkuNzE1IDIgMTUuOTc2IDIgOC43MjEgMy40NTYgNi4wNzcgNi4xMDFjLTUuNDU5IDUuNDU5LTUuNDU5IDE0LjM0IDAgMTkuNzk4QTE0LjA0NCAxNC4wNDQgMCAwIDAgMTYgMjkuOTk1di0yLjAwMWExMi4wNCAxMi4wNCAwIDAgMS04LjUwOS0zLjUxYy00LjY3OS00LjY3OS00LjY3OS0xMi4yOTIgMC0xNi45NzEgMi4yNjctMi4yNjcgNS4yOC0zLjUxNSA4LjQ4NS0zLjUxNXM2LjIxOSAxLjI0OCA4LjQ4NSAzLjUxNSAzLjUxNSA1LjI4IDMuNTE1IDguNDg1YzAgMS4zMDgtLjIxOCAyLjU4LS42MTggMy43ODZsMS44OTcuNjMyYy40NjctMS40MDguNzIyLTIuODkyLjcyMi00LjQxOFoiLz48cGF0aCBkPSJNMjQuNyAxMy42NzVhOC45NCA4Ljk0IDAgMCAwLTQuMTkzLTUuNDY1IDguOTQyIDguOTQyIDAgMCAwLTYuODMtLjg5OSA4Ljk3MSA4Ljk3MSAwIDAgMC01LjQ2MSA0LjE5NSA4Ljk4IDguOTggMCAwIDAtLjkwMyA2LjgyOGMxLjA3NyA0LjAxNiA0LjcyMiA2LjY2IDguNjk1IDYuNjYxdi0xLjk5OGMtMy4wOS0uMDAxLTUuOTI2LTIuMDU4LTYuNzYzLTUuMTgxYTcuMDEgNy4wMSAwIDAgMSA0Ljk1LTguNTc0IDYuOTU4IDYuOTU4IDAgMCAxIDUuMzEyLjY5OSA2Ljk1NCA2Ljk1NCAwIDAgMSAzLjI2MSA0LjI1Yy4zNTkgMS4zNDIuMjc1IDIuNzMyLS4xNTQgNC4wMTNsMS45MDkuNjM2YTguOTU5IDguOTU5IDAgMCAwIC4xNzYtNS4xNjdaIi8+PC9nPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xNCAxNmMwLTEuMTAzLjg5Ny0yIDItMnMyIC44OTcgMiAyYTIgMiAwIDAgMS0uMTExLjYzbDEuODg5LjYzYy4xMzMtLjM5OC4yMjItLjgxNy4yMjItMS4yNTlhNCA0IDAgMSAwLTQgNHYtMmMtMS4xMDMgMC0yLS44OTctMi0yWiIvPjxwYXRoIGZpbGw9InVybCgjYSkiIGQ9Ik0xNyAxNGgzdjNoLTN6IiB0cmFuc2Zvcm09InJvdGF0ZSgtOTAgMTguNSAxNS41KSIvPjxwYXRoIGZpbGw9InVybCgjYikiIGQ9Ik0xOSAxMmg3djVoLTd6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyMi41IDE0LjUpIi8+PHBhdGggZmlsbD0idXJsKCNjKSIgZD0iTTIyIDEwaDEydjZIMjJ6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyOCAxMykiLz48cGF0aCBkPSJNMjUgMTloNnY0aC02ek0yMCAxOGg1djVoLTV6TTE3IDE3aDN2NmgtM3oiLz48L21hc2s+PC9kZWZzPjxwYXRoIGZpbGw9IiMwMDFkNmMiIGQ9Im0yNSAzMS4wMDEtMi4xMzktMS4wMTNBNS4wMjIgNS4wMjIgMCAwIDEgMjAgMjUuNDY4VjE5aDEwdjYuNDY4YTUuMDIzIDUuMDIzIDAgMCAxLTIuODYxIDQuNTJMMjUgMzEuMDAxWm0tMy0xMHY0LjQ2OGMwIDEuMTUzLjY3NCAyLjIxOCAxLjcxNyAyLjcxMWwxLjI4My42MDcgMS4yODMtLjYwN0EzLjAxMiAzLjAxMiAwIDAgMCAyOCAyNS40Njl2LTQuNDY4aC02WiIgZGF0YS1uYW1lPSJ1dWlkLTU1ODMwNDRiLWZmMjQtNGUyNy05MDU0LTI0MDQzYWRkZmMwNiIvPjxnIG1hc2s9InVybCgjZCkiPjxwYXRoIGZpbGw9InVybCgjZSkiIGQ9Ik0wIDBoMzJ2MzJIMHoiIHRyYW5zZm9ybT0icm90YXRlKC05MCAxNiAxNikiLz48L2c+PC9zdmc+", "label": {"text": "1 per instance", "tip": "Only 1 per instance"}, "attributes": {"mapKey": {"type": "text", "display_name": "Workload Protection Instance CRN"}}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke GetProviderTypeByID successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetProviderTypeByIDOptions model
				getProviderTypeByIDOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeByIDOptions)
				getProviderTypeByIDOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeByIDOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeByIDOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetProviderTypeByIDWithContext(ctx, getProviderTypeByIDOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetProviderTypeByIDWithContext(ctx, getProviderTypeByIDOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getProviderTypeByIDPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "7588190cce3c05ac8f7942ea597dafce", "type": "workload-protection", "name": "workload-protection", "description": "Security and Compliance Center Workload Protection helps you accelerate your Kubernetes and cloud adoption by addressing security and regulatory compliance. Easily identify vulnerabilities, check compliance, block threats and respond faster at every stage of the container and Kubernetes lifecycle.", "s2s_enabled": true, "instance_limit": 1, "mode": "PULL", "data_type": "com.sysdig.secure.results", "icon": "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiBkYXRhLW5hbWU9IkJ1aWxkIGljb24gaGVyZSIgdmlld0JveD0iMCAwIDMyIDMyIj48ZGVmcz48bGluZWFyR3JhZGllbnQgaWQ9ImEiIHgxPSItMjgxMS4xOTgiIHgyPSItMjgxNC4xOTgiIHkxPSI1NTcuNTE3IiB5Mj0iNTU3LjUxNyIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgyODMxLjE5OCAtNTQyLjAxNykiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLW9wYWNpdHk9IjAiLz48c3RvcCBvZmZzZXQ9Ii44Ii8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeGxpbms6aHJlZj0iI2EiIGlkPSJiIiB4MT0iLTgwNi4xOTgiIHgyPSItNzk5LjE5OCIgeTE9Ii0yNDE0LjQ4MSIgeTI9Ii0yNDE0LjQ4MSIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSg4MjUuMTk4IDI0MjguOTgxKSIvPjxsaW5lYXJHcmFkaWVudCB4bGluazpocmVmPSIjYSIgaWQ9ImMiIHgxPSItODEwLjE5OCIgeDI9Ii03OTguMTk4IiB5MT0iLTI0MTkuOTgxIiB5Mj0iLTI0MTkuOTgxIiBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDgzMi4xOTggMjQzMi45ODEpIi8+PGxpbmVhckdyYWRpZW50IGlkPSJlIiB4MT0iLTI1MTQiIHgyPSItMjQ4MiIgeTE9Ii0yNDgyIiB5Mj0iLTI1MTQiIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoMSAwIDAgLTEgMjUxNCAtMjQ4MikiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIj48c3RvcCBvZmZzZXQ9Ii4xIiBzdG9wLWNvbG9yPSIjMDhiZGJhIi8+PHN0b3Agb2Zmc2V0PSIuOSIgc3RvcC1jb2xvcj0iIzBmNjJmZSIvPjwvbGluZWFyR3JhZGllbnQ+PG1hc2sgaWQ9ImQiIHdpZHRoPSIyOS4wMTciIGhlaWdodD0iMjcuOTk2IiB4PSIxLjk4MyIgeT0iMiIgZGF0YS1uYW1lPSJtYXNrIiBtYXNrVW5pdHM9InVzZXJTcGFjZU9uVXNlIj48ZyBmaWxsPSIjZmZmIj48cGF0aCBkPSJNMjkuOTc2IDE2YzAtMy43MzktMS40NTYtNy4yNTUtNC4xMDEtOS44OTlTMTkuNzE1IDIgMTUuOTc2IDIgOC43MjEgMy40NTYgNi4wNzcgNi4xMDFjLTUuNDU5IDUuNDU5LTUuNDU5IDE0LjM0IDAgMTkuNzk4QTE0LjA0NCAxNC4wNDQgMCAwIDAgMTYgMjkuOTk1di0yLjAwMWExMi4wNCAxMi4wNCAwIDAgMS04LjUwOS0zLjUxYy00LjY3OS00LjY3OS00LjY3OS0xMi4yOTIgMC0xNi45NzEgMi4yNjctMi4yNjcgNS4yOC0zLjUxNSA4LjQ4NS0zLjUxNXM2LjIxOSAxLjI0OCA4LjQ4NSAzLjUxNSAzLjUxNSA1LjI4IDMuNTE1IDguNDg1YzAgMS4zMDgtLjIxOCAyLjU4LS42MTggMy43ODZsMS44OTcuNjMyYy40NjctMS40MDguNzIyLTIuODkyLjcyMi00LjQxOFoiLz48cGF0aCBkPSJNMjQuNyAxMy42NzVhOC45NCA4Ljk0IDAgMCAwLTQuMTkzLTUuNDY1IDguOTQyIDguOTQyIDAgMCAwLTYuODMtLjg5OSA4Ljk3MSA4Ljk3MSAwIDAgMC01LjQ2MSA0LjE5NSA4Ljk4IDguOTggMCAwIDAtLjkwMyA2LjgyOGMxLjA3NyA0LjAxNiA0LjcyMiA2LjY2IDguNjk1IDYuNjYxdi0xLjk5OGMtMy4wOS0uMDAxLTUuOTI2LTIuMDU4LTYuNzYzLTUuMTgxYTcuMDEgNy4wMSAwIDAgMSA0Ljk1LTguNTc0IDYuOTU4IDYuOTU4IDAgMCAxIDUuMzEyLjY5OSA2Ljk1NCA2Ljk1NCAwIDAgMSAzLjI2MSA0LjI1Yy4zNTkgMS4zNDIuMjc1IDIuNzMyLS4xNTQgNC4wMTNsMS45MDkuNjM2YTguOTU5IDguOTU5IDAgMCAwIC4xNzYtNS4xNjdaIi8+PC9nPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xNCAxNmMwLTEuMTAzLjg5Ny0yIDItMnMyIC44OTcgMiAyYTIgMiAwIDAgMS0uMTExLjYzbDEuODg5LjYzYy4xMzMtLjM5OC4yMjItLjgxNy4yMjItMS4yNTlhNCA0IDAgMSAwLTQgNHYtMmMtMS4xMDMgMC0yLS44OTctMi0yWiIvPjxwYXRoIGZpbGw9InVybCgjYSkiIGQ9Ik0xNyAxNGgzdjNoLTN6IiB0cmFuc2Zvcm09InJvdGF0ZSgtOTAgMTguNSAxNS41KSIvPjxwYXRoIGZpbGw9InVybCgjYikiIGQ9Ik0xOSAxMmg3djVoLTd6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyMi41IDE0LjUpIi8+PHBhdGggZmlsbD0idXJsKCNjKSIgZD0iTTIyIDEwaDEydjZIMjJ6IiB0cmFuc2Zvcm09InJvdGF0ZSg5MCAyOCAxMykiLz48cGF0aCBkPSJNMjUgMTloNnY0aC02ek0yMCAxOGg1djVoLTV6TTE3IDE3aDN2NmgtM3oiLz48L21hc2s+PC9kZWZzPjxwYXRoIGZpbGw9IiMwMDFkNmMiIGQ9Im0yNSAzMS4wMDEtMi4xMzktMS4wMTNBNS4wMjIgNS4wMjIgMCAwIDEgMjAgMjUuNDY4VjE5aDEwdjYuNDY4YTUuMDIzIDUuMDIzIDAgMCAxLTIuODYxIDQuNTJMMjUgMzEuMDAxWm0tMy0xMHY0LjQ2OGMwIDEuMTUzLjY3NCAyLjIxOCAxLjcxNyAyLjcxMWwxLjI4My42MDcgMS4yODMtLjYwN0EzLjAxMiAzLjAxMiAwIDAgMCAyOCAyNS40Njl2LTQuNDY4aC02WiIgZGF0YS1uYW1lPSJ1dWlkLTU1ODMwNDRiLWZmMjQtNGUyNy05MDU0LTI0MDQzYWRkZmMwNiIvPjxnIG1hc2s9InVybCgjZCkiPjxwYXRoIGZpbGw9InVybCgjZSkiIGQ9Ik0wIDBoMzJ2MzJIMHoiIHRyYW5zZm9ybT0icm90YXRlKC05MCAxNiAxNikiLz48L2c+PC9zdmc+", "label": {"text": "1 per instance", "tip": "Only 1 per instance"}, "attributes": {"mapKey": {"type": "text", "display_name": "Workload Protection Instance CRN"}}, "created_at": "2023-07-24T13:14:18.884Z", "updated_at": "2023-07-24T13:14:18.884Z"}`)
				}))
			})
			It(`Invoke GetProviderTypeByID successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeByID(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetProviderTypeByIDOptions model
				getProviderTypeByIDOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeByIDOptions)
				getProviderTypeByIDOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeByIDOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeByIDOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetProviderTypeByID with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProviderTypeByIDOptions model
				getProviderTypeByIDOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeByIDOptions)
				getProviderTypeByIDOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeByIDOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeByIDOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetProviderTypeByIDOptions model with no property values
				getProviderTypeByIDOptionsModelNew := new(securityandcompliancecenterapiv3.GetProviderTypeByIDOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetProviderTypeByID successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetProviderTypeByIDOptions model
				getProviderTypeByIDOptionsModel := new(securityandcompliancecenterapiv3.GetProviderTypeByIDOptions)
				getProviderTypeByIDOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeByIDOptionsModel.ProviderTypeID = core.StringPtr("testString")
				getProviderTypeByIDOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetProviderTypeByID(getProviderTypeByIDOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetScanReport(getScanReportOptions *GetScanReportOptions) - Operation response error`, func() {
		getScanReportPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScanReportPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetScanReport with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScanReportOptions model
				getScanReportOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportOptions)
				getScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportOptionsModel.JobID = core.StringPtr("testString")
				getScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetScanReport(getScanReportOptions *GetScanReportOptions)`, func() {
		getScanReportPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScanReportPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "e44316e3-53bc-449b-a808-c16df680d462", "scan_id": "44a5-a292-32114fa73553", "instance_id": "InstanceID", "scope_id": "44a5-a292-32114fa73558", "subscope_id": "44a5-a292-32114fa73555", "status": "completed", "created_on": "2024-05-08T12:30:01.000Z", "format": "pdf", "href": "Href"}`)
				}))
			})
			It(`Invoke GetScanReport successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetScanReportOptions model
				getScanReportOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportOptions)
				getScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportOptionsModel.JobID = core.StringPtr("testString")
				getScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetScanReportWithContext(ctx, getScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetScanReportWithContext(ctx, getScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScanReportPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "e44316e3-53bc-449b-a808-c16df680d462", "scan_id": "44a5-a292-32114fa73553", "instance_id": "InstanceID", "scope_id": "44a5-a292-32114fa73558", "subscope_id": "44a5-a292-32114fa73555", "status": "completed", "created_on": "2024-05-08T12:30:01.000Z", "format": "pdf", "href": "Href"}`)
				}))
			})
			It(`Invoke GetScanReport successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetScanReport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetScanReportOptions model
				getScanReportOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportOptions)
				getScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportOptionsModel.JobID = core.StringPtr("testString")
				getScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetScanReport with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScanReportOptions model
				getScanReportOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportOptions)
				getScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportOptionsModel.JobID = core.StringPtr("testString")
				getScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetScanReportOptions model with no property values
				getScanReportOptionsModelNew := new(securityandcompliancecenterapiv3.GetScanReportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetScanReport successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScanReportOptions model
				getScanReportOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportOptions)
				getScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportOptionsModel.JobID = core.StringPtr("testString")
				getScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetScanReport(getScanReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetScanReportDownloadFile(getScanReportDownloadFileOptions *GetScanReportDownloadFileOptions)`, func() {
		getScanReportDownloadFilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports/testString/download"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScanReportDownloadFilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/csv")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/csv")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))
			})
			It(`Invoke GetScanReportDownloadFile successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetScanReportDownloadFileOptions model
				getScanReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportDownloadFileOptions)
				getScanReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.JobID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getScanReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetScanReportDownloadFileWithContext(ctx, getScanReportDownloadFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetScanReportDownloadFile(getScanReportDownloadFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetScanReportDownloadFileWithContext(ctx, getScanReportDownloadFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getScanReportDownloadFilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/csv")))
					// Set mock response
					res.Header().Set("Content-type", "application/csv")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))
			})
			It(`Invoke GetScanReportDownloadFile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetScanReportDownloadFile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetScanReportDownloadFileOptions model
				getScanReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportDownloadFileOptions)
				getScanReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.JobID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getScanReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetScanReportDownloadFile(getScanReportDownloadFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetScanReportDownloadFile with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScanReportDownloadFileOptions model
				getScanReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportDownloadFileOptions)
				getScanReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.JobID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getScanReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetScanReportDownloadFile(getScanReportDownloadFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetScanReportDownloadFileOptions model with no property values
				getScanReportDownloadFileOptionsModelNew := new(securityandcompliancecenterapiv3.GetScanReportDownloadFileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetScanReportDownloadFile(getScanReportDownloadFileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetScanReportDownloadFile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetScanReportDownloadFileOptions model
				getScanReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetScanReportDownloadFileOptions)
				getScanReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.JobID = core.StringPtr("testString")
				getScanReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getScanReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetScanReportDownloadFile(getScanReportDownloadFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify empty byte buffer.
				Expect(result).ToNot(BeNil())
				buffer, operationErr := io.ReadAll(result)
				Expect(operationErr).To(BeNil())
				Expect(buffer).ToNot(BeNil())
				Expect(len(buffer)).To(Equal(0))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLatestReports(getLatestReportsOptions *GetLatestReportsOptions) - Operation response error`, func() {
		getLatestReportsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/latest"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLatestReportsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLatestReports with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetLatestReportsOptions model
				getLatestReportsOptionsModel := new(securityandcompliancecenterapiv3.GetLatestReportsOptions)
				getLatestReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getLatestReportsOptionsModel.Sort = core.StringPtr("profile_name")
				getLatestReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLatestReports(getLatestReportsOptions *GetLatestReportsOptions)`, func() {
		getLatestReportsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/latest"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLatestReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"home_account_id": "HomeAccountID", "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "score": {"passed": 1, "total_count": 4, "percent": 25}, "reports": [{"id": "44a5-a292-32114fa73558", "type": "scheduled", "group_id": "55b6-b3A4-432250b84669", "created_on": "2022-08-15T12:30:01Z", "scan_time": "2022-08-15T12:30:01Z", "cos_object": "crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7", "instance_id": "InstanceID", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "profile": {"id": "44a5-a292-32114fa73558", "name": "IBM FS Cloud", "version": "0.1"}, "scope": {"id": "2411ffdc16844b07b42521c3443f456d", "type": "account"}, "attachment": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "resource group - Default", "description": "Scoped to the Default resource group", "schedule": "daily", "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}], "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}}, "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "not_compliant_controls": [{"id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "control_name": "ibm-cloud-rule", "control_description": "Ensure security questions are registered by the account owner"}]}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "scopes": [{"id": "ID", "name": "Name", "href": "Href"}]}]}`)
				}))
			})
			It(`Invoke GetLatestReports successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetLatestReportsOptions model
				getLatestReportsOptionsModel := new(securityandcompliancecenterapiv3.GetLatestReportsOptions)
				getLatestReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getLatestReportsOptionsModel.Sort = core.StringPtr("profile_name")
				getLatestReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetLatestReportsWithContext(ctx, getLatestReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetLatestReportsWithContext(ctx, getLatestReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLatestReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"home_account_id": "HomeAccountID", "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "score": {"passed": 1, "total_count": 4, "percent": 25}, "reports": [{"id": "44a5-a292-32114fa73558", "type": "scheduled", "group_id": "55b6-b3A4-432250b84669", "created_on": "2022-08-15T12:30:01Z", "scan_time": "2022-08-15T12:30:01Z", "cos_object": "crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7", "instance_id": "InstanceID", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "profile": {"id": "44a5-a292-32114fa73558", "name": "IBM FS Cloud", "version": "0.1"}, "scope": {"id": "2411ffdc16844b07b42521c3443f456d", "type": "account"}, "attachment": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "resource group - Default", "description": "Scoped to the Default resource group", "schedule": "daily", "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}], "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}}, "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "not_compliant_controls": [{"id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "control_name": "ibm-cloud-rule", "control_description": "Ensure security questions are registered by the account owner"}]}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "scopes": [{"id": "ID", "name": "Name", "href": "Href"}]}]}`)
				}))
			})
			It(`Invoke GetLatestReports successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetLatestReports(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLatestReportsOptions model
				getLatestReportsOptionsModel := new(securityandcompliancecenterapiv3.GetLatestReportsOptions)
				getLatestReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getLatestReportsOptionsModel.Sort = core.StringPtr("profile_name")
				getLatestReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetLatestReports with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetLatestReportsOptions model
				getLatestReportsOptionsModel := new(securityandcompliancecenterapiv3.GetLatestReportsOptions)
				getLatestReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getLatestReportsOptionsModel.Sort = core.StringPtr("profile_name")
				getLatestReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLatestReportsOptions model with no property values
				getLatestReportsOptionsModelNew := new(securityandcompliancecenterapiv3.GetLatestReportsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLatestReports successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetLatestReportsOptions model
				getLatestReportsOptionsModel := new(securityandcompliancecenterapiv3.GetLatestReportsOptions)
				getLatestReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getLatestReportsOptionsModel.Sort = core.StringPtr("profile_name")
				getLatestReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetLatestReports(getLatestReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListReports(listReportsOptions *ListReportsOptions) - Operation response error`, func() {
		listReportsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["attachment_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["group_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"scheduled"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListReports with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportsOptions model
				listReportsOptionsModel := new(securityandcompliancecenterapiv3.ListReportsOptions)
				listReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportsOptionsModel.AttachmentID = core.StringPtr("testString")
				listReportsOptionsModel.GroupID = core.StringPtr("testString")
				listReportsOptionsModel.ProfileID = core.StringPtr("testString")
				listReportsOptionsModel.Type = core.StringPtr("scheduled")
				listReportsOptionsModel.Start = core.StringPtr("testString")
				listReportsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListReports(listReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListReports(listReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListReports(listReportsOptions *ListReportsOptions)`, func() {
		listReportsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["attachment_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["group_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"scheduled"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "home_account_id": "HomeAccountID", "reports": [{"id": "44a5-a292-32114fa73558", "type": "scheduled", "group_id": "55b6-b3A4-432250b84669", "created_on": "2022-08-15T12:30:01Z", "scan_time": "2022-08-15T12:30:01Z", "cos_object": "crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7", "instance_id": "InstanceID", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "profile": {"id": "44a5-a292-32114fa73558", "name": "IBM FS Cloud", "version": "0.1"}, "scope": {"id": "2411ffdc16844b07b42521c3443f456d", "type": "account"}, "attachment": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "resource group - Default", "description": "Scoped to the Default resource group", "schedule": "daily", "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}], "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}}, "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "not_compliant_controls": [{"id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "control_name": "ibm-cloud-rule", "control_description": "Ensure security questions are registered by the account owner"}]}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "scopes": [{"id": "ID", "name": "Name", "href": "Href"}]}]}`)
				}))
			})
			It(`Invoke ListReports successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListReportsOptions model
				listReportsOptionsModel := new(securityandcompliancecenterapiv3.ListReportsOptions)
				listReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportsOptionsModel.AttachmentID = core.StringPtr("testString")
				listReportsOptionsModel.GroupID = core.StringPtr("testString")
				listReportsOptionsModel.ProfileID = core.StringPtr("testString")
				listReportsOptionsModel.Type = core.StringPtr("scheduled")
				listReportsOptionsModel.Start = core.StringPtr("testString")
				listReportsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListReportsWithContext(ctx, listReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListReports(listReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListReportsWithContext(ctx, listReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["attachment_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["group_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["profile_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"scheduled"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "home_account_id": "HomeAccountID", "reports": [{"id": "44a5-a292-32114fa73558", "type": "scheduled", "group_id": "55b6-b3A4-432250b84669", "created_on": "2022-08-15T12:30:01Z", "scan_time": "2022-08-15T12:30:01Z", "cos_object": "crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7", "instance_id": "InstanceID", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "profile": {"id": "44a5-a292-32114fa73558", "name": "IBM FS Cloud", "version": "0.1"}, "scope": {"id": "2411ffdc16844b07b42521c3443f456d", "type": "account"}, "attachment": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "resource group - Default", "description": "Scoped to the Default resource group", "schedule": "daily", "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}], "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}}, "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "not_compliant_controls": [{"id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "control_name": "ibm-cloud-rule", "control_description": "Ensure security questions are registered by the account owner"}]}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "scopes": [{"id": "ID", "name": "Name", "href": "Href"}]}]}`)
				}))
			})
			It(`Invoke ListReports successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListReports(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListReportsOptions model
				listReportsOptionsModel := new(securityandcompliancecenterapiv3.ListReportsOptions)
				listReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportsOptionsModel.AttachmentID = core.StringPtr("testString")
				listReportsOptionsModel.GroupID = core.StringPtr("testString")
				listReportsOptionsModel.ProfileID = core.StringPtr("testString")
				listReportsOptionsModel.Type = core.StringPtr("scheduled")
				listReportsOptionsModel.Start = core.StringPtr("testString")
				listReportsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListReports(listReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListReports with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportsOptions model
				listReportsOptionsModel := new(securityandcompliancecenterapiv3.ListReportsOptions)
				listReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportsOptionsModel.AttachmentID = core.StringPtr("testString")
				listReportsOptionsModel.GroupID = core.StringPtr("testString")
				listReportsOptionsModel.ProfileID = core.StringPtr("testString")
				listReportsOptionsModel.Type = core.StringPtr("scheduled")
				listReportsOptionsModel.Start = core.StringPtr("testString")
				listReportsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListReports(listReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListReportsOptions model with no property values
				listReportsOptionsModelNew := new(securityandcompliancecenterapiv3.ListReportsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListReports(listReportsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListReports successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportsOptions model
				listReportsOptionsModel := new(securityandcompliancecenterapiv3.ListReportsOptions)
				listReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportsOptionsModel.AttachmentID = core.StringPtr("testString")
				listReportsOptionsModel.GroupID = core.StringPtr("testString")
				listReportsOptionsModel.ProfileID = core.StringPtr("testString")
				listReportsOptionsModel.Type = core.StringPtr("scheduled")
				listReportsOptionsModel.Start = core.StringPtr("testString")
				listReportsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListReports(listReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ReportCollection)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ReportCollection)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"reports":[{"id":"44a5-a292-32114fa73558","type":"scheduled","group_id":"55b6-b3A4-432250b84669","created_on":"2022-08-15T12:30:01Z","scan_time":"2022-08-15T12:30:01Z","cos_object":"crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7","instance_id":"InstanceID","account":{"id":"531fc3e28bfc43c5a2cea07786d93f5c","name":"NIST","type":"account_type"},"profile":{"id":"44a5-a292-32114fa73558","name":"IBM FS Cloud","version":"0.1"},"scope":{"id":"2411ffdc16844b07b42521c3443f456d","type":"account"},"attachment":{"id":"531fc3e28bfc43c5a2cea07786d93f5c","name":"resource group - Default","description":"Scoped to the Default resource group","schedule":"daily","scopes":[{"id":"ID","name":"Name","description":"Description","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}],"account_id":"AccountID","instance_id":"InstanceID","created_by":"CreatedBy","created_on":"2019-01-01T12:00:00.000Z","updated_by":"UpdatedBy","updated_on":"2019-01-01T12:00:00.000Z","attachment_count":15}],"notifications":{"enabled":false,"controls":{"threshold_limit":15,"failed_control_ids":["FailedControlIds"]}}},"controls_summary":{"status":"compliant","total_count":150,"compliant_count":130,"not_compliant_count":5,"unable_to_perform_count":5,"user_evaluation_required_count":10,"not_applicable_count":7,"not_compliant_controls":[{"id":"382c2b06-e6b2-43ee-b189-c1c7743b67ee","control_name":"ibm-cloud-rule","control_description":"Ensure security questions are registered by the account owner"}]},"evaluations_summary":{"status":"compliant","total_count":140,"pass_count":123,"failure_count":12,"error_count":5,"skipped_count":7,"completed_count":135},"tags":{"user":["User"],"access":["Access"],"service":["Service"]},"scopes":[{"id":"ID","name":"Name","href":"Href"}]}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"reports":[{"id":"44a5-a292-32114fa73558","type":"scheduled","group_id":"55b6-b3A4-432250b84669","created_on":"2022-08-15T12:30:01Z","scan_time":"2022-08-15T12:30:01Z","cos_object":"crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7","instance_id":"InstanceID","account":{"id":"531fc3e28bfc43c5a2cea07786d93f5c","name":"NIST","type":"account_type"},"profile":{"id":"44a5-a292-32114fa73558","name":"IBM FS Cloud","version":"0.1"},"scope":{"id":"2411ffdc16844b07b42521c3443f456d","type":"account"},"attachment":{"id":"531fc3e28bfc43c5a2cea07786d93f5c","name":"resource group - Default","description":"Scoped to the Default resource group","schedule":"daily","scopes":[{"id":"ID","name":"Name","description":"Description","environment":"Environment","properties":[{"name":"scope_id","value":"anyValue"}],"account_id":"AccountID","instance_id":"InstanceID","created_by":"CreatedBy","created_on":"2019-01-01T12:00:00.000Z","updated_by":"UpdatedBy","updated_on":"2019-01-01T12:00:00.000Z","attachment_count":15}],"notifications":{"enabled":false,"controls":{"threshold_limit":15,"failed_control_ids":["FailedControlIds"]}}},"controls_summary":{"status":"compliant","total_count":150,"compliant_count":130,"not_compliant_count":5,"unable_to_perform_count":5,"user_evaluation_required_count":10,"not_applicable_count":7,"not_compliant_controls":[{"id":"382c2b06-e6b2-43ee-b189-c1c7743b67ee","control_name":"ibm-cloud-rule","control_description":"Ensure security questions are registered by the account owner"}]},"evaluations_summary":{"status":"compliant","total_count":140,"pass_count":123,"failure_count":12,"error_count":5,"skipped_count":7,"completed_count":135},"tags":{"user":["User"],"access":["Access"],"service":["Service"]},"scopes":[{"id":"ID","name":"Name","href":"Href"}]}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ReportsPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listReportsOptionsModel := &securityandcompliancecenterapiv3.ListReportsOptions{
					InstanceID:   core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					AttachmentID: core.StringPtr("testString"),
					GroupID:      core.StringPtr("testString"),
					ProfileID:    core.StringPtr("testString"),
					Type:         core.StringPtr("scheduled"),
					Limit:        core.Int64Ptr(int64(10)),
					Sort:         core.StringPtr("profile_name"),
				}

				pager, err := securityAndComplianceCenterService.NewReportsPager(listReportsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.Report
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ReportsPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listReportsOptionsModel := &securityandcompliancecenterapiv3.ListReportsOptions{
					InstanceID:   core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					AttachmentID: core.StringPtr("testString"),
					GroupID:      core.StringPtr("testString"),
					ProfileID:    core.StringPtr("testString"),
					Type:         core.StringPtr("scheduled"),
					Limit:        core.Int64Ptr(int64(10)),
					Sort:         core.StringPtr("profile_name"),
				}

				pager, err := securityAndComplianceCenterService.NewReportsPager(listReportsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`GetReport(getReportOptions *GetReportOptions) - Operation response error`, func() {
		getReportPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetReport with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportOptions model
				getReportOptionsModel := new(securityandcompliancecenterapiv3.GetReportOptions)
				getReportOptionsModel.ReportID = core.StringPtr("testString")
				getReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportOptionsModel.ScopeID = core.StringPtr("testString")
				getReportOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetReport(getReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetReport(getReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReport(getReportOptions *GetReportOptions)`, func() {
		getReportPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "44a5-a292-32114fa73558", "type": "scheduled", "group_id": "55b6-b3A4-432250b84669", "created_on": "2022-08-15T12:30:01Z", "scan_time": "2022-08-15T12:30:01Z", "cos_object": "crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7", "instance_id": "InstanceID", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "profile": {"id": "44a5-a292-32114fa73558", "name": "IBM FS Cloud", "version": "0.1"}, "scope": {"id": "2411ffdc16844b07b42521c3443f456d", "type": "account"}, "attachment": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "resource group - Default", "description": "Scoped to the Default resource group", "schedule": "daily", "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}], "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}}, "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "not_compliant_controls": [{"id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "control_name": "ibm-cloud-rule", "control_description": "Ensure security questions are registered by the account owner"}]}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "scopes": [{"id": "ID", "name": "Name", "href": "Href"}]}`)
				}))
			})
			It(`Invoke GetReport successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportOptions model
				getReportOptionsModel := new(securityandcompliancecenterapiv3.GetReportOptions)
				getReportOptionsModel.ReportID = core.StringPtr("testString")
				getReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportOptionsModel.ScopeID = core.StringPtr("testString")
				getReportOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportWithContext(ctx, getReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReport(getReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportWithContext(ctx, getReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "44a5-a292-32114fa73558", "type": "scheduled", "group_id": "55b6-b3A4-432250b84669", "created_on": "2022-08-15T12:30:01Z", "scan_time": "2022-08-15T12:30:01Z", "cos_object": "crn:v1:bluemix:public:cloud-object-storage:global:a/531fc3e28bfc43c5a2cea07786d93f5c:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:b1a8f3da-49d2-4966-ae83-a8d02bc2aac7", "instance_id": "InstanceID", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "profile": {"id": "44a5-a292-32114fa73558", "name": "IBM FS Cloud", "version": "0.1"}, "scope": {"id": "2411ffdc16844b07b42521c3443f456d", "type": "account"}, "attachment": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "resource group - Default", "description": "Scoped to the Default resource group", "schedule": "daily", "scopes": [{"id": "ID", "name": "Name", "description": "Description", "environment": "Environment", "properties": [{"name": "scope_id", "value": "anyValue"}], "account_id": "AccountID", "instance_id": "InstanceID", "created_by": "CreatedBy", "created_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "attachment_count": 15}], "notifications": {"enabled": false, "controls": {"threshold_limit": 15, "failed_control_ids": ["FailedControlIds"]}}}, "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "not_compliant_controls": [{"id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "control_name": "ibm-cloud-rule", "control_description": "Ensure security questions are registered by the account owner"}]}, "evaluations_summary": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "scopes": [{"id": "ID", "name": "Name", "href": "Href"}]}`)
				}))
			})
			It(`Invoke GetReport successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportOptions model
				getReportOptionsModel := new(securityandcompliancecenterapiv3.GetReportOptions)
				getReportOptionsModel.ReportID = core.StringPtr("testString")
				getReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportOptionsModel.ScopeID = core.StringPtr("testString")
				getReportOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReport(getReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReport with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportOptions model
				getReportOptionsModel := new(securityandcompliancecenterapiv3.GetReportOptions)
				getReportOptionsModel.ReportID = core.StringPtr("testString")
				getReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportOptionsModel.ScopeID = core.StringPtr("testString")
				getReportOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReport(getReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportOptions model with no property values
				getReportOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReport(getReportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReport successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportOptions model
				getReportOptionsModel := new(securityandcompliancecenterapiv3.GetReportOptions)
				getReportOptionsModel.ReportID = core.StringPtr("testString")
				getReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportOptionsModel.ScopeID = core.StringPtr("testString")
				getReportOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReport(getReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportSummary(getReportSummaryOptions *GetReportSummaryOptions) - Operation response error`, func() {
		getReportSummaryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/summary"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportSummaryPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetReportSummary with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportSummaryOptions model
				getReportSummaryOptionsModel := new(securityandcompliancecenterapiv3.GetReportSummaryOptions)
				getReportSummaryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportSummaryOptionsModel.ReportID = core.StringPtr("testString")
				getReportSummaryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportSummary(getReportSummaryOptions *GetReportSummaryOptions)`, func() {
		getReportSummaryPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/summary"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportSummaryPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "isntance_id": "84644a08-31b6-4988-b504-49a46ca69ccd", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "score": {"passed": 1, "total_count": 4, "percent": 25}, "evaluations": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "controls": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}, "resources": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "top_failed": [{"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "my-bucket", "account": "59bcbfa6ea2f006b4ed7094c1a08dcdd", "service": "cloud-object-storage", "service_display_name": "cloud-object-storage", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}]}}`)
				}))
			})
			It(`Invoke GetReportSummary successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportSummaryOptions model
				getReportSummaryOptionsModel := new(securityandcompliancecenterapiv3.GetReportSummaryOptions)
				getReportSummaryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportSummaryOptionsModel.ReportID = core.StringPtr("testString")
				getReportSummaryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportSummaryWithContext(ctx, getReportSummaryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportSummaryWithContext(ctx, getReportSummaryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportSummaryPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "isntance_id": "84644a08-31b6-4988-b504-49a46ca69ccd", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "score": {"passed": 1, "total_count": 4, "percent": 25}, "evaluations": {"status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}, "controls": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}, "resources": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7, "top_failed": [{"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "my-bucket", "account": "59bcbfa6ea2f006b4ed7094c1a08dcdd", "service": "cloud-object-storage", "service_display_name": "cloud-object-storage", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135}]}}`)
				}))
			})
			It(`Invoke GetReportSummary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReportSummary(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportSummaryOptions model
				getReportSummaryOptionsModel := new(securityandcompliancecenterapiv3.GetReportSummaryOptions)
				getReportSummaryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportSummaryOptionsModel.ReportID = core.StringPtr("testString")
				getReportSummaryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReportSummary with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportSummaryOptions model
				getReportSummaryOptionsModel := new(securityandcompliancecenterapiv3.GetReportSummaryOptions)
				getReportSummaryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportSummaryOptionsModel.ReportID = core.StringPtr("testString")
				getReportSummaryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportSummaryOptions model with no property values
				getReportSummaryOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportSummaryOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReportSummary successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportSummaryOptions model
				getReportSummaryOptionsModel := new(securityandcompliancecenterapiv3.GetReportSummaryOptions)
				getReportSummaryOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportSummaryOptionsModel.ReportID = core.StringPtr("testString")
				getReportSummaryOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReportSummary(getReportSummaryOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportDownloadFile(getReportDownloadFileOptions *GetReportDownloadFileOptions)`, func() {
		getReportDownloadFilePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/download"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportDownloadFilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/csv")))
					// TODO: Add check for exclude_summary query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/csv")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))
			})
			It(`Invoke GetReportDownloadFile successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportDownloadFileOptions model
				getReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetReportDownloadFileOptions)
				getReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getReportDownloadFileOptionsModel.ExcludeSummary = core.BoolPtr(true)
				getReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportDownloadFileWithContext(ctx, getReportDownloadFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReportDownloadFile(getReportDownloadFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportDownloadFileWithContext(ctx, getReportDownloadFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportDownloadFilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.Header["Accept"]).ToNot(BeNil())
					Expect(req.Header["Accept"][0]).To(Equal(fmt.Sprintf("%v", "application/csv")))
					// TODO: Add check for exclude_summary query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/csv")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `This is a mock binary response.`)
				}))
			})
			It(`Invoke GetReportDownloadFile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReportDownloadFile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportDownloadFileOptions model
				getReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetReportDownloadFileOptions)
				getReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getReportDownloadFileOptionsModel.ExcludeSummary = core.BoolPtr(true)
				getReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportDownloadFile(getReportDownloadFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReportDownloadFile with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportDownloadFileOptions model
				getReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetReportDownloadFileOptions)
				getReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getReportDownloadFileOptionsModel.ExcludeSummary = core.BoolPtr(true)
				getReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReportDownloadFile(getReportDownloadFileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportDownloadFileOptions model with no property values
				getReportDownloadFileOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportDownloadFileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportDownloadFile(getReportDownloadFileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReportDownloadFile successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportDownloadFileOptions model
				getReportDownloadFileOptionsModel := new(securityandcompliancecenterapiv3.GetReportDownloadFileOptions)
				getReportDownloadFileOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportDownloadFileOptionsModel.ReportID = core.StringPtr("testString")
				getReportDownloadFileOptionsModel.Accept = core.StringPtr("application/csv")
				getReportDownloadFileOptionsModel.ExcludeSummary = core.BoolPtr(true)
				getReportDownloadFileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReportDownloadFile(getReportDownloadFileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify empty byte buffer.
				Expect(result).ToNot(BeNil())
				buffer, operationErr := io.ReadAll(result)
				Expect(operationErr).To(BeNil())
				Expect(buffer).ToNot(BeNil())
				Expect(len(buffer)).To(Equal(0))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportControls(getReportControlsOptions *GetReportControlsOptions) - Operation response error`, func() {
		getReportControlsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/controls"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportControlsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["control_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_category"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"compliant"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"control_name"}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetReportControls with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportControlsOptions model
				getReportControlsOptionsModel := new(securityandcompliancecenterapiv3.GetReportControlsOptions)
				getReportControlsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportControlsOptionsModel.ReportID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlName = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlDescription = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlCategory = core.StringPtr("testString")
				getReportControlsOptionsModel.Status = core.StringPtr("compliant")
				getReportControlsOptionsModel.Sort = core.StringPtr("control_name")
				getReportControlsOptionsModel.ScopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportControls(getReportControlsOptions *GetReportControlsOptions)`, func() {
		getReportControlsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/controls"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportControlsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["control_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_category"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"compliant"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"control_name"}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"report_id": "ReportID", "home_account_id": "HomeAccountID", "controls": [{"report_id": "6f1fdb98-c08b-41a8-a2f9-df10b51ff34a", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "531fc3e28bfc43c5a2cea07786d93f5c", "control_library_id": "531fc3e28bfc43c5a2cea07786d93f5c", "control_library_version": "v1.2.3", "control_name": "Password Management", "control_description": "Password Management", "control_category": "Access Control", "control_specifications": [{"control_specification_id": "18d32a4430e54c81a6668952609763b2", "control_specification_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "responsibility": "user", "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "completed_count": 135}], "status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}], "resource_tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}]}`)
				}))
			})
			It(`Invoke GetReportControls successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportControlsOptions model
				getReportControlsOptionsModel := new(securityandcompliancecenterapiv3.GetReportControlsOptions)
				getReportControlsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportControlsOptionsModel.ReportID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlName = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlDescription = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlCategory = core.StringPtr("testString")
				getReportControlsOptionsModel.Status = core.StringPtr("compliant")
				getReportControlsOptionsModel.Sort = core.StringPtr("control_name")
				getReportControlsOptionsModel.ScopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportControlsWithContext(ctx, getReportControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportControlsWithContext(ctx, getReportControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportControlsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["control_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_description"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["control_category"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"compliant"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"control_name"}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"report_id": "ReportID", "home_account_id": "HomeAccountID", "controls": [{"report_id": "6f1fdb98-c08b-41a8-a2f9-df10b51ff34a", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "531fc3e28bfc43c5a2cea07786d93f5c", "control_library_id": "531fc3e28bfc43c5a2cea07786d93f5c", "control_library_version": "v1.2.3", "control_name": "Password Management", "control_description": "Password Management", "control_category": "Access Control", "control_specifications": [{"control_specification_id": "18d32a4430e54c81a6668952609763b2", "control_specification_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "responsibility": "user", "assessments": [{"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}], "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "completed_count": 135}], "status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}], "resource_tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}]}`)
				}))
			})
			It(`Invoke GetReportControls successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReportControls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportControlsOptions model
				getReportControlsOptionsModel := new(securityandcompliancecenterapiv3.GetReportControlsOptions)
				getReportControlsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportControlsOptionsModel.ReportID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlName = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlDescription = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlCategory = core.StringPtr("testString")
				getReportControlsOptionsModel.Status = core.StringPtr("compliant")
				getReportControlsOptionsModel.Sort = core.StringPtr("control_name")
				getReportControlsOptionsModel.ScopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReportControls with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportControlsOptions model
				getReportControlsOptionsModel := new(securityandcompliancecenterapiv3.GetReportControlsOptions)
				getReportControlsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportControlsOptionsModel.ReportID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlName = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlDescription = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlCategory = core.StringPtr("testString")
				getReportControlsOptionsModel.Status = core.StringPtr("compliant")
				getReportControlsOptionsModel.Sort = core.StringPtr("control_name")
				getReportControlsOptionsModel.ScopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportControlsOptions model with no property values
				getReportControlsOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportControlsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReportControls successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportControlsOptions model
				getReportControlsOptionsModel := new(securityandcompliancecenterapiv3.GetReportControlsOptions)
				getReportControlsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportControlsOptionsModel.ReportID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlID = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlName = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlDescription = core.StringPtr("testString")
				getReportControlsOptionsModel.ControlCategory = core.StringPtr("testString")
				getReportControlsOptionsModel.Status = core.StringPtr("compliant")
				getReportControlsOptionsModel.Sort = core.StringPtr("control_name")
				getReportControlsOptionsModel.ScopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportControlsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReportControls(getReportControlsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportRule(getReportRuleOptions *GetReportRuleOptions) - Operation response error`, func() {
		getReportRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportRulePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetReportRule with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportRuleOptions model
				getReportRuleOptionsModel := new(securityandcompliancecenterapiv3.GetReportRuleOptions)
				getReportRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportRuleOptionsModel.ReportID = core.StringPtr("testString")
				getReportRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getReportRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportRule(getReportRuleOptions *GetReportRuleOptions)`, func() {
		getReportRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportRulePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "rule-7b0560a4-df94-4629-bb76-680f3155ddda", "type": "user_defined/system_defined", "description": "rule", "version": "1.2.3", "account_id": "59bcbfa6ea2f006b4ed7094c1a08dcdd", "created_on": "2022-08-15T12:30:01Z", "created_by": "IBMid-12345", "updated_on": "2022-08-15T12:30:01Z", "updated_by": "IBMid-12345", "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke GetReportRule successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportRuleOptions model
				getReportRuleOptionsModel := new(securityandcompliancecenterapiv3.GetReportRuleOptions)
				getReportRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportRuleOptionsModel.ReportID = core.StringPtr("testString")
				getReportRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getReportRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportRuleWithContext(ctx, getReportRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportRuleWithContext(ctx, getReportRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportRulePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"id": "rule-7b0560a4-df94-4629-bb76-680f3155ddda", "type": "user_defined/system_defined", "description": "rule", "version": "1.2.3", "account_id": "59bcbfa6ea2f006b4ed7094c1a08dcdd", "created_on": "2022-08-15T12:30:01Z", "created_by": "IBMid-12345", "updated_on": "2022-08-15T12:30:01Z", "updated_by": "IBMid-12345", "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke GetReportRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReportRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportRuleOptions model
				getReportRuleOptionsModel := new(securityandcompliancecenterapiv3.GetReportRuleOptions)
				getReportRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportRuleOptionsModel.ReportID = core.StringPtr("testString")
				getReportRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getReportRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReportRule with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportRuleOptions model
				getReportRuleOptionsModel := new(securityandcompliancecenterapiv3.GetReportRuleOptions)
				getReportRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportRuleOptionsModel.ReportID = core.StringPtr("testString")
				getReportRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getReportRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportRuleOptions model with no property values
				getReportRuleOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReportRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportRuleOptions model
				getReportRuleOptionsModel := new(securityandcompliancecenterapiv3.GetReportRuleOptions)
				getReportRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportRuleOptionsModel.ReportID = core.StringPtr("testString")
				getReportRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getReportRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReportRule(getReportRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListReportEvaluations(listReportEvaluationsOptions *ListReportEvaluationsOptions) - Operation response error`, func() {
		listReportEvaluationsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/evaluations"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportEvaluationsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["assessment_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["assessment_method"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["component_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_env"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"failure"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListReportEvaluations with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportEvaluationsOptions model
				listReportEvaluationsOptionsModel := new(securityandcompliancecenterapiv3.ListReportEvaluationsOptions)
				listReportEvaluationsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportEvaluationsOptionsModel.ReportID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentMethod = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.ComponentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetEnv = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetName = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Status = core.StringPtr("failure")
				listReportEvaluationsOptionsModel.Start = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportEvaluationsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportEvaluationsOptionsModel.ScopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListReportEvaluations(listReportEvaluationsOptions *ListReportEvaluationsOptions)`, func() {
		listReportEvaluationsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/evaluations"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportEvaluationsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["assessment_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["assessment_method"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["component_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_env"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"failure"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "report_id": "ReportID", "home_account_id": "HomeAccountID", "evaluations": [{"report_id": "ReportID", "home_account_id": "be200c80cabc456e91139e4152327456", "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "assessment": {"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}, "evaluate_time": "2022-06-30T11:03:44.630150782Z", "target": {"id": "crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket", "account_id": "59bcbfa6ea2f006b4ed7094c1a08dcdd", "service_name": "cloud-object-storage", "service_display_name": "cloud-object-storage", "resource_crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket", "resource_name": "mybucket", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}}, "status": "failure", "reason": "One or more conditions in rule rule-7b0560a4-df94-4629-bb76-680f3155ddda were not met", "details": {"properties": [{"property": "Property", "property_description": "PropertyDescription", "operator": "string_equals", "expected_value": "anyValue", "found_value": "anyValue"}], "provider_info": {"provider_type": "ProviderType"}}, "evaluated_by": "abc@ibm.com"}]}`)
				}))
			})
			It(`Invoke ListReportEvaluations successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListReportEvaluationsOptions model
				listReportEvaluationsOptionsModel := new(securityandcompliancecenterapiv3.ListReportEvaluationsOptions)
				listReportEvaluationsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportEvaluationsOptionsModel.ReportID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentMethod = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.ComponentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetEnv = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetName = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Status = core.StringPtr("failure")
				listReportEvaluationsOptionsModel.Start = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportEvaluationsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportEvaluationsOptionsModel.ScopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListReportEvaluationsWithContext(ctx, listReportEvaluationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListReportEvaluationsWithContext(ctx, listReportEvaluationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportEvaluationsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["assessment_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["assessment_method"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["component_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_env"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"failure"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"profile_name"}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "report_id": "ReportID", "home_account_id": "HomeAccountID", "evaluations": [{"report_id": "ReportID", "home_account_id": "be200c80cabc456e91139e4152327456", "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "assessment": {"assessment_id": "382c2b06-e6b2-43ee-b189-c1c7743b67ee", "assessment_type": "ibm-cloud-rule", "assessment_method": "ibm-cloud-rule", "assessment_description": "Check whether Cloud Object Storage is accessible only by using private endpoints", "parameter_count": 1, "parameters": [{"assessment_type": "AssessmentType", "assessment_id": "AssessmentID", "parameter_name": "location", "parameter_display_name": "Location", "parameter_type": "string", "parameter_value": "anyValue"}]}, "evaluate_time": "2022-06-30T11:03:44.630150782Z", "target": {"id": "crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket", "account_id": "59bcbfa6ea2f006b4ed7094c1a08dcdd", "service_name": "cloud-object-storage", "service_display_name": "cloud-object-storage", "resource_crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket", "resource_name": "mybucket", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}}, "status": "failure", "reason": "One or more conditions in rule rule-7b0560a4-df94-4629-bb76-680f3155ddda were not met", "details": {"properties": [{"property": "Property", "property_description": "PropertyDescription", "operator": "string_equals", "expected_value": "anyValue", "found_value": "anyValue"}], "provider_info": {"provider_type": "ProviderType"}}, "evaluated_by": "abc@ibm.com"}]}`)
				}))
			})
			It(`Invoke ListReportEvaluations successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListReportEvaluations(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListReportEvaluationsOptions model
				listReportEvaluationsOptionsModel := new(securityandcompliancecenterapiv3.ListReportEvaluationsOptions)
				listReportEvaluationsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportEvaluationsOptionsModel.ReportID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentMethod = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.ComponentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetEnv = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetName = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Status = core.StringPtr("failure")
				listReportEvaluationsOptionsModel.Start = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportEvaluationsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportEvaluationsOptionsModel.ScopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListReportEvaluations with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportEvaluationsOptions model
				listReportEvaluationsOptionsModel := new(securityandcompliancecenterapiv3.ListReportEvaluationsOptions)
				listReportEvaluationsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportEvaluationsOptionsModel.ReportID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentMethod = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.ComponentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetEnv = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetName = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Status = core.StringPtr("failure")
				listReportEvaluationsOptionsModel.Start = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportEvaluationsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportEvaluationsOptionsModel.ScopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListReportEvaluationsOptions model with no property values
				listReportEvaluationsOptionsModelNew := new(securityandcompliancecenterapiv3.ListReportEvaluationsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListReportEvaluations successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportEvaluationsOptions model
				listReportEvaluationsOptionsModel := new(securityandcompliancecenterapiv3.ListReportEvaluationsOptions)
				listReportEvaluationsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportEvaluationsOptionsModel.ReportID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.AssessmentMethod = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.ComponentID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetEnv = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.TargetName = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Status = core.StringPtr("failure")
				listReportEvaluationsOptionsModel.Start = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportEvaluationsOptionsModel.Sort = core.StringPtr("profile_name")
				listReportEvaluationsOptionsModel.ScopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportEvaluationsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListReportEvaluations(listReportEvaluationsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.EvaluationPage)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.EvaluationPage)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportEvaluationsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"evaluations":[{"report_id":"ReportID","home_account_id":"be200c80cabc456e91139e4152327456","component_id":"cloud-object_storage","component_name":"cloud-object_storage","assessment":{"assessment_id":"382c2b06-e6b2-43ee-b189-c1c7743b67ee","assessment_type":"ibm-cloud-rule","assessment_method":"ibm-cloud-rule","assessment_description":"Check whether Cloud Object Storage is accessible only by using private endpoints","parameter_count":1,"parameters":[{"assessment_type":"AssessmentType","assessment_id":"AssessmentID","parameter_name":"location","parameter_display_name":"Location","parameter_type":"string","parameter_value":"anyValue"}]},"evaluate_time":"2022-06-30T11:03:44.630150782Z","target":{"id":"crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket","account_id":"59bcbfa6ea2f006b4ed7094c1a08dcdd","service_name":"cloud-object-storage","service_display_name":"cloud-object-storage","resource_crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket","resource_name":"mybucket","tags":{"user":["User"],"access":["Access"],"service":["Service"]}},"status":"failure","reason":"One or more conditions in rule rule-7b0560a4-df94-4629-bb76-680f3155ddda were not met","details":{"properties":[{"property":"Property","property_description":"PropertyDescription","operator":"string_equals","expected_value":"anyValue","found_value":"anyValue"}],"provider_info":{"provider_type":"ProviderType"}},"evaluated_by":"abc@ibm.com"}],"total_count":2,"limit":1}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"evaluations":[{"report_id":"ReportID","home_account_id":"be200c80cabc456e91139e4152327456","component_id":"cloud-object_storage","component_name":"cloud-object_storage","assessment":{"assessment_id":"382c2b06-e6b2-43ee-b189-c1c7743b67ee","assessment_type":"ibm-cloud-rule","assessment_method":"ibm-cloud-rule","assessment_description":"Check whether Cloud Object Storage is accessible only by using private endpoints","parameter_count":1,"parameters":[{"assessment_type":"AssessmentType","assessment_id":"AssessmentID","parameter_name":"location","parameter_display_name":"Location","parameter_type":"string","parameter_value":"anyValue"}]},"evaluate_time":"2022-06-30T11:03:44.630150782Z","target":{"id":"crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket","account_id":"59bcbfa6ea2f006b4ed7094c1a08dcdd","service_name":"cloud-object-storage","service_display_name":"cloud-object-storage","resource_crn":"crn:v1:bluemix:public:cloud-object-storage:global:a/59bcbfa6ea2f006b4ed7094c1a08dcdd:1a0ec336-f391-4091-a6fb-5e084a4c56f4:bucket:mybucket","resource_name":"mybucket","tags":{"user":["User"],"access":["Access"],"service":["Service"]}},"status":"failure","reason":"One or more conditions in rule rule-7b0560a4-df94-4629-bb76-680f3155ddda were not met","details":{"properties":[{"property":"Property","property_description":"PropertyDescription","operator":"string_equals","expected_value":"anyValue","found_value":"anyValue"}],"provider_info":{"provider_type":"ProviderType"}},"evaluated_by":"abc@ibm.com"}],"total_count":2,"limit":1}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ReportEvaluationsPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listReportEvaluationsOptionsModel := &securityandcompliancecenterapiv3.ListReportEvaluationsOptions{
					InstanceID:       core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					ReportID:         core.StringPtr("testString"),
					AssessmentID:     core.StringPtr("testString"),
					AssessmentMethod: core.StringPtr("testString"),
					ComponentID:      core.StringPtr("testString"),
					TargetID:         core.StringPtr("testString"),
					TargetEnv:        core.StringPtr("testString"),
					TargetName:       core.StringPtr("testString"),
					Status:           core.StringPtr("failure"),
					Limit:            core.Int64Ptr(int64(10)),
					Sort:             core.StringPtr("profile_name"),
					ScopeID:          core.StringPtr("testString"),
					SubscopeID:       core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewReportEvaluationsPager(listReportEvaluationsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.Evaluation
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ReportEvaluationsPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listReportEvaluationsOptionsModel := &securityandcompliancecenterapiv3.ListReportEvaluationsOptions{
					InstanceID:       core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					ReportID:         core.StringPtr("testString"),
					AssessmentID:     core.StringPtr("testString"),
					AssessmentMethod: core.StringPtr("testString"),
					ComponentID:      core.StringPtr("testString"),
					TargetID:         core.StringPtr("testString"),
					TargetEnv:        core.StringPtr("testString"),
					TargetName:       core.StringPtr("testString"),
					Status:           core.StringPtr("failure"),
					Limit:            core.Int64Ptr(int64(10)),
					Sort:             core.StringPtr("profile_name"),
					ScopeID:          core.StringPtr("testString"),
					SubscopeID:       core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewReportEvaluationsPager(listReportEvaluationsOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`ListReportResources(listReportResourcesOptions *ListReportResourcesOptions) - Operation response error`, func() {
		listReportResourcesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/resources"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportResourcesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["component_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"compliant"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"account_id"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListReportResources with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportResourcesOptions model
				listReportResourcesOptionsModel := new(securityandcompliancecenterapiv3.ListReportResourcesOptions)
				listReportResourcesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportResourcesOptionsModel.ReportID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ResourceName = core.StringPtr("testString")
				listReportResourcesOptionsModel.AccountID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ComponentID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Status = core.StringPtr("compliant")
				listReportResourcesOptionsModel.Sort = core.StringPtr("account_id")
				listReportResourcesOptionsModel.Start = core.StringPtr("testString")
				listReportResourcesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportResourcesOptionsModel.ScopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListReportResources(listReportResourcesOptions *ListReportResourcesOptions)`, func() {
		listReportResourcesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/resources"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["component_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"compliant"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"account_id"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "report_id": "ReportID", "home_account_id": "HomeAccountID", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}`)
				}))
			})
			It(`Invoke ListReportResources successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListReportResourcesOptions model
				listReportResourcesOptionsModel := new(securityandcompliancecenterapiv3.ListReportResourcesOptions)
				listReportResourcesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportResourcesOptionsModel.ReportID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ResourceName = core.StringPtr("testString")
				listReportResourcesOptionsModel.AccountID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ComponentID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Status = core.StringPtr("compliant")
				listReportResourcesOptionsModel.Sort = core.StringPtr("account_id")
				listReportResourcesOptionsModel.Start = core.StringPtr("testString")
				listReportResourcesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportResourcesOptionsModel.ScopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListReportResourcesWithContext(ctx, listReportResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListReportResourcesWithContext(ctx, listReportResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["resource_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["component_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"compliant"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"account_id"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "report_id": "ReportID", "home_account_id": "HomeAccountID", "resources": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "home_account_id": "2411ffdc16844b07b42521c3443f456d", "id": "crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::", "resource_name": "jeff's key", "account": {"id": "531fc3e28bfc43c5a2cea07786d93f5c", "name": "NIST", "type": "account_type"}, "component_id": "cloud-object_storage", "component_name": "cloud-object_storage", "environment": "ibm cloud", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}, "status": "compliant", "total_count": 140, "pass_count": 123, "failure_count": 12, "error_count": 5, "skipped_count": 7, "completed_count": 135, "service_name": "pm-20", "instance_crn": "InstanceCRN"}]}`)
				}))
			})
			It(`Invoke ListReportResources successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListReportResources(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListReportResourcesOptions model
				listReportResourcesOptionsModel := new(securityandcompliancecenterapiv3.ListReportResourcesOptions)
				listReportResourcesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportResourcesOptionsModel.ReportID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ResourceName = core.StringPtr("testString")
				listReportResourcesOptionsModel.AccountID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ComponentID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Status = core.StringPtr("compliant")
				listReportResourcesOptionsModel.Sort = core.StringPtr("account_id")
				listReportResourcesOptionsModel.Start = core.StringPtr("testString")
				listReportResourcesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportResourcesOptionsModel.ScopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListReportResources with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportResourcesOptions model
				listReportResourcesOptionsModel := new(securityandcompliancecenterapiv3.ListReportResourcesOptions)
				listReportResourcesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportResourcesOptionsModel.ReportID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ResourceName = core.StringPtr("testString")
				listReportResourcesOptionsModel.AccountID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ComponentID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Status = core.StringPtr("compliant")
				listReportResourcesOptionsModel.Sort = core.StringPtr("account_id")
				listReportResourcesOptionsModel.Start = core.StringPtr("testString")
				listReportResourcesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportResourcesOptionsModel.ScopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListReportResourcesOptions model with no property values
				listReportResourcesOptionsModelNew := new(securityandcompliancecenterapiv3.ListReportResourcesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListReportResources successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListReportResourcesOptions model
				listReportResourcesOptionsModel := new(securityandcompliancecenterapiv3.ListReportResourcesOptions)
				listReportResourcesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportResourcesOptionsModel.ReportID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ResourceName = core.StringPtr("testString")
				listReportResourcesOptionsModel.AccountID = core.StringPtr("testString")
				listReportResourcesOptionsModel.ComponentID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Status = core.StringPtr("compliant")
				listReportResourcesOptionsModel.Sort = core.StringPtr("account_id")
				listReportResourcesOptionsModel.Start = core.StringPtr("testString")
				listReportResourcesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listReportResourcesOptionsModel.ScopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.SubscopeID = core.StringPtr("testString")
				listReportResourcesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListReportResources(listReportResourcesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ResourcePage)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.ResourcePage)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listReportResourcesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"resources":[{"report_id":"30b434b3-cb08-4845-af10-7a8fc682b6a8","home_account_id":"2411ffdc16844b07b42521c3443f456d","id":"crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::","resource_name":"jeff's key","account":{"id":"531fc3e28bfc43c5a2cea07786d93f5c","name":"NIST","type":"account_type"},"component_id":"cloud-object_storage","component_name":"cloud-object_storage","environment":"ibm cloud","tags":{"user":["User"],"access":["Access"],"service":["Service"]},"status":"compliant","total_count":140,"pass_count":123,"failure_count":12,"error_count":5,"skipped_count":7,"completed_count":135,"service_name":"pm-20","instance_crn":"InstanceCRN"}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"resources":[{"report_id":"30b434b3-cb08-4845-af10-7a8fc682b6a8","home_account_id":"2411ffdc16844b07b42521c3443f456d","id":"crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::","resource_name":"jeff's key","account":{"id":"531fc3e28bfc43c5a2cea07786d93f5c","name":"NIST","type":"account_type"},"component_id":"cloud-object_storage","component_name":"cloud-object_storage","environment":"ibm cloud","tags":{"user":["User"],"access":["Access"],"service":["Service"]},"status":"compliant","total_count":140,"pass_count":123,"failure_count":12,"error_count":5,"skipped_count":7,"completed_count":135,"service_name":"pm-20","instance_crn":"InstanceCRN"}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use ReportResourcesPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listReportResourcesOptionsModel := &securityandcompliancecenterapiv3.ListReportResourcesOptions{
					InstanceID:   core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					ReportID:     core.StringPtr("testString"),
					ID:           core.StringPtr("testString"),
					ResourceName: core.StringPtr("testString"),
					AccountID:    core.StringPtr("testString"),
					ComponentID:  core.StringPtr("testString"),
					Status:       core.StringPtr("compliant"),
					Sort:         core.StringPtr("account_id"),
					Limit:        core.Int64Ptr(int64(10)),
					ScopeID:      core.StringPtr("testString"),
					SubscopeID:   core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewReportResourcesPager(listReportResourcesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.Resource
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use ReportResourcesPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listReportResourcesOptionsModel := &securityandcompliancecenterapiv3.ListReportResourcesOptions{
					InstanceID:   core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					ReportID:     core.StringPtr("testString"),
					ID:           core.StringPtr("testString"),
					ResourceName: core.StringPtr("testString"),
					AccountID:    core.StringPtr("testString"),
					ComponentID:  core.StringPtr("testString"),
					Status:       core.StringPtr("compliant"),
					Sort:         core.StringPtr("account_id"),
					Limit:        core.Int64Ptr(int64(10)),
					ScopeID:      core.StringPtr("testString"),
					SubscopeID:   core.StringPtr("testString"),
				}

				pager, err := securityAndComplianceCenterService.NewReportResourcesPager(listReportResourcesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`GetReportTags(getReportTagsOptions *GetReportTagsOptions) - Operation response error`, func() {
		getReportTagsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/tags"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportTagsPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetReportTags with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportTagsOptions model
				getReportTagsOptionsModel := new(securityandcompliancecenterapiv3.GetReportTagsOptions)
				getReportTagsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportTagsOptionsModel.ReportID = core.StringPtr("testString")
				getReportTagsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportTags(getReportTagsOptions *GetReportTagsOptions)`, func() {
		getReportTagsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/tags"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportTagsPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"report_id": "ReportID", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}}`)
				}))
			})
			It(`Invoke GetReportTags successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportTagsOptions model
				getReportTagsOptionsModel := new(securityandcompliancecenterapiv3.GetReportTagsOptions)
				getReportTagsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportTagsOptionsModel.ReportID = core.StringPtr("testString")
				getReportTagsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportTagsWithContext(ctx, getReportTagsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportTagsWithContext(ctx, getReportTagsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportTagsPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"report_id": "ReportID", "tags": {"user": ["User"], "access": ["Access"], "service": ["Service"]}}`)
				}))
			})
			It(`Invoke GetReportTags successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReportTags(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportTagsOptions model
				getReportTagsOptionsModel := new(securityandcompliancecenterapiv3.GetReportTagsOptions)
				getReportTagsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportTagsOptionsModel.ReportID = core.StringPtr("testString")
				getReportTagsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReportTags with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportTagsOptions model
				getReportTagsOptionsModel := new(securityandcompliancecenterapiv3.GetReportTagsOptions)
				getReportTagsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportTagsOptionsModel.ReportID = core.StringPtr("testString")
				getReportTagsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportTagsOptions model with no property values
				getReportTagsOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportTagsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReportTags successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportTagsOptions model
				getReportTagsOptionsModel := new(securityandcompliancecenterapiv3.GetReportTagsOptions)
				getReportTagsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportTagsOptionsModel.ReportID = core.StringPtr("testString")
				getReportTagsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReportTags(getReportTagsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportViolationsDrift(getReportViolationsDriftOptions *GetReportViolationsDriftOptions) - Operation response error`, func() {
		getReportViolationsDriftPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/violations_drift"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportViolationsDriftPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["scan_time_duration"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetReportViolationsDrift with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportViolationsDriftOptions model
				getReportViolationsDriftOptionsModel := new(securityandcompliancecenterapiv3.GetReportViolationsDriftOptions)
				getReportViolationsDriftOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportViolationsDriftOptionsModel.ReportID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.ScanTimeDuration = core.Int64Ptr(int64(0))
				getReportViolationsDriftOptionsModel.ScopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetReportViolationsDrift(getReportViolationsDriftOptions *GetReportViolationsDriftOptions)`, func() {
		getReportViolationsDriftPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/violations_drift"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportViolationsDriftPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["scan_time_duration"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"home_account_id": "HomeAccountID", "report_group_id": "ReportGroupID", "data_points": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "report_group_id": "55b6-b3A4-432250b84669", "scan_time": "2022-08-15T12:30:01Z", "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}}]}`)
				}))
			})
			It(`Invoke GetReportViolationsDrift successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetReportViolationsDriftOptions model
				getReportViolationsDriftOptionsModel := new(securityandcompliancecenterapiv3.GetReportViolationsDriftOptions)
				getReportViolationsDriftOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportViolationsDriftOptionsModel.ReportID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.ScanTimeDuration = core.Int64Ptr(int64(0))
				getReportViolationsDriftOptionsModel.ScopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetReportViolationsDriftWithContext(ctx, getReportViolationsDriftOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetReportViolationsDriftWithContext(ctx, getReportViolationsDriftOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getReportViolationsDriftPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["scan_time_duration"]).To(Equal([]string{fmt.Sprint(int64(0))}))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"home_account_id": "HomeAccountID", "report_group_id": "ReportGroupID", "data_points": [{"report_id": "30b434b3-cb08-4845-af10-7a8fc682b6a8", "report_group_id": "55b6-b3A4-432250b84669", "scan_time": "2022-08-15T12:30:01Z", "controls_summary": {"status": "compliant", "total_count": 150, "compliant_count": 130, "not_compliant_count": 5, "unable_to_perform_count": 5, "user_evaluation_required_count": 10, "not_applicable_count": 7}}]}`)
				}))
			})
			It(`Invoke GetReportViolationsDrift successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetReportViolationsDrift(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetReportViolationsDriftOptions model
				getReportViolationsDriftOptionsModel := new(securityandcompliancecenterapiv3.GetReportViolationsDriftOptions)
				getReportViolationsDriftOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportViolationsDriftOptionsModel.ReportID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.ScanTimeDuration = core.Int64Ptr(int64(0))
				getReportViolationsDriftOptionsModel.ScopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetReportViolationsDrift with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportViolationsDriftOptions model
				getReportViolationsDriftOptionsModel := new(securityandcompliancecenterapiv3.GetReportViolationsDriftOptions)
				getReportViolationsDriftOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportViolationsDriftOptionsModel.ReportID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.ScanTimeDuration = core.Int64Ptr(int64(0))
				getReportViolationsDriftOptionsModel.ScopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetReportViolationsDriftOptions model with no property values
				getReportViolationsDriftOptionsModelNew := new(securityandcompliancecenterapiv3.GetReportViolationsDriftOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetReportViolationsDrift successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetReportViolationsDriftOptions model
				getReportViolationsDriftOptionsModel := new(securityandcompliancecenterapiv3.GetReportViolationsDriftOptions)
				getReportViolationsDriftOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportViolationsDriftOptionsModel.ReportID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.ScanTimeDuration = core.Int64Ptr(int64(0))
				getReportViolationsDriftOptionsModel.ScopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.SubscopeID = core.StringPtr("testString")
				getReportViolationsDriftOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetReportViolationsDrift(getReportViolationsDriftOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListScanReports(listScanReportsOptions *ListScanReportsOptions) - Operation response error`, func() {
		listScanReportsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScanReportsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListScanReports with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListScanReportsOptions model
				listScanReportsOptionsModel := new(securityandcompliancecenterapiv3.ListScanReportsOptions)
				listScanReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScanReportsOptionsModel.ReportID = core.StringPtr("testString")
				listScanReportsOptionsModel.ScopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.SubscopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListScanReports(listScanReportsOptions *ListScanReportsOptions)`, func() {
		listScanReportsPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScanReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "scope_id": "44a5-a292-32114fa73558", "subscope_id": "44a5-a292-32114fa73555", "scan_reports": [{"id": "e44316e3-53bc-449b-a808-c16df680d462", "scan_id": "44a5-a292-32114fa73553", "instance_id": "InstanceID", "scope_id": "44a5-a292-32114fa73558", "subscope_id": "44a5-a292-32114fa73555", "status": "completed", "created_on": "2024-05-08T12:30:01.000Z", "format": "pdf", "href": "Href"}]}`)
				}))
			})
			It(`Invoke ListScanReports successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListScanReportsOptions model
				listScanReportsOptionsModel := new(securityandcompliancecenterapiv3.ListScanReportsOptions)
				listScanReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScanReportsOptionsModel.ReportID = core.StringPtr("testString")
				listScanReportsOptionsModel.ScopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.SubscopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListScanReportsWithContext(ctx, listScanReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListScanReportsWithContext(ctx, listScanReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listScanReportsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["scope_id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["subscope_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "scope_id": "44a5-a292-32114fa73558", "subscope_id": "44a5-a292-32114fa73555", "scan_reports": [{"id": "e44316e3-53bc-449b-a808-c16df680d462", "scan_id": "44a5-a292-32114fa73553", "instance_id": "InstanceID", "scope_id": "44a5-a292-32114fa73558", "subscope_id": "44a5-a292-32114fa73555", "status": "completed", "created_on": "2024-05-08T12:30:01.000Z", "format": "pdf", "href": "Href"}]}`)
				}))
			})
			It(`Invoke ListScanReports successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListScanReports(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListScanReportsOptions model
				listScanReportsOptionsModel := new(securityandcompliancecenterapiv3.ListScanReportsOptions)
				listScanReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScanReportsOptionsModel.ReportID = core.StringPtr("testString")
				listScanReportsOptionsModel.ScopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.SubscopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListScanReports with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListScanReportsOptions model
				listScanReportsOptionsModel := new(securityandcompliancecenterapiv3.ListScanReportsOptions)
				listScanReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScanReportsOptionsModel.ReportID = core.StringPtr("testString")
				listScanReportsOptionsModel.ScopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.SubscopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListScanReportsOptions model with no property values
				listScanReportsOptionsModelNew := new(securityandcompliancecenterapiv3.ListScanReportsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListScanReports successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListScanReportsOptions model
				listScanReportsOptionsModel := new(securityandcompliancecenterapiv3.ListScanReportsOptions)
				listScanReportsOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScanReportsOptionsModel.ReportID = core.StringPtr("testString")
				listScanReportsOptionsModel.ScopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.SubscopeID = core.StringPtr("testString")
				listScanReportsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListScanReports(listScanReportsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateScanReport(createScanReportOptions *CreateScanReportOptions) - Operation response error`, func() {
		createScanReportPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScanReportPath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateScanReport with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateScanReportOptions model
				createScanReportOptionsModel := new(securityandcompliancecenterapiv3.CreateScanReportOptions)
				createScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanReportOptionsModel.ReportID = core.StringPtr("testString")
				createScanReportOptionsModel.Format = core.StringPtr("csv")
				createScanReportOptionsModel.ScopeID = core.StringPtr("132009ff-b982-412e-a110-ad8797e10f84")
				createScanReportOptionsModel.SubscopeID = core.StringPtr("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")
				createScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateScanReport(createScanReportOptions *CreateScanReportOptions)`, func() {
		createScanReportPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/reports/testString/scan_reports"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScanReportPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"id": "ID"}`)
				}))
			})
			It(`Invoke CreateScanReport successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the CreateScanReportOptions model
				createScanReportOptionsModel := new(securityandcompliancecenterapiv3.CreateScanReportOptions)
				createScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanReportOptionsModel.ReportID = core.StringPtr("testString")
				createScanReportOptionsModel.Format = core.StringPtr("csv")
				createScanReportOptionsModel.ScopeID = core.StringPtr("132009ff-b982-412e-a110-ad8797e10f84")
				createScanReportOptionsModel.SubscopeID = core.StringPtr("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")
				createScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateScanReportWithContext(ctx, createScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateScanReportWithContext(ctx, createScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScanReportPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"id": "ID"}`)
				}))
			})
			It(`Invoke CreateScanReport successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateScanReport(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateScanReportOptions model
				createScanReportOptionsModel := new(securityandcompliancecenterapiv3.CreateScanReportOptions)
				createScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanReportOptionsModel.ReportID = core.StringPtr("testString")
				createScanReportOptionsModel.Format = core.StringPtr("csv")
				createScanReportOptionsModel.ScopeID = core.StringPtr("132009ff-b982-412e-a110-ad8797e10f84")
				createScanReportOptionsModel.SubscopeID = core.StringPtr("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")
				createScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateScanReport with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateScanReportOptions model
				createScanReportOptionsModel := new(securityandcompliancecenterapiv3.CreateScanReportOptions)
				createScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanReportOptionsModel.ReportID = core.StringPtr("testString")
				createScanReportOptionsModel.Format = core.StringPtr("csv")
				createScanReportOptionsModel.ScopeID = core.StringPtr("132009ff-b982-412e-a110-ad8797e10f84")
				createScanReportOptionsModel.SubscopeID = core.StringPtr("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")
				createScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateScanReportOptions model with no property values
				createScanReportOptionsModelNew := new(securityandcompliancecenterapiv3.CreateScanReportOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke CreateScanReport successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateScanReportOptions model
				createScanReportOptionsModel := new(securityandcompliancecenterapiv3.CreateScanReportOptions)
				createScanReportOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanReportOptionsModel.ReportID = core.StringPtr("testString")
				createScanReportOptionsModel.Format = core.StringPtr("csv")
				createScanReportOptionsModel.ScopeID = core.StringPtr("132009ff-b982-412e-a110-ad8797e10f84")
				createScanReportOptionsModel.SubscopeID = core.StringPtr("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")
				createScanReportOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateScanReport(createScanReportOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateScan(createScanOptions *CreateScanOptions) - Operation response error`, func() {
		createScanPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scans"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScanPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateScan with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateScanOptions model
				createScanOptionsModel := new(securityandcompliancecenterapiv3.CreateScanOptions)
				createScanOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanOptionsModel.AttachmentID = core.StringPtr("testString")
				createScanOptionsModel.AccountID = core.StringPtr("testString")
				createScanOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateScan(createScanOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateScan(createScanOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateScan(createScanOptions *CreateScanOptions)`, func() {
		createScanPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/scans"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScanPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "account_id": "AccountID", "attachment_id": "AttachmentID", "report_id": "ReportID", "status": "Status", "last_scan_time": "2019-01-01T12:00:00.000Z", "next_scan_time": "2019-01-01T12:00:00.000Z", "scan_type": "ScanType", "occurence": 9}`)
				}))
			})
			It(`Invoke CreateScan successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the CreateScanOptions model
				createScanOptionsModel := new(securityandcompliancecenterapiv3.CreateScanOptions)
				createScanOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanOptionsModel.AttachmentID = core.StringPtr("testString")
				createScanOptionsModel.AccountID = core.StringPtr("testString")
				createScanOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateScanWithContext(ctx, createScanOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateScan(createScanOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateScanWithContext(ctx, createScanOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createScanPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["account_id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"id": "ID", "account_id": "AccountID", "attachment_id": "AttachmentID", "report_id": "ReportID", "status": "Status", "last_scan_time": "2019-01-01T12:00:00.000Z", "next_scan_time": "2019-01-01T12:00:00.000Z", "scan_type": "ScanType", "occurence": 9}`)
				}))
			})
			It(`Invoke CreateScan successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateScan(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateScanOptions model
				createScanOptionsModel := new(securityandcompliancecenterapiv3.CreateScanOptions)
				createScanOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanOptionsModel.AttachmentID = core.StringPtr("testString")
				createScanOptionsModel.AccountID = core.StringPtr("testString")
				createScanOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateScan(createScanOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateScan with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateScanOptions model
				createScanOptionsModel := new(securityandcompliancecenterapiv3.CreateScanOptions)
				createScanOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanOptionsModel.AttachmentID = core.StringPtr("testString")
				createScanOptionsModel.AccountID = core.StringPtr("testString")
				createScanOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateScan(createScanOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateScanOptions model with no property values
				createScanOptionsModelNew := new(securityandcompliancecenterapiv3.CreateScanOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateScan(createScanOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateScan successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the CreateScanOptions model
				createScanOptionsModel := new(securityandcompliancecenterapiv3.CreateScanOptions)
				createScanOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanOptionsModel.AttachmentID = core.StringPtr("testString")
				createScanOptionsModel.AccountID = core.StringPtr("testString")
				createScanOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateScan(createScanOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRules(listRulesOptions *ListRulesOptions) - Operation response error`, func() {
		listRulesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"system_defined"}))
					Expect(req.URL.Query()["search"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["service_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"updated_on"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRules with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListRulesOptions model
				listRulesOptionsModel := new(securityandcompliancecenterapiv3.ListRulesOptions)
				listRulesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listRulesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRulesOptionsModel.Start = core.StringPtr("testString")
				listRulesOptionsModel.Type = core.StringPtr("system_defined")
				listRulesOptionsModel.Search = core.StringPtr("testString")
				listRulesOptionsModel.ServiceName = core.StringPtr("testString")
				listRulesOptionsModel.Sort = core.StringPtr("updated_on")
				listRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListRules(listRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListRules(listRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRules(listRulesOptions *ListRulesOptions)`, func() {
		listRulesPath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"system_defined"}))
					Expect(req.URL.Query()["search"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["service_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"updated_on"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "rules": [{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}]}`)
				}))
			})
			It(`Invoke ListRules successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListRulesOptions model
				listRulesOptionsModel := new(securityandcompliancecenterapiv3.ListRulesOptions)
				listRulesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listRulesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRulesOptionsModel.Start = core.StringPtr("testString")
				listRulesOptionsModel.Type = core.StringPtr("system_defined")
				listRulesOptionsModel.Search = core.StringPtr("testString")
				listRulesOptionsModel.ServiceName = core.StringPtr("testString")
				listRulesOptionsModel.Sort = core.StringPtr("updated_on")
				listRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListRulesWithContext(ctx, listRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListRules(listRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListRulesWithContext(ctx, listRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(10))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["type"]).To(Equal([]string{"system_defined"}))
					Expect(req.URL.Query()["search"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["service_name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"updated_on"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"limit": 50, "total_count": 230, "first": {"href": "Href"}, "next": {"href": "Href", "start": "Start"}, "rules": [{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}]}`)
				}))
			})
			It(`Invoke ListRules successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRulesOptions model
				listRulesOptionsModel := new(securityandcompliancecenterapiv3.ListRulesOptions)
				listRulesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listRulesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRulesOptionsModel.Start = core.StringPtr("testString")
				listRulesOptionsModel.Type = core.StringPtr("system_defined")
				listRulesOptionsModel.Search = core.StringPtr("testString")
				listRulesOptionsModel.ServiceName = core.StringPtr("testString")
				listRulesOptionsModel.Sort = core.StringPtr("updated_on")
				listRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListRules(listRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListRules with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListRulesOptions model
				listRulesOptionsModel := new(securityandcompliancecenterapiv3.ListRulesOptions)
				listRulesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listRulesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRulesOptionsModel.Start = core.StringPtr("testString")
				listRulesOptionsModel.Type = core.StringPtr("system_defined")
				listRulesOptionsModel.Search = core.StringPtr("testString")
				listRulesOptionsModel.ServiceName = core.StringPtr("testString")
				listRulesOptionsModel.Sort = core.StringPtr("updated_on")
				listRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListRules(listRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListRulesOptions model with no property values
				listRulesOptionsModelNew := new(securityandcompliancecenterapiv3.ListRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ListRules(listRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListRules successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListRulesOptions model
				listRulesOptionsModel := new(securityandcompliancecenterapiv3.ListRulesOptions)
				listRulesOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				listRulesOptionsModel.Limit = core.Int64Ptr(int64(10))
				listRulesOptionsModel.Start = core.StringPtr("testString")
				listRulesOptionsModel.Type = core.StringPtr("system_defined")
				listRulesOptionsModel.Search = core.StringPtr("testString")
				listRulesOptionsModel.ServiceName = core.StringPtr("testString")
				listRulesOptionsModel.Sort = core.StringPtr("updated_on")
				listRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListRules(listRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Test pagination helper method on response`, func() {
			It(`Invoke GetNextStart successfully`, func() {
				responseObject := new(securityandcompliancecenterapiv3.RuleCollection)
				nextObject := new(securityandcompliancecenterapiv3.PageHRefNext)
				nextObject.Start = core.StringPtr("abc-123")
				responseObject.Next = nextObject

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(Equal(core.StringPtr("abc-123")))
			})
			It(`Invoke GetNextStart without a "Next" property in the response`, func() {
				responseObject := new(securityandcompliancecenterapiv3.RuleCollection)

				value, err := responseObject.GetNextStart()
				Expect(err).To(BeNil())
				Expect(value).To(BeNil())
			})
		})
		Context(`Using mock server endpoint - paginated response`, func() {
			BeforeEach(func() {
				var requestNumber int = 0
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRulesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					requestNumber++
					if requestNumber == 1 {
						fmt.Fprintf(res, "%s", `{"next":{"start":"1"},"total_count":2,"limit":1,"rules":[{"created_on":"2019-01-01T12:00:00.000Z","created_by":"CreatedBy","updated_on":"2019-01-01T12:00:00.000Z","updated_by":"UpdatedBy","id":"ID","account_id":"AccountID","description":"Description","type":"user_defined","version":"Version","import":{"parameters":[{"name":"Name","display_name":"DisplayName","description":"Description","type":"string"}]},"target":{"service_name":"ServiceName","service_display_name":"ServiceDisplayName","resource_kind":"ResourceKind","additional_target_attributes":[{"name":"Name","operator":"string_equals","value":"anyValue"}]},"required_config":{"description":"Description","property":"Property","operator":"string_equals","value":"anyValue"},"labels":["Labels"]}]}`)
					} else if requestNumber == 2 {
						fmt.Fprintf(res, "%s", `{"total_count":2,"limit":1,"rules":[{"created_on":"2019-01-01T12:00:00.000Z","created_by":"CreatedBy","updated_on":"2019-01-01T12:00:00.000Z","updated_by":"UpdatedBy","id":"ID","account_id":"AccountID","description":"Description","type":"user_defined","version":"Version","import":{"parameters":[{"name":"Name","display_name":"DisplayName","description":"Description","type":"string"}]},"target":{"service_name":"ServiceName","service_display_name":"ServiceDisplayName","resource_kind":"ResourceKind","additional_target_attributes":[{"name":"Name","operator":"string_equals","value":"anyValue"}]},"required_config":{"description":"Description","property":"Property","operator":"string_equals","value":"anyValue"},"labels":["Labels"]}]}`)
					} else {
						res.WriteHeader(400)
					}
				}))
			})
			It(`Use RulesPager.GetNext successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listRulesOptionsModel := &securityandcompliancecenterapiv3.ListRulesOptions{
					InstanceID:  core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					Limit:       core.Int64Ptr(int64(10)),
					Type:        core.StringPtr("system_defined"),
					Search:      core.StringPtr("testString"),
					ServiceName: core.StringPtr("testString"),
					Sort:        core.StringPtr("updated_on"),
				}

				pager, err := securityAndComplianceCenterService.NewRulesPager(listRulesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				var allResults []securityandcompliancecenterapiv3.Rule
				for pager.HasNext() {
					nextPage, err := pager.GetNext()
					Expect(err).To(BeNil())
					Expect(nextPage).ToNot(BeNil())
					allResults = append(allResults, nextPage...)
				}
				Expect(len(allResults)).To(Equal(2))
			})
			It(`Use RulesPager.GetAll successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				listRulesOptionsModel := &securityandcompliancecenterapiv3.ListRulesOptions{
					InstanceID:  core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940"),
					Limit:       core.Int64Ptr(int64(10)),
					Type:        core.StringPtr("system_defined"),
					Search:      core.StringPtr("testString"),
					ServiceName: core.StringPtr("testString"),
					Sort:        core.StringPtr("updated_on"),
				}

				pager, err := securityAndComplianceCenterService.NewRulesPager(listRulesOptionsModel)
				Expect(err).To(BeNil())
				Expect(pager).ToNot(BeNil())

				allResults, err := pager.GetAll()
				Expect(err).To(BeNil())
				Expect(allResults).ToNot(BeNil())
				Expect(len(allResults)).To(Equal(2))
			})
		})
	})
	Describe(`CreateRule(createRuleOptions *CreateRuleOptions) - Operation response error`, func() {
		createRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRulePath))
					Expect(req.Method).To(Equal("POST"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateRule with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-east")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the CreateRuleOptions model
				createRuleOptionsModel := new(securityandcompliancecenterapiv3.CreateRuleOptions)
				createRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createRuleOptionsModel.Description = core.StringPtr("Example rule")
				createRuleOptionsModel.Target = ruleTargetPrototypeModel
				createRuleOptionsModel.RequiredConfig = requiredConfigModel
				createRuleOptionsModel.Version = core.StringPtr("1.0.0")
				createRuleOptionsModel.Import = importModel
				createRuleOptionsModel.Labels = []string{}
				createRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.CreateRule(createRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.CreateRule(createRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateRule(createRuleOptions *CreateRuleOptions)`, func() {
		createRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke CreateRule successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-east")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the CreateRuleOptions model
				createRuleOptionsModel := new(securityandcompliancecenterapiv3.CreateRuleOptions)
				createRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createRuleOptionsModel.Description = core.StringPtr("Example rule")
				createRuleOptionsModel.Target = ruleTargetPrototypeModel
				createRuleOptionsModel.RequiredConfig = requiredConfigModel
				createRuleOptionsModel.Version = core.StringPtr("1.0.0")
				createRuleOptionsModel.Import = importModel
				createRuleOptionsModel.Labels = []string{}
				createRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.CreateRuleWithContext(ctx, createRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.CreateRule(createRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.CreateRuleWithContext(ctx, createRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke CreateRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.CreateRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-east")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the CreateRuleOptions model
				createRuleOptionsModel := new(securityandcompliancecenterapiv3.CreateRuleOptions)
				createRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createRuleOptionsModel.Description = core.StringPtr("Example rule")
				createRuleOptionsModel.Target = ruleTargetPrototypeModel
				createRuleOptionsModel.RequiredConfig = requiredConfigModel
				createRuleOptionsModel.Version = core.StringPtr("1.0.0")
				createRuleOptionsModel.Import = importModel
				createRuleOptionsModel.Labels = []string{}
				createRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.CreateRule(createRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke CreateRule with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-east")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the CreateRuleOptions model
				createRuleOptionsModel := new(securityandcompliancecenterapiv3.CreateRuleOptions)
				createRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createRuleOptionsModel.Description = core.StringPtr("Example rule")
				createRuleOptionsModel.Target = ruleTargetPrototypeModel
				createRuleOptionsModel.RequiredConfig = requiredConfigModel
				createRuleOptionsModel.Version = core.StringPtr("1.0.0")
				createRuleOptionsModel.Import = importModel
				createRuleOptionsModel.Labels = []string{}
				createRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.CreateRule(createRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateRuleOptions model with no property values
				createRuleOptionsModelNew := new(securityandcompliancecenterapiv3.CreateRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.CreateRule(createRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-east")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the CreateRuleOptions model
				createRuleOptionsModel := new(securityandcompliancecenterapiv3.CreateRuleOptions)
				createRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				createRuleOptionsModel.Description = core.StringPtr("Example rule")
				createRuleOptionsModel.Target = ruleTargetPrototypeModel
				createRuleOptionsModel.RequiredConfig = requiredConfigModel
				createRuleOptionsModel.Version = core.StringPtr("1.0.0")
				createRuleOptionsModel.Import = importModel
				createRuleOptionsModel.Labels = []string{}
				createRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.CreateRule(createRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRule(getRuleOptions *GetRuleOptions) - Operation response error`, func() {
		getRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRulePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRule with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetRuleOptions model
				getRuleOptionsModel := new(securityandcompliancecenterapiv3.GetRuleOptions)
				getRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetRule(getRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetRule(getRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRule(getRuleOptions *GetRuleOptions)`, func() {
		getRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRulePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke GetRule successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetRuleOptions model
				getRuleOptionsModel := new(securityandcompliancecenterapiv3.GetRuleOptions)
				getRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetRuleWithContext(ctx, getRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetRule(getRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetRuleWithContext(ctx, getRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRulePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke GetRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRuleOptions model
				getRuleOptionsModel := new(securityandcompliancecenterapiv3.GetRuleOptions)
				getRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetRule(getRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetRule with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetRuleOptions model
				getRuleOptionsModel := new(securityandcompliancecenterapiv3.GetRuleOptions)
				getRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetRule(getRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRuleOptions model with no property values
				getRuleOptionsModelNew := new(securityandcompliancecenterapiv3.GetRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetRule(getRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetRuleOptions model
				getRuleOptionsModel := new(securityandcompliancecenterapiv3.GetRuleOptions)
				getRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				getRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetRule(getRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceRule(replaceRuleOptions *ReplaceRuleOptions) - Operation response error`, func() {
		replaceRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceRulePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.Header["If-Match"]).ToNot(BeNil())
					Expect(req.Header["If-Match"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceRule with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-south")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the ReplaceRuleOptions model
				replaceRuleOptionsModel := new(securityandcompliancecenterapiv3.ReplaceRuleOptions)
				replaceRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				replaceRuleOptionsModel.IfMatch = core.StringPtr("testString")
				replaceRuleOptionsModel.Description = core.StringPtr("Example rule")
				replaceRuleOptionsModel.Target = ruleTargetPrototypeModel
				replaceRuleOptionsModel.RequiredConfig = requiredConfigModel
				replaceRuleOptionsModel.Version = core.StringPtr("1.0.1")
				replaceRuleOptionsModel.Import = importModel
				replaceRuleOptionsModel.Labels = []string{}
				replaceRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceRule(replaceRuleOptions *ReplaceRuleOptions)`, func() {
		replaceRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceRulePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["If-Match"]).ToNot(BeNil())
					Expect(req.Header["If-Match"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke ReplaceRule successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-south")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the ReplaceRuleOptions model
				replaceRuleOptionsModel := new(securityandcompliancecenterapiv3.ReplaceRuleOptions)
				replaceRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				replaceRuleOptionsModel.IfMatch = core.StringPtr("testString")
				replaceRuleOptionsModel.Description = core.StringPtr("Example rule")
				replaceRuleOptionsModel.Target = ruleTargetPrototypeModel
				replaceRuleOptionsModel.RequiredConfig = requiredConfigModel
				replaceRuleOptionsModel.Version = core.StringPtr("1.0.1")
				replaceRuleOptionsModel.Import = importModel
				replaceRuleOptionsModel.Labels = []string{}
				replaceRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ReplaceRuleWithContext(ctx, replaceRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ReplaceRuleWithContext(ctx, replaceRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceRulePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.Header["If-Match"]).ToNot(BeNil())
					Expect(req.Header["If-Match"][0]).To(Equal(fmt.Sprintf("%v", "testString")))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "id": "ID", "account_id": "AccountID", "description": "Description", "type": "user_defined", "version": "Version", "import": {"parameters": [{"name": "Name", "display_name": "DisplayName", "description": "Description", "type": "string"}]}, "target": {"service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}]}, "required_config": {"description": "Description", "property": "Property", "operator": "string_equals", "value": "anyValue"}, "labels": ["Labels"]}`)
				}))
			})
			It(`Invoke ReplaceRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ReplaceRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-south")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the ReplaceRuleOptions model
				replaceRuleOptionsModel := new(securityandcompliancecenterapiv3.ReplaceRuleOptions)
				replaceRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				replaceRuleOptionsModel.IfMatch = core.StringPtr("testString")
				replaceRuleOptionsModel.Description = core.StringPtr("Example rule")
				replaceRuleOptionsModel.Target = ruleTargetPrototypeModel
				replaceRuleOptionsModel.RequiredConfig = requiredConfigModel
				replaceRuleOptionsModel.Version = core.StringPtr("1.0.1")
				replaceRuleOptionsModel.Import = importModel
				replaceRuleOptionsModel.Labels = []string{}
				replaceRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ReplaceRule with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-south")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the ReplaceRuleOptions model
				replaceRuleOptionsModel := new(securityandcompliancecenterapiv3.ReplaceRuleOptions)
				replaceRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				replaceRuleOptionsModel.IfMatch = core.StringPtr("testString")
				replaceRuleOptionsModel.Description = core.StringPtr("Example rule")
				replaceRuleOptionsModel.Target = ruleTargetPrototypeModel
				replaceRuleOptionsModel.RequiredConfig = requiredConfigModel
				replaceRuleOptionsModel.Version = core.StringPtr("1.0.1")
				replaceRuleOptionsModel.Import = importModel
				replaceRuleOptionsModel.Labels = []string{}
				replaceRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceRuleOptions model with no property values
				replaceRuleOptionsModelNew := new(securityandcompliancecenterapiv3.ReplaceRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ReplaceRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-south")

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}

				// Construct an instance of the ReplaceRuleOptions model
				replaceRuleOptionsModel := new(securityandcompliancecenterapiv3.ReplaceRuleOptions)
				replaceRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				replaceRuleOptionsModel.IfMatch = core.StringPtr("testString")
				replaceRuleOptionsModel.Description = core.StringPtr("Example rule")
				replaceRuleOptionsModel.Target = ruleTargetPrototypeModel
				replaceRuleOptionsModel.RequiredConfig = requiredConfigModel
				replaceRuleOptionsModel.Version = core.StringPtr("1.0.1")
				replaceRuleOptionsModel.Import = importModel
				replaceRuleOptionsModel.Labels = []string{}
				replaceRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ReplaceRule(replaceRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteRule(deleteRuleOptions *DeleteRuleOptions)`, func() {
		deleteRulePath := "/instances/acd7032c-15a3-484f-bf5b-67d41534d940/v3/rules/rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteRulePath))
					Expect(req.Method).To(Equal("DELETE"))

					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteRule successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := securityAndComplianceCenterService.DeleteRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteRuleOptions model
				deleteRuleOptionsModel := new(securityandcompliancecenterapiv3.DeleteRuleOptions)
				deleteRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				deleteRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = securityAndComplianceCenterService.DeleteRule(deleteRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteRule with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the DeleteRuleOptions model
				deleteRuleOptionsModel := new(securityandcompliancecenterapiv3.DeleteRuleOptions)
				deleteRuleOptionsModel.InstanceID = core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteRuleOptionsModel.RuleID = core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				deleteRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := securityAndComplianceCenterService.DeleteRule(deleteRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteRuleOptions model with no property values
				deleteRuleOptionsModelNew := new(securityandcompliancecenterapiv3.DeleteRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = securityAndComplianceCenterService.DeleteRule(deleteRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListServices(listServicesOptions *ListServicesOptions) - Operation response error`, func() {
		listServicesPath := "/v3/services"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesPath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListServices with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListServicesOptions model
				listServicesOptionsModel := new(securityandcompliancecenterapiv3.ListServicesOptions)
				listServicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.ListServices(listServicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.ListServices(listServicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListServices(listServicesOptions *ListServicesOptions)`, func() {
		listServicesPath := "/v3/services"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesPath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"services": [{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "description": "Description", "monitoring_enabled": false, "enforcement_enabled": true, "service_listing_enabled": false, "config_information_point": {"type": "Type", "endpoints": [{"host": "Host", "path": "Path", "region": "Region", "advisory_call_limit": 17}]}, "supported_configs": [{"resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}], "properties": [{"name": "Name", "description": "Description", "type": "string"}], "description": "Description", "cip_requires_service_instance": true, "resource_group_support": true, "tagging_support": true, "inherit_tags": false}]}]}`)
				}))
			})
			It(`Invoke ListServices successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the ListServicesOptions model
				listServicesOptionsModel := new(securityandcompliancecenterapiv3.ListServicesOptions)
				listServicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.ListServicesWithContext(ctx, listServicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.ListServices(listServicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.ListServicesWithContext(ctx, listServicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listServicesPath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"services": [{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "description": "Description", "monitoring_enabled": false, "enforcement_enabled": true, "service_listing_enabled": false, "config_information_point": {"type": "Type", "endpoints": [{"host": "Host", "path": "Path", "region": "Region", "advisory_call_limit": 17}]}, "supported_configs": [{"resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}], "properties": [{"name": "Name", "description": "Description", "type": "string"}], "description": "Description", "cip_requires_service_instance": true, "resource_group_support": true, "tagging_support": true, "inherit_tags": false}]}]}`)
				}))
			})
			It(`Invoke ListServices successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.ListServices(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListServicesOptions model
				listServicesOptionsModel := new(securityandcompliancecenterapiv3.ListServicesOptions)
				listServicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.ListServices(listServicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke ListServices with error: Operation request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListServicesOptions model
				listServicesOptionsModel := new(securityandcompliancecenterapiv3.ListServicesOptions)
				listServicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.ListServices(listServicesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListServices successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the ListServicesOptions model
				listServicesOptionsModel := new(securityandcompliancecenterapiv3.ListServicesOptions)
				listServicesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.ListServices(listServicesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetService(getServiceOptions *GetServiceOptions) - Operation response error`, func() {
		getServicePath := "/v3/services/cloud-object-storage"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getServicePath))
					Expect(req.Method).To(Equal("GET"))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprint(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetService with error: Operation response processing error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetServiceOptions model
				getServiceOptionsModel := new(securityandcompliancecenterapiv3.GetServiceOptions)
				getServiceOptionsModel.ServicesName = core.StringPtr("cloud-object-storage")
				getServiceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := securityAndComplianceCenterService.GetService(getServiceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				securityAndComplianceCenterService.EnableRetries(0, 0)
				result, response, operationErr = securityAndComplianceCenterService.GetService(getServiceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetService(getServiceOptions *GetServiceOptions)`, func() {
		getServicePath := "/v3/services/cloud-object-storage"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getServicePath))
					Expect(req.Method).To(Equal("GET"))

					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "description": "Description", "monitoring_enabled": false, "enforcement_enabled": true, "service_listing_enabled": false, "config_information_point": {"type": "Type", "endpoints": [{"host": "Host", "path": "Path", "region": "Region", "advisory_call_limit": 17}]}, "supported_configs": [{"resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}], "properties": [{"name": "Name", "description": "Description", "type": "string"}], "description": "Description", "cip_requires_service_instance": true, "resource_group_support": true, "tagging_support": true, "inherit_tags": false}]}`)
				}))
			})
			It(`Invoke GetService successfully with retries`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())
				securityAndComplianceCenterService.EnableRetries(0, 0)

				// Construct an instance of the GetServiceOptions model
				getServiceOptionsModel := new(securityandcompliancecenterapiv3.GetServiceOptions)
				getServiceOptionsModel.ServicesName = core.StringPtr("cloud-object-storage")
				getServiceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := securityAndComplianceCenterService.GetServiceWithContext(ctx, getServiceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				securityAndComplianceCenterService.DisableRetries()
				result, response, operationErr := securityAndComplianceCenterService.GetService(getServiceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = securityAndComplianceCenterService.GetServiceWithContext(ctx, getServiceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getServicePath))
					Expect(req.Method).To(Equal("GET"))

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_on": "2019-01-01T12:00:00.000Z", "created_by": "CreatedBy", "updated_on": "2019-01-01T12:00:00.000Z", "updated_by": "UpdatedBy", "service_name": "ServiceName", "service_display_name": "ServiceDisplayName", "description": "Description", "monitoring_enabled": false, "enforcement_enabled": true, "service_listing_enabled": false, "config_information_point": {"type": "Type", "endpoints": [{"host": "Host", "path": "Path", "region": "Region", "advisory_call_limit": 17}]}, "supported_configs": [{"resource_kind": "ResourceKind", "additional_target_attributes": [{"name": "Name", "operator": "string_equals", "value": "anyValue"}], "properties": [{"name": "Name", "description": "Description", "type": "string"}], "description": "Description", "cip_requires_service_instance": true, "resource_group_support": true, "tagging_support": true, "inherit_tags": false}]}`)
				}))
			})
			It(`Invoke GetService successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := securityAndComplianceCenterService.GetService(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetServiceOptions model
				getServiceOptionsModel := new(securityandcompliancecenterapiv3.GetServiceOptions)
				getServiceOptionsModel.ServicesName = core.StringPtr("cloud-object-storage")
				getServiceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = securityAndComplianceCenterService.GetService(getServiceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())
			})
			It(`Invoke GetService with error: Operation validation and request error`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetServiceOptions model
				getServiceOptionsModel := new(securityandcompliancecenterapiv3.GetServiceOptions)
				getServiceOptionsModel.ServicesName = core.StringPtr("cloud-object-storage")
				getServiceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := securityAndComplianceCenterService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := securityAndComplianceCenterService.GetService(getServiceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetServiceOptions model with no property values
				getServiceOptionsModelNew := new(securityandcompliancecenterapiv3.GetServiceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = securityAndComplianceCenterService.GetService(getServiceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetService successfully`, func() {
				securityAndComplianceCenterService, serviceErr := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
				})
				Expect(serviceErr).To(BeNil())
				Expect(securityAndComplianceCenterService).ToNot(BeNil())

				// Construct an instance of the GetServiceOptions model
				getServiceOptionsModel := new(securityandcompliancecenterapiv3.GetServiceOptions)
				getServiceOptionsModel.ServicesName = core.StringPtr("cloud-object-storage")
				getServiceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := securityAndComplianceCenterService.GetService(getServiceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			securityAndComplianceCenterService, _ := securityandcompliancecenterapiv3.NewSecurityAndComplianceCenterV3(&securityandcompliancecenterapiv3.SecurityAndComplianceCenterApiV3Options{
				URL:           "http://securityandcompliancecenterapiv3modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
			})
			It(`Invoke NewCompareProfilesOptions successfully`, func() {
				// Construct an instance of the CompareProfilesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				compareProfilesOptionsModel := securityAndComplianceCenterService.NewCompareProfilesOptions(instanceID, profileID)
				compareProfilesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				compareProfilesOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				compareProfilesOptionsModel.SetAccountID("testString")
				compareProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(compareProfilesOptionsModel).ToNot(BeNil())
				Expect(compareProfilesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(compareProfilesOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(compareProfilesOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(compareProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewControlPrototype successfully`, func() {
				controlName := "testString"
				controlCategory := "testString"
				controlRequirement := true
				controlSpecifications := []securityandcompliancecenterapiv3.ControlSpecificationPrototype{}
				_model, err := securityAndComplianceCenterService.NewControlPrototype(controlName, controlCategory, controlRequirement, controlSpecifications)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCreateCustomControlLibraryOptions successfully`, func() {
				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.AssessmentPrototype)
				Expect(assessmentPrototypeModel).ToNot(BeNil())
				assessmentPrototypeModel.AssessmentID = core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("This rule will check on regulation")
				Expect(assessmentPrototypeModel.AssessmentID).To(Equal(core.StringPtr("rule-d1bd9f3f-bee1-46c5-9533-da8bba9eed4e")))
				Expect(assessmentPrototypeModel.AssessmentDescription).To(Equal(core.StringPtr("This rule will check on regulation")))

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecificationPrototype)
				Expect(controlSpecificationPrototypeModel).ToNot(BeNil())
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("apprapp")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("This field is used to describe a control specification")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}
				Expect(controlSpecificationPrototypeModel.ComponentID).To(Equal(core.StringPtr("apprapp")))
				Expect(controlSpecificationPrototypeModel.Environment).To(Equal(core.StringPtr("ibm-cloud")))
				Expect(controlSpecificationPrototypeModel.Description).To(Equal(core.StringPtr("This field is used to describe a control specification")))
				Expect(controlSpecificationPrototypeModel.Assessments).To(Equal([]securityandcompliancecenterapiv3.AssessmentPrototype{*assessmentPrototypeModel}))

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				Expect(controlDocModel).ToNot(BeNil())
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")
				Expect(controlDocModel.ControlDocsID).To(Equal(core.StringPtr("testString")))
				Expect(controlDocModel.ControlDocsType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.ControlPrototype)
				Expect(controlPrototypeModel).ToNot(BeNil())
				controlPrototypeModel.ControlName = core.StringPtr("security")
				controlPrototypeModel.ControlDescription = core.StringPtr("This is a description of a control")
				controlPrototypeModel.ControlCategory = core.StringPtr("test-control")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("disabled")
				Expect(controlPrototypeModel.ControlName).To(Equal(core.StringPtr("security")))
				Expect(controlPrototypeModel.ControlDescription).To(Equal(core.StringPtr("This is a description of a control")))
				Expect(controlPrototypeModel.ControlCategory).To(Equal(core.StringPtr("test-control")))
				Expect(controlPrototypeModel.ControlRequirement).To(Equal(core.BoolPtr(true)))
				Expect(controlPrototypeModel.ControlParent).To(Equal(core.StringPtr("testString")))
				Expect(controlPrototypeModel.ControlSpecifications).To(Equal([]securityandcompliancecenterapiv3.ControlSpecificationPrototype{*controlSpecificationPrototypeModel}))
				Expect(controlPrototypeModel.ControlDocs).To(Equal(controlDocModel))
				Expect(controlPrototypeModel.Status).To(Equal(core.StringPtr("disabled")))

				// Construct an instance of the CreateCustomControlLibraryOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				createCustomControlLibraryOptionsControlLibraryName := "custom control library from SDK"
				createCustomControlLibraryOptionsControlLibraryDescription := "This is a custom control library made from the SDK test framework"
				createCustomControlLibraryOptionsControlLibraryType := "custom"
				createCustomControlLibraryOptionsControlLibraryVersion := "0.0.1"
				createCustomControlLibraryOptionsControls := []securityandcompliancecenterapiv3.ControlPrototype{}
				createCustomControlLibraryOptionsModel := securityAndComplianceCenterService.NewCreateCustomControlLibraryOptions(instanceID, createCustomControlLibraryOptionsControlLibraryName, createCustomControlLibraryOptionsControlLibraryDescription, createCustomControlLibraryOptionsControlLibraryType, createCustomControlLibraryOptionsControlLibraryVersion, createCustomControlLibraryOptionsControls)
				createCustomControlLibraryOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createCustomControlLibraryOptionsModel.SetControlLibraryName("custom control library from SDK")
				createCustomControlLibraryOptionsModel.SetControlLibraryDescription("This is a custom control library made from the SDK test framework")
				createCustomControlLibraryOptionsModel.SetControlLibraryType("custom")
				createCustomControlLibraryOptionsModel.SetControlLibraryVersion("0.0.1")
				createCustomControlLibraryOptionsModel.SetControls([]securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel})
				createCustomControlLibraryOptionsModel.SetAccountID("testString")
				createCustomControlLibraryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createCustomControlLibraryOptionsModel).ToNot(BeNil())
				Expect(createCustomControlLibraryOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createCustomControlLibraryOptionsModel.ControlLibraryName).To(Equal(core.StringPtr("custom control library from SDK")))
				Expect(createCustomControlLibraryOptionsModel.ControlLibraryDescription).To(Equal(core.StringPtr("This is a custom control library made from the SDK test framework")))
				Expect(createCustomControlLibraryOptionsModel.ControlLibraryType).To(Equal(core.StringPtr("custom")))
				Expect(createCustomControlLibraryOptionsModel.ControlLibraryVersion).To(Equal(core.StringPtr("0.0.1")))
				Expect(createCustomControlLibraryOptionsModel.Controls).To(Equal([]securityandcompliancecenterapiv3.ControlPrototype{*controlPrototypeModel}))
				Expect(createCustomControlLibraryOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(createCustomControlLibraryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateProfileAttachmentOptions successfully`, func() {
				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				Expect(parameterModel).ToNot(BeNil())
				parameterModel.AssessmentType = core.StringPtr("automated")
				parameterModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				parameterModel.ParameterName = core.StringPtr("tls_version")
				parameterModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				parameterModel.ParameterType = core.StringPtr("string_list")
				parameterModel.ParameterValue = core.StringPtr("['1.2', '1.3']")
				Expect(parameterModel.AssessmentType).To(Equal(core.StringPtr("automated")))
				Expect(parameterModel.AssessmentID).To(Equal(core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")))
				Expect(parameterModel.ParameterName).To(Equal(core.StringPtr("tls_version")))
				Expect(parameterModel.ParameterDisplayName).To(Equal(core.StringPtr("IBM Cloud Internet Services TLS version")))
				Expect(parameterModel.ParameterType).To(Equal(core.StringPtr("string_list")))
				Expect(parameterModel.ParameterValue).To(Equal(core.StringPtr("['1.2', '1.3']")))

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				Expect(attachmentNotificationsControlsModel).ToNot(BeNil())
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{}
				Expect(attachmentNotificationsControlsModel.ThresholdLimit).To(Equal(core.Int64Ptr(int64(15))))
				Expect(attachmentNotificationsControlsModel.FailedControlIds).To(Equal([]string{}))

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				Expect(attachmentNotificationsModel).ToNot(BeNil())
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel
				Expect(attachmentNotificationsModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(attachmentNotificationsModel.Controls).To(Equal(attachmentNotificationsControlsModel))

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				Expect(scopePropertyModel).ToNot(BeNil())
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")
				Expect(scopePropertyModel.Name).To(Equal(core.StringPtr("scope_id")))
				Expect(scopePropertyModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				Expect(multiCloudScopePayloadModel).ToNot(BeNil())
				multiCloudScopePayloadModel.ID = core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				Expect(multiCloudScopePayloadModel.ID).To(Equal(core.StringPtr("8baad3b5-2e69-4027-9967-efac19508e1c")))
				Expect(multiCloudScopePayloadModel.Environment).To(Equal(core.StringPtr("testString")))
				Expect(multiCloudScopePayloadModel.Properties).To(Equal([]securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}))

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				Expect(profileAttachmentBaseModel).ToNot(BeNil())
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")
				profileAttachmentBaseModel.Name = core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("disabled")
				Expect(profileAttachmentBaseModel.AttachmentParameters).To(Equal([]securityandcompliancecenterapiv3.Parameter{*parameterModel}))
				Expect(profileAttachmentBaseModel.Description).To(Equal(core.StringPtr("This is a profile attachment targeting IBM CIS Foundation using a SDK")))
				Expect(profileAttachmentBaseModel.Name).To(Equal(core.StringPtr("Profile Attachment for IBM CIS Foundation SDK test")))
				Expect(profileAttachmentBaseModel.Notifications).To(Equal(attachmentNotificationsModel))
				Expect(profileAttachmentBaseModel.Schedule).To(Equal(core.StringPtr("daily")))
				Expect(profileAttachmentBaseModel.Scope).To(Equal([]securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}))
				Expect(profileAttachmentBaseModel.Status).To(Equal(core.StringPtr("disabled")))

				// Construct an instance of the CreateProfileAttachmentOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				createProfileAttachmentOptionsModel := securityAndComplianceCenterService.NewCreateProfileAttachmentOptions(instanceID, profileID)
				createProfileAttachmentOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileAttachmentOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				createProfileAttachmentOptionsModel.SetAttachments([]securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel})
				createProfileAttachmentOptionsModel.SetAccountID("testString")
				createProfileAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createProfileAttachmentOptionsModel).ToNot(BeNil())
				Expect(createProfileAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createProfileAttachmentOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(createProfileAttachmentOptionsModel.Attachments).To(Equal([]securityandcompliancecenterapiv3.ProfileAttachmentBase{*profileAttachmentBaseModel}))
				Expect(createProfileAttachmentOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(createProfileAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateProfileOptions successfully`, func() {
				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				Expect(profileAssessmentPrototypeModel).ToNot(BeNil())
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				Expect(profileAssessmentPrototypeModel.AssessmentID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				Expect(profileControlSpecificationPrototypeModel).ToNot(BeNil())
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}
				Expect(profileControlSpecificationPrototypeModel.ControlSpecificationID).To(Equal(core.StringPtr("testString")))
				Expect(profileControlSpecificationPrototypeModel.Assessments).To(Equal([]securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}))

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				Expect(profileControlsPrototypeModel).ToNot(BeNil())
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")
				profileControlsPrototypeModel.ControlID = core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}
				Expect(profileControlsPrototypeModel.ControlLibraryID).To(Equal(core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")))
				Expect(profileControlsPrototypeModel.ControlID).To(Equal(core.StringPtr("2ce21ba3-0548-49a3-88e2-1122632218f4")))
				Expect(profileControlsPrototypeModel.ControlSpecifications).To(Equal([]securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}))

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				Expect(defaultParametersPrototypeModel).ToNot(BeNil())
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("automated")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("tls_version")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr(`["1.2","1.3"]`)
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("IBM Cloud Internet Services TLS version")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("string_list")
				Expect(defaultParametersPrototypeModel.AssessmentType).To(Equal(core.StringPtr("automated")))
				Expect(defaultParametersPrototypeModel.AssessmentID).To(Equal(core.StringPtr("rule-e16fcfea-fe21-4d30-a721-423611481fea")))
				Expect(defaultParametersPrototypeModel.ParameterName).To(Equal(core.StringPtr("tls_version")))
				Expect(defaultParametersPrototypeModel.ParameterDefaultValue).To(Equal(core.StringPtr(`["1.2","1.3"]`)))
				Expect(defaultParametersPrototypeModel.ParameterDisplayName).To(Equal(core.StringPtr("IBM Cloud Internet Services TLS version")))
				Expect(defaultParametersPrototypeModel.ParameterType).To(Equal(core.StringPtr("string_list")))

				// Construct an instance of the CreateProfileOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				createProfileOptionsModel := securityAndComplianceCenterService.NewCreateProfileOptions(instanceID)
				createProfileOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProfileOptionsModel.SetProfileName("Profile Example")
				createProfileOptionsModel.SetProfileDescription("This is a profile")
				createProfileOptionsModel.SetProfileVersion("1.0.0")
				createProfileOptionsModel.SetLatest(true)
				createProfileOptionsModel.SetVersionGroupLabel("testString")
				createProfileOptionsModel.SetControls([]securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel})
				createProfileOptionsModel.SetDefaultParameters([]securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel})
				createProfileOptionsModel.SetAccountID("testString")
				createProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createProfileOptionsModel).ToNot(BeNil())
				Expect(createProfileOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createProfileOptionsModel.ProfileName).To(Equal(core.StringPtr("Profile Example")))
				Expect(createProfileOptionsModel.ProfileDescription).To(Equal(core.StringPtr("This is a profile")))
				Expect(createProfileOptionsModel.ProfileVersion).To(Equal(core.StringPtr("1.0.0")))
				Expect(createProfileOptionsModel.Latest).To(Equal(core.BoolPtr(true)))
				Expect(createProfileOptionsModel.VersionGroupLabel).To(Equal(core.StringPtr("testString")))
				Expect(createProfileOptionsModel.Controls).To(Equal([]securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}))
				Expect(createProfileOptionsModel.DefaultParameters).To(Equal([]securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}))
				Expect(createProfileOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(createProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateProviderTypeInstanceOptions successfully`, func() {
				// Construct an instance of the CreateProviderTypeInstanceOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				providerTypeID := "testString"
				providerTypeInstanceName := "testString"
				createProviderTypeInstanceOptionsModel := securityAndComplianceCenterService.NewCreateProviderTypeInstanceOptions(instanceID, providerTypeID, providerTypeInstanceName)
				createProviderTypeInstanceOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createProviderTypeInstanceOptionsModel.SetProviderTypeID("testString")
				createProviderTypeInstanceOptionsModel.SetName("workload-protection-instance-1")
				createProviderTypeInstanceOptionsModel.SetAttributes(map[string]interface{}{"key1": "testString"})
				createProviderTypeInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createProviderTypeInstanceOptionsModel).ToNot(BeNil())
				Expect(createProviderTypeInstanceOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createProviderTypeInstanceOptionsModel.ProviderTypeID).To(Equal(core.StringPtr("testString")))
				Expect(createProviderTypeInstanceOptionsModel.Name).To(Equal(core.StringPtr("workload-protection-instance-1")))
				Expect(createProviderTypeInstanceOptionsModel.Attributes).To(Equal(map[string]interface{}{"key1": "testString"}))
				Expect(createProviderTypeInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateRuleOptions successfully`, func() {
				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				Expect(additionalTargetAttributeModel).ToNot(BeNil())
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-east")
				Expect(additionalTargetAttributeModel.Name).To(Equal(core.StringPtr("location")))
				Expect(additionalTargetAttributeModel.Operator).To(Equal(core.StringPtr("string_equals")))
				Expect(additionalTargetAttributeModel.Value).To(Equal(core.StringPtr("us-east")))

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				Expect(ruleTargetPrototypeModel).ToNot(BeNil())
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}
				Expect(ruleTargetPrototypeModel.ServiceName).To(Equal(core.StringPtr("cloud-object-storage")))
				Expect(ruleTargetPrototypeModel.ResourceKind).To(Equal(core.StringPtr("bucket")))
				Expect(ruleTargetPrototypeModel.AdditionalTargetAttributes).To(Equal([]securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}))

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				Expect(conditionItemModel).ToNot(BeNil())
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")
				Expect(conditionItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(conditionItemModel.Property).To(Equal(core.StringPtr("hard_quota")))
				Expect(conditionItemModel.Operator).To(Equal(core.StringPtr("num_equals")))
				Expect(conditionItemModel.Value).To(Equal(core.StringPtr("${hard_quota}")))

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				Expect(requiredConfigModel).ToNot(BeNil())
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}
				Expect(requiredConfigModel.Description).To(Equal(core.StringPtr("The Cloud Object Storage rule.")))
				Expect(requiredConfigModel.And).To(Equal([]securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}))

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				Expect(ruleParameterModel).ToNot(BeNil())
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")
				Expect(ruleParameterModel.Name).To(Equal(core.StringPtr("hard_quota")))
				Expect(ruleParameterModel.DisplayName).To(Equal(core.StringPtr("The Cloud Object Storage bucket quota.")))
				Expect(ruleParameterModel.Description).To(Equal(core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")))
				Expect(ruleParameterModel.Type).To(Equal(core.StringPtr("numeric")))

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				Expect(importModel).ToNot(BeNil())
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}
				Expect(importModel.Parameters).To(Equal([]securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}))

				// Construct an instance of the CreateRuleOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				createRuleOptionsDescription := "Example rule"
				var createRuleOptionsTarget *securityandcompliancecenterapiv3.RuleTargetPrototype = nil
				var createRuleOptionsRequiredConfig securityandcompliancecenterapiv3.RequiredConfigIntf = nil
				createRuleOptionsModel := securityAndComplianceCenterService.NewCreateRuleOptions(instanceID, createRuleOptionsDescription, createRuleOptionsTarget, createRuleOptionsRequiredConfig)
				createRuleOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createRuleOptionsModel.SetDescription("Example rule")
				createRuleOptionsModel.SetTarget(ruleTargetPrototypeModel)
				createRuleOptionsModel.SetRequiredConfig(requiredConfigModel)
				createRuleOptionsModel.SetVersion("1.0.0")
				createRuleOptionsModel.SetImport(importModel)
				createRuleOptionsModel.SetLabels([]string{})
				createRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createRuleOptionsModel).ToNot(BeNil())
				Expect(createRuleOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createRuleOptionsModel.Description).To(Equal(core.StringPtr("Example rule")))
				Expect(createRuleOptionsModel.Target).To(Equal(ruleTargetPrototypeModel))
				Expect(createRuleOptionsModel.RequiredConfig).To(Equal(requiredConfigModel))
				Expect(createRuleOptionsModel.Version).To(Equal(core.StringPtr("1.0.0")))
				Expect(createRuleOptionsModel.Import).To(Equal(importModel))
				Expect(createRuleOptionsModel.Labels).To(Equal([]string{}))
				Expect(createRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateScanOptions successfully`, func() {
				// Construct an instance of the CreateScanOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				createScanOptionsModel := securityAndComplianceCenterService.NewCreateScanOptions(instanceID)
				createScanOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanOptionsModel.SetAttachmentID("testString")
				createScanOptionsModel.SetAccountID("testString")
				createScanOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createScanOptionsModel).ToNot(BeNil())
				Expect(createScanOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createScanOptionsModel.AttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(createScanOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(createScanOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateScanReportOptions successfully`, func() {
				// Construct an instance of the CreateScanReportOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				createScanReportOptionsFormat := "csv"
				createScanReportOptionsModel := securityAndComplianceCenterService.NewCreateScanReportOptions(instanceID, reportID, createScanReportOptionsFormat)
				createScanReportOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScanReportOptionsModel.SetReportID("testString")
				createScanReportOptionsModel.SetFormat("csv")
				createScanReportOptionsModel.SetScopeID("132009ff-b982-412e-a110-ad8797e10f84")
				createScanReportOptionsModel.SetSubscopeID("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")
				createScanReportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createScanReportOptionsModel).ToNot(BeNil())
				Expect(createScanReportOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createScanReportOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(createScanReportOptionsModel.Format).To(Equal(core.StringPtr("csv")))
				Expect(createScanReportOptionsModel.ScopeID).To(Equal(core.StringPtr("132009ff-b982-412e-a110-ad8797e10f84")))
				Expect(createScanReportOptionsModel.SubscopeID).To(Equal(core.StringPtr("c7ddcbcc-6a43-4ab3-b6a7-b2d8f65cd54a")))
				Expect(createScanReportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateScopeOptions successfully`, func() {
				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				Expect(scopePropertyModel).ToNot(BeNil())
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("62ecf99b240144dea9125666249edfcb")
				Expect(scopePropertyModel.Name).To(Equal(core.StringPtr("scope_id")))
				Expect(scopePropertyModel.Value).To(Equal(core.StringPtr("62ecf99b240144dea9125666249edfcb")))

				// Construct an instance of the CreateScopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				createScopeOptionsModel := securityAndComplianceCenterService.NewCreateScopeOptions(instanceID)
				createScopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createScopeOptionsModel.SetName("Sample Scope")
				createScopeOptionsModel.SetDescription("The scope that is defined for IBM resources.")
				createScopeOptionsModel.SetEnvironment("ibm-cloud")
				createScopeOptionsModel.SetProperties([]securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel})
				createScopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createScopeOptionsModel).ToNot(BeNil())
				Expect(createScopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createScopeOptionsModel.Name).To(Equal(core.StringPtr("Sample Scope")))
				Expect(createScopeOptionsModel.Description).To(Equal(core.StringPtr("The scope that is defined for IBM resources.")))
				Expect(createScopeOptionsModel.Environment).To(Equal(core.StringPtr("ibm-cloud")))
				Expect(createScopeOptionsModel.Properties).To(Equal([]securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}))
				Expect(createScopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSubscopeOptions successfully`, func() {
				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				Expect(scopePropertyModel).ToNot(BeNil())
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("1234567")
				Expect(scopePropertyModel.Name).To(Equal(core.StringPtr("scope_id")))
				Expect(scopePropertyModel.Value).To(Equal(core.StringPtr("1234567")))

				// Construct an instance of the ScopePrototype model
				scopePrototypeModel := new(securityandcompliancecenterapiv3.ScopePrototype)
				Expect(scopePrototypeModel).ToNot(BeNil())
				scopePrototypeModel.Name = core.StringPtr("ibm subscope")
				scopePrototypeModel.Description = core.StringPtr("The subscope that is defined for IBM resources.")
				scopePrototypeModel.Environment = core.StringPtr("ibm-cloud")
				scopePrototypeModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				Expect(scopePrototypeModel.Name).To(Equal(core.StringPtr("ibm subscope")))
				Expect(scopePrototypeModel.Description).To(Equal(core.StringPtr("The subscope that is defined for IBM resources.")))
				Expect(scopePrototypeModel.Environment).To(Equal(core.StringPtr("ibm-cloud")))
				Expect(scopePrototypeModel.Properties).To(Equal([]securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}))

				// Construct an instance of the CreateSubscopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				createSubscopeOptionsModel := securityAndComplianceCenterService.NewCreateSubscopeOptions(instanceID, scopeID)
				createSubscopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createSubscopeOptionsModel.SetScopeID("testString")
				createSubscopeOptionsModel.SetSubscopes([]securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel})
				createSubscopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSubscopeOptionsModel).ToNot(BeNil())
				Expect(createSubscopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createSubscopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(createSubscopeOptionsModel.Subscopes).To(Equal([]securityandcompliancecenterapiv3.ScopePrototype{*scopePrototypeModel}))
				Expect(createSubscopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateTargetOptions successfully`, func() {
				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				Expect(accountModel).ToNot(BeNil())
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")
				Expect(accountModel.ID).To(Equal(core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")))
				Expect(accountModel.Name).To(Equal(core.StringPtr("NIST")))
				Expect(accountModel.Type).To(Equal(core.StringPtr("account_type")))

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				Expect(tagsModel).ToNot(BeNil())
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}
				Expect(tagsModel.User).To(Equal([]string{"testString"}))
				Expect(tagsModel.Access).To(Equal([]string{"testString"}))
				Expect(tagsModel.Service).To(Equal([]string{"testString"}))

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				Expect(resourceModel).ToNot(BeNil())
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")
				Expect(resourceModel.ReportID).To(Equal(core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")))
				Expect(resourceModel.HomeAccountID).To(Equal(core.StringPtr("2411ffdc16844b07b42521c3443f456d")))
				Expect(resourceModel.ID).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")))
				Expect(resourceModel.ResourceName).To(Equal(core.StringPtr("jeff's key")))
				Expect(resourceModel.Account).To(Equal(accountModel))
				Expect(resourceModel.ComponentID).To(Equal(core.StringPtr("cloud-object_storage")))
				Expect(resourceModel.ComponentName).To(Equal(core.StringPtr("cloud-object_storage")))
				Expect(resourceModel.Environment).To(Equal(core.StringPtr("ibm cloud")))
				Expect(resourceModel.Tags).To(Equal(tagsModel))
				Expect(resourceModel.Status).To(Equal(core.StringPtr("compliant")))
				Expect(resourceModel.TotalCount).To(Equal(core.Int64Ptr(int64(140))))
				Expect(resourceModel.PassCount).To(Equal(core.Int64Ptr(int64(123))))
				Expect(resourceModel.FailureCount).To(Equal(core.Int64Ptr(int64(12))))
				Expect(resourceModel.ErrorCount).To(Equal(core.Int64Ptr(int64(5))))
				Expect(resourceModel.SkippedCount).To(Equal(core.Int64Ptr(int64(7))))
				Expect(resourceModel.CompletedCount).To(Equal(core.Int64Ptr(int64(135))))
				Expect(resourceModel.ServiceName).To(Equal(core.StringPtr("pm-20")))
				Expect(resourceModel.InstanceCRN).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				Expect(credentialModel).ToNot(BeNil())
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}
				Expect(credentialModel.SecretCRN).To(Equal(core.StringPtr("dummy")))
				Expect(credentialModel.Resources).To(Equal([]securityandcompliancecenterapiv3.Resource{*resourceModel}))

				// Construct an instance of the CreateTargetOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				createTargetOptionsAccountID := "be200c80cabc456e91139e4152327823"
				createTargetOptionsTrustedProfileID := "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3"
				createTargetOptionsName := "Target accountA"
				createTargetOptionsModel := securityAndComplianceCenterService.NewCreateTargetOptions(instanceID, createTargetOptionsAccountID, createTargetOptionsTrustedProfileID, createTargetOptionsName)
				createTargetOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				createTargetOptionsModel.SetAccountID("be200c80cabc456e91139e4152327823")
				createTargetOptionsModel.SetTrustedProfileID("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				createTargetOptionsModel.SetName("Target accountA")
				createTargetOptionsModel.SetCredentials([]securityandcompliancecenterapiv3.Credential{*credentialModel})
				createTargetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createTargetOptionsModel).ToNot(BeNil())
				Expect(createTargetOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(createTargetOptionsModel.AccountID).To(Equal(core.StringPtr("be200c80cabc456e91139e4152327823")))
				Expect(createTargetOptionsModel.TrustedProfileID).To(Equal(core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")))
				Expect(createTargetOptionsModel.Name).To(Equal(core.StringPtr("Target accountA")))
				Expect(createTargetOptionsModel.Credentials).To(Equal([]securityandcompliancecenterapiv3.Credential{*credentialModel}))
				Expect(createTargetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCredential successfully`, func() {
				secretCRN := "testString"
				resources := []securityandcompliancecenterapiv3.Resource{}
				_model, err := securityAndComplianceCenterService.NewCredential(secretCRN, resources)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDeleteCustomControlLibraryOptions successfully`, func() {
				// Construct an instance of the DeleteCustomControlLibraryOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				controlLibraryID := "51ca566e-c559-412b-8d64-f05b57044c32"
				deleteCustomControlLibraryOptionsModel := securityAndComplianceCenterService.NewDeleteCustomControlLibraryOptions(instanceID, controlLibraryID)
				deleteCustomControlLibraryOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomControlLibraryOptionsModel.SetControlLibraryID("51ca566e-c559-412b-8d64-f05b57044c32")
				deleteCustomControlLibraryOptionsModel.SetAccountID("testString")
				deleteCustomControlLibraryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteCustomControlLibraryOptionsModel).ToNot(BeNil())
				Expect(deleteCustomControlLibraryOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteCustomControlLibraryOptionsModel.ControlLibraryID).To(Equal(core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")))
				Expect(deleteCustomControlLibraryOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCustomControlLibraryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteCustomProfileOptions successfully`, func() {
				// Construct an instance of the DeleteCustomProfileOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				deleteCustomProfileOptionsModel := securityAndComplianceCenterService.NewDeleteCustomProfileOptions(instanceID, profileID)
				deleteCustomProfileOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteCustomProfileOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				deleteCustomProfileOptionsModel.SetAccountID("testString")
				deleteCustomProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteCustomProfileOptionsModel).ToNot(BeNil())
				Expect(deleteCustomProfileOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteCustomProfileOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(deleteCustomProfileOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(deleteCustomProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteProfileAttachmentOptions successfully`, func() {
				// Construct an instance of the DeleteProfileAttachmentOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				attachmentID := "testString"
				deleteProfileAttachmentOptionsModel := securityAndComplianceCenterService.NewDeleteProfileAttachmentOptions(instanceID, profileID, attachmentID)
				deleteProfileAttachmentOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProfileAttachmentOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				deleteProfileAttachmentOptionsModel.SetAttachmentID("testString")
				deleteProfileAttachmentOptionsModel.SetAccountID("testString")
				deleteProfileAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteProfileAttachmentOptionsModel).ToNot(BeNil())
				Expect(deleteProfileAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteProfileAttachmentOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(deleteProfileAttachmentOptionsModel.AttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(deleteProfileAttachmentOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(deleteProfileAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteProviderTypeInstanceOptions successfully`, func() {
				// Construct an instance of the DeleteProviderTypeInstanceOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				providerTypeID := "testString"
				providerTypeInstanceID := "testString"
				deleteProviderTypeInstanceOptionsModel := securityAndComplianceCenterService.NewDeleteProviderTypeInstanceOptions(instanceID, providerTypeID, providerTypeInstanceID)
				deleteProviderTypeInstanceOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteProviderTypeInstanceOptionsModel.SetProviderTypeID("testString")
				deleteProviderTypeInstanceOptionsModel.SetProviderTypeInstanceID("testString")
				deleteProviderTypeInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteProviderTypeInstanceOptionsModel).ToNot(BeNil())
				Expect(deleteProviderTypeInstanceOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteProviderTypeInstanceOptionsModel.ProviderTypeID).To(Equal(core.StringPtr("testString")))
				Expect(deleteProviderTypeInstanceOptionsModel.ProviderTypeInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteProviderTypeInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteRuleOptions successfully`, func() {
				// Construct an instance of the DeleteRuleOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				ruleID := "rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
				deleteRuleOptionsModel := securityAndComplianceCenterService.NewDeleteRuleOptions(instanceID, ruleID)
				deleteRuleOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteRuleOptionsModel.SetRuleID("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				deleteRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteRuleOptionsModel).ToNot(BeNil())
				Expect(deleteRuleOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteRuleOptionsModel.RuleID).To(Equal(core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")))
				Expect(deleteRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteScopeOptions successfully`, func() {
				// Construct an instance of the DeleteScopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				deleteScopeOptionsModel := securityAndComplianceCenterService.NewDeleteScopeOptions(instanceID, scopeID)
				deleteScopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteScopeOptionsModel.SetScopeID("testString")
				deleteScopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteScopeOptionsModel).ToNot(BeNil())
				Expect(deleteScopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteScopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(deleteScopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSubscopeOptions successfully`, func() {
				// Construct an instance of the DeleteSubscopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				subscopeID := "testString"
				deleteSubscopeOptionsModel := securityAndComplianceCenterService.NewDeleteSubscopeOptions(instanceID, scopeID, subscopeID)
				deleteSubscopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteSubscopeOptionsModel.SetScopeID("testString")
				deleteSubscopeOptionsModel.SetSubscopeID("testString")
				deleteSubscopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSubscopeOptionsModel).ToNot(BeNil())
				Expect(deleteSubscopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteSubscopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubscopeOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubscopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteTargetOptions successfully`, func() {
				// Construct an instance of the DeleteTargetOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				targetID := "testString"
				deleteTargetOptionsModel := securityAndComplianceCenterService.NewDeleteTargetOptions(instanceID, targetID)
				deleteTargetOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				deleteTargetOptionsModel.SetTargetID("testString")
				deleteTargetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteTargetOptionsModel).ToNot(BeNil())
				Expect(deleteTargetOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(deleteTargetOptionsModel.TargetID).To(Equal(core.StringPtr("testString")))
				Expect(deleteTargetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetControlLibraryOptions successfully`, func() {
				// Construct an instance of the GetControlLibraryOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				controlLibraryID := "51ca566e-c559-412b-8d64-f05b57044c32"
				getControlLibraryOptionsModel := securityAndComplianceCenterService.NewGetControlLibraryOptions(instanceID, controlLibraryID)
				getControlLibraryOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getControlLibraryOptionsModel.SetControlLibraryID("51ca566e-c559-412b-8d64-f05b57044c32")
				getControlLibraryOptionsModel.SetAccountID("testString")
				getControlLibraryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getControlLibraryOptionsModel).ToNot(BeNil())
				Expect(getControlLibraryOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getControlLibraryOptionsModel.ControlLibraryID).To(Equal(core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")))
				Expect(getControlLibraryOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(getControlLibraryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLatestReportsOptions successfully`, func() {
				// Construct an instance of the GetLatestReportsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				getLatestReportsOptionsModel := securityAndComplianceCenterService.NewGetLatestReportsOptions(instanceID)
				getLatestReportsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getLatestReportsOptionsModel.SetSort("profile_name")
				getLatestReportsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLatestReportsOptionsModel).ToNot(BeNil())
				Expect(getLatestReportsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getLatestReportsOptionsModel.Sort).To(Equal(core.StringPtr("profile_name")))
				Expect(getLatestReportsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProfileAttachmentOptions successfully`, func() {
				// Construct an instance of the GetProfileAttachmentOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				attachmentID := "testString"
				getProfileAttachmentOptionsModel := securityAndComplianceCenterService.NewGetProfileAttachmentOptions(instanceID, profileID, attachmentID)
				getProfileAttachmentOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileAttachmentOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileAttachmentOptionsModel.SetAttachmentID("testString")
				getProfileAttachmentOptionsModel.SetAccountID("testString")
				getProfileAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProfileAttachmentOptionsModel).ToNot(BeNil())
				Expect(getProfileAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getProfileAttachmentOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(getProfileAttachmentOptionsModel.AttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(getProfileAttachmentOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(getProfileAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProfileOptions successfully`, func() {
				// Construct an instance of the GetProfileOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				getProfileOptionsModel := securityAndComplianceCenterService.NewGetProfileOptions(instanceID, profileID)
				getProfileOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProfileOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				getProfileOptionsModel.SetAccountID("testString")
				getProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProfileOptionsModel).ToNot(BeNil())
				Expect(getProfileOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getProfileOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(getProfileOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(getProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProviderTypeByIDOptions successfully`, func() {
				// Construct an instance of the GetProviderTypeByIDOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				providerTypeID := "testString"
				getProviderTypeByIDOptionsModel := securityAndComplianceCenterService.NewGetProviderTypeByIDOptions(instanceID, providerTypeID)
				getProviderTypeByIDOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeByIDOptionsModel.SetProviderTypeID("testString")
				getProviderTypeByIDOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProviderTypeByIDOptionsModel).ToNot(BeNil())
				Expect(getProviderTypeByIDOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getProviderTypeByIDOptionsModel.ProviderTypeID).To(Equal(core.StringPtr("testString")))
				Expect(getProviderTypeByIDOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetProviderTypeInstanceOptions successfully`, func() {
				// Construct an instance of the GetProviderTypeInstanceOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				providerTypeID := "testString"
				providerTypeInstanceID := "testString"
				getProviderTypeInstanceOptionsModel := securityAndComplianceCenterService.NewGetProviderTypeInstanceOptions(instanceID, providerTypeID, providerTypeInstanceID)
				getProviderTypeInstanceOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getProviderTypeInstanceOptionsModel.SetProviderTypeID("testString")
				getProviderTypeInstanceOptionsModel.SetProviderTypeInstanceID("testString")
				getProviderTypeInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getProviderTypeInstanceOptionsModel).ToNot(BeNil())
				Expect(getProviderTypeInstanceOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getProviderTypeInstanceOptionsModel.ProviderTypeID).To(Equal(core.StringPtr("testString")))
				Expect(getProviderTypeInstanceOptionsModel.ProviderTypeInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getProviderTypeInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportControlsOptions successfully`, func() {
				// Construct an instance of the GetReportControlsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				getReportControlsOptionsModel := securityAndComplianceCenterService.NewGetReportControlsOptions(instanceID, reportID)
				getReportControlsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportControlsOptionsModel.SetReportID("testString")
				getReportControlsOptionsModel.SetControlID("testString")
				getReportControlsOptionsModel.SetControlName("testString")
				getReportControlsOptionsModel.SetControlDescription("testString")
				getReportControlsOptionsModel.SetControlCategory("testString")
				getReportControlsOptionsModel.SetStatus("compliant")
				getReportControlsOptionsModel.SetSort("control_name")
				getReportControlsOptionsModel.SetScopeID("testString")
				getReportControlsOptionsModel.SetSubscopeID("testString")
				getReportControlsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportControlsOptionsModel).ToNot(BeNil())
				Expect(getReportControlsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportControlsOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.ControlID).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.ControlName).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.ControlDescription).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.ControlCategory).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.Status).To(Equal(core.StringPtr("compliant")))
				Expect(getReportControlsOptionsModel.Sort).To(Equal(core.StringPtr("control_name")))
				Expect(getReportControlsOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(getReportControlsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportDownloadFileOptions successfully`, func() {
				// Construct an instance of the GetReportDownloadFileOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				getReportDownloadFileOptionsModel := securityAndComplianceCenterService.NewGetReportDownloadFileOptions(instanceID, reportID)
				getReportDownloadFileOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportDownloadFileOptionsModel.SetReportID("testString")
				getReportDownloadFileOptionsModel.SetAccept("application/csv")
				getReportDownloadFileOptionsModel.SetExcludeSummary(true)
				getReportDownloadFileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportDownloadFileOptionsModel).ToNot(BeNil())
				Expect(getReportDownloadFileOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportDownloadFileOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportDownloadFileOptionsModel.Accept).To(Equal(core.StringPtr("application/csv")))
				Expect(getReportDownloadFileOptionsModel.ExcludeSummary).To(Equal(core.BoolPtr(true)))
				Expect(getReportDownloadFileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportOptions successfully`, func() {
				// Construct an instance of the GetReportOptions model
				reportID := "testString"
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				getReportOptionsModel := securityAndComplianceCenterService.NewGetReportOptions(reportID, instanceID)
				getReportOptionsModel.SetReportID("testString")
				getReportOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportOptionsModel.SetScopeID("testString")
				getReportOptionsModel.SetSubscopeID("testString")
				getReportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportOptionsModel).ToNot(BeNil())
				Expect(getReportOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(getReportOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(getReportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportRuleOptions successfully`, func() {
				// Construct an instance of the GetReportRuleOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				ruleID := "rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
				getReportRuleOptionsModel := securityAndComplianceCenterService.NewGetReportRuleOptions(instanceID, reportID, ruleID)
				getReportRuleOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportRuleOptionsModel.SetReportID("testString")
				getReportRuleOptionsModel.SetRuleID("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getReportRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportRuleOptionsModel).ToNot(BeNil())
				Expect(getReportRuleOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportRuleOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportRuleOptionsModel.RuleID).To(Equal(core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")))
				Expect(getReportRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportSummaryOptions successfully`, func() {
				// Construct an instance of the GetReportSummaryOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				getReportSummaryOptionsModel := securityAndComplianceCenterService.NewGetReportSummaryOptions(instanceID, reportID)
				getReportSummaryOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportSummaryOptionsModel.SetReportID("testString")
				getReportSummaryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportSummaryOptionsModel).ToNot(BeNil())
				Expect(getReportSummaryOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportSummaryOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportSummaryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportTagsOptions successfully`, func() {
				// Construct an instance of the GetReportTagsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				getReportTagsOptionsModel := securityAndComplianceCenterService.NewGetReportTagsOptions(instanceID, reportID)
				getReportTagsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportTagsOptionsModel.SetReportID("testString")
				getReportTagsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportTagsOptionsModel).ToNot(BeNil())
				Expect(getReportTagsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportTagsOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportTagsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetReportViolationsDriftOptions successfully`, func() {
				// Construct an instance of the GetReportViolationsDriftOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				getReportViolationsDriftOptionsModel := securityAndComplianceCenterService.NewGetReportViolationsDriftOptions(instanceID, reportID)
				getReportViolationsDriftOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getReportViolationsDriftOptionsModel.SetReportID("testString")
				getReportViolationsDriftOptionsModel.SetScanTimeDuration(int64(0))
				getReportViolationsDriftOptionsModel.SetScopeID("testString")
				getReportViolationsDriftOptionsModel.SetSubscopeID("testString")
				getReportViolationsDriftOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getReportViolationsDriftOptionsModel).ToNot(BeNil())
				Expect(getReportViolationsDriftOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getReportViolationsDriftOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getReportViolationsDriftOptionsModel.ScanTimeDuration).To(Equal(core.Int64Ptr(int64(0))))
				Expect(getReportViolationsDriftOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(getReportViolationsDriftOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(getReportViolationsDriftOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRuleOptions successfully`, func() {
				// Construct an instance of the GetRuleOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				ruleID := "rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
				getRuleOptionsModel := securityAndComplianceCenterService.NewGetRuleOptions(instanceID, ruleID)
				getRuleOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getRuleOptionsModel.SetRuleID("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				getRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRuleOptionsModel).ToNot(BeNil())
				Expect(getRuleOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getRuleOptionsModel.RuleID).To(Equal(core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")))
				Expect(getRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetScanReportDownloadFileOptions successfully`, func() {
				// Construct an instance of the GetScanReportDownloadFileOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				jobID := "testString"
				getScanReportDownloadFileOptionsModel := securityAndComplianceCenterService.NewGetScanReportDownloadFileOptions(instanceID, reportID, jobID)
				getScanReportDownloadFileOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportDownloadFileOptionsModel.SetReportID("testString")
				getScanReportDownloadFileOptionsModel.SetJobID("testString")
				getScanReportDownloadFileOptionsModel.SetAccept("application/csv")
				getScanReportDownloadFileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getScanReportDownloadFileOptionsModel).ToNot(BeNil())
				Expect(getScanReportDownloadFileOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getScanReportDownloadFileOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getScanReportDownloadFileOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getScanReportDownloadFileOptionsModel.Accept).To(Equal(core.StringPtr("application/csv")))
				Expect(getScanReportDownloadFileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetScanReportOptions successfully`, func() {
				// Construct an instance of the GetScanReportOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				jobID := "testString"
				getScanReportOptionsModel := securityAndComplianceCenterService.NewGetScanReportOptions(instanceID, reportID, jobID)
				getScanReportOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScanReportOptionsModel.SetReportID("testString")
				getScanReportOptionsModel.SetJobID("testString")
				getScanReportOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getScanReportOptionsModel).ToNot(BeNil())
				Expect(getScanReportOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getScanReportOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(getScanReportOptionsModel.JobID).To(Equal(core.StringPtr("testString")))
				Expect(getScanReportOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetScopeOptions successfully`, func() {
				// Construct an instance of the GetScopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				getScopeOptionsModel := securityAndComplianceCenterService.NewGetScopeOptions(instanceID, scopeID)
				getScopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getScopeOptionsModel.SetScopeID("testString")
				getScopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getScopeOptionsModel).ToNot(BeNil())
				Expect(getScopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getScopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(getScopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetServiceOptions successfully`, func() {
				// Construct an instance of the GetServiceOptions model
				servicesName := "cloud-object-storage"
				getServiceOptionsModel := securityAndComplianceCenterService.NewGetServiceOptions(servicesName)
				getServiceOptionsModel.SetServicesName("cloud-object-storage")
				getServiceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getServiceOptionsModel).ToNot(BeNil())
				Expect(getServiceOptionsModel.ServicesName).To(Equal(core.StringPtr("cloud-object-storage")))
				Expect(getServiceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSettingsOptions successfully`, func() {
				// Construct an instance of the GetSettingsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				getSettingsOptionsModel := securityAndComplianceCenterService.NewGetSettingsOptions(instanceID)
				getSettingsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSettingsOptionsModel).ToNot(BeNil())
				Expect(getSettingsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubscopeOptions successfully`, func() {
				// Construct an instance of the GetSubscopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				subscopeID := "testString"
				getSubscopeOptionsModel := securityAndComplianceCenterService.NewGetSubscopeOptions(instanceID, scopeID, subscopeID)
				getSubscopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getSubscopeOptionsModel.SetScopeID("testString")
				getSubscopeOptionsModel.SetSubscopeID("testString")
				getSubscopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubscopeOptionsModel).ToNot(BeNil())
				Expect(getSubscopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getSubscopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(getSubscopeOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(getSubscopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetTargetOptions successfully`, func() {
				// Construct an instance of the GetTargetOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				targetID := "testString"
				getTargetOptionsModel := securityAndComplianceCenterService.NewGetTargetOptions(instanceID, targetID)
				getTargetOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				getTargetOptionsModel.SetTargetID("testString")
				getTargetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getTargetOptionsModel).ToNot(BeNil())
				Expect(getTargetOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(getTargetOptionsModel.TargetID).To(Equal(core.StringPtr("testString")))
				Expect(getTargetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListControlLibrariesOptions successfully`, func() {
				// Construct an instance of the ListControlLibrariesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listControlLibrariesOptionsModel := securityAndComplianceCenterService.NewListControlLibrariesOptions(instanceID)
				listControlLibrariesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listControlLibrariesOptionsModel.SetAccountID("testString")
				listControlLibrariesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listControlLibrariesOptionsModel).ToNot(BeNil())
				Expect(listControlLibrariesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listControlLibrariesOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listControlLibrariesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceAttachmentsOptions successfully`, func() {
				// Construct an instance of the ListInstanceAttachmentsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listInstanceAttachmentsOptionsModel := securityAndComplianceCenterService.NewListInstanceAttachmentsOptions(instanceID)
				listInstanceAttachmentsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listInstanceAttachmentsOptionsModel.SetAccountID("testString")
				listInstanceAttachmentsOptionsModel.SetVersionGroupLabel("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")
				listInstanceAttachmentsOptionsModel.SetLimit(int64(10))
				listInstanceAttachmentsOptionsModel.SetSort("created_on")
				listInstanceAttachmentsOptionsModel.SetDirection("desc")
				listInstanceAttachmentsOptionsModel.SetStart("testString")
				listInstanceAttachmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceAttachmentsOptionsModel).ToNot(BeNil())
				Expect(listInstanceAttachmentsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listInstanceAttachmentsOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceAttachmentsOptionsModel.VersionGroupLabel).To(Equal(core.StringPtr("33fc7b80-0fa5-4f16-bbba-1f293f660f0d")))
				Expect(listInstanceAttachmentsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listInstanceAttachmentsOptionsModel.Sort).To(Equal(core.StringPtr("created_on")))
				Expect(listInstanceAttachmentsOptionsModel.Direction).To(Equal(core.StringPtr("desc")))
				Expect(listInstanceAttachmentsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceAttachmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListProfileAttachmentsOptions successfully`, func() {
				// Construct an instance of the ListProfileAttachmentsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				listProfileAttachmentsOptionsModel := securityAndComplianceCenterService.NewListProfileAttachmentsOptions(instanceID, profileID)
				listProfileAttachmentsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileAttachmentsOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileAttachmentsOptionsModel.SetAccountID("testString")
				listProfileAttachmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProfileAttachmentsOptionsModel).ToNot(BeNil())
				Expect(listProfileAttachmentsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listProfileAttachmentsOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(listProfileAttachmentsOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listProfileAttachmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListProfileParametersOptions successfully`, func() {
				// Construct an instance of the ListProfileParametersOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				listProfileParametersOptionsModel := securityAndComplianceCenterService.NewListProfileParametersOptions(instanceID, profileID)
				listProfileParametersOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfileParametersOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				listProfileParametersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProfileParametersOptionsModel).ToNot(BeNil())
				Expect(listProfileParametersOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listProfileParametersOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(listProfileParametersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListProfilesOptions successfully`, func() {
				// Construct an instance of the ListProfilesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listProfilesOptionsModel := securityAndComplianceCenterService.NewListProfilesOptions(instanceID)
				listProfilesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProfilesOptionsModel.SetAccountID("testString")
				listProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProfilesOptionsModel).ToNot(BeNil())
				Expect(listProfilesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listProfilesOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListProviderTypeInstancesOptions successfully`, func() {
				// Construct an instance of the ListProviderTypeInstancesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				providerTypeID := "testString"
				listProviderTypeInstancesOptionsModel := securityAndComplianceCenterService.NewListProviderTypeInstancesOptions(instanceID, providerTypeID)
				listProviderTypeInstancesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypeInstancesOptionsModel.SetProviderTypeID("testString")
				listProviderTypeInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProviderTypeInstancesOptionsModel).ToNot(BeNil())
				Expect(listProviderTypeInstancesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listProviderTypeInstancesOptionsModel.ProviderTypeID).To(Equal(core.StringPtr("testString")))
				Expect(listProviderTypeInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListProviderTypesOptions successfully`, func() {
				// Construct an instance of the ListProviderTypesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listProviderTypesOptionsModel := securityAndComplianceCenterService.NewListProviderTypesOptions(instanceID)
				listProviderTypesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listProviderTypesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listProviderTypesOptionsModel).ToNot(BeNil())
				Expect(listProviderTypesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listProviderTypesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListReportEvaluationsOptions successfully`, func() {
				// Construct an instance of the ListReportEvaluationsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				listReportEvaluationsOptionsModel := securityAndComplianceCenterService.NewListReportEvaluationsOptions(instanceID, reportID)
				listReportEvaluationsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportEvaluationsOptionsModel.SetReportID("testString")
				listReportEvaluationsOptionsModel.SetAssessmentID("testString")
				listReportEvaluationsOptionsModel.SetAssessmentMethod("testString")
				listReportEvaluationsOptionsModel.SetComponentID("testString")
				listReportEvaluationsOptionsModel.SetTargetID("testString")
				listReportEvaluationsOptionsModel.SetTargetEnv("testString")
				listReportEvaluationsOptionsModel.SetTargetName("testString")
				listReportEvaluationsOptionsModel.SetStatus("failure")
				listReportEvaluationsOptionsModel.SetStart("testString")
				listReportEvaluationsOptionsModel.SetLimit(int64(10))
				listReportEvaluationsOptionsModel.SetSort("profile_name")
				listReportEvaluationsOptionsModel.SetScopeID("testString")
				listReportEvaluationsOptionsModel.SetSubscopeID("testString")
				listReportEvaluationsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listReportEvaluationsOptionsModel).ToNot(BeNil())
				Expect(listReportEvaluationsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listReportEvaluationsOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.AssessmentID).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.AssessmentMethod).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.ComponentID).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.TargetID).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.TargetEnv).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.TargetName).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.Status).To(Equal(core.StringPtr("failure")))
				Expect(listReportEvaluationsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listReportEvaluationsOptionsModel.Sort).To(Equal(core.StringPtr("profile_name")))
				Expect(listReportEvaluationsOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(listReportEvaluationsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListReportResourcesOptions successfully`, func() {
				// Construct an instance of the ListReportResourcesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				listReportResourcesOptionsModel := securityAndComplianceCenterService.NewListReportResourcesOptions(instanceID, reportID)
				listReportResourcesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportResourcesOptionsModel.SetReportID("testString")
				listReportResourcesOptionsModel.SetID("testString")
				listReportResourcesOptionsModel.SetResourceName("testString")
				listReportResourcesOptionsModel.SetAccountID("testString")
				listReportResourcesOptionsModel.SetComponentID("testString")
				listReportResourcesOptionsModel.SetStatus("compliant")
				listReportResourcesOptionsModel.SetSort("account_id")
				listReportResourcesOptionsModel.SetStart("testString")
				listReportResourcesOptionsModel.SetLimit(int64(10))
				listReportResourcesOptionsModel.SetScopeID("testString")
				listReportResourcesOptionsModel.SetSubscopeID("testString")
				listReportResourcesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listReportResourcesOptionsModel).ToNot(BeNil())
				Expect(listReportResourcesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listReportResourcesOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.ResourceName).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.ComponentID).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.Status).To(Equal(core.StringPtr("compliant")))
				Expect(listReportResourcesOptionsModel.Sort).To(Equal(core.StringPtr("account_id")))
				Expect(listReportResourcesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listReportResourcesOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(listReportResourcesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListReportsOptions successfully`, func() {
				// Construct an instance of the ListReportsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listReportsOptionsModel := securityAndComplianceCenterService.NewListReportsOptions(instanceID)
				listReportsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listReportsOptionsModel.SetAttachmentID("testString")
				listReportsOptionsModel.SetGroupID("testString")
				listReportsOptionsModel.SetProfileID("testString")
				listReportsOptionsModel.SetType("scheduled")
				listReportsOptionsModel.SetStart("testString")
				listReportsOptionsModel.SetLimit(int64(10))
				listReportsOptionsModel.SetSort("profile_name")
				listReportsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listReportsOptionsModel).ToNot(BeNil())
				Expect(listReportsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listReportsOptionsModel.AttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(listReportsOptionsModel.GroupID).To(Equal(core.StringPtr("testString")))
				Expect(listReportsOptionsModel.ProfileID).To(Equal(core.StringPtr("testString")))
				Expect(listReportsOptionsModel.Type).To(Equal(core.StringPtr("scheduled")))
				Expect(listReportsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listReportsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listReportsOptionsModel.Sort).To(Equal(core.StringPtr("profile_name")))
				Expect(listReportsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRulesOptions successfully`, func() {
				// Construct an instance of the ListRulesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listRulesOptionsModel := securityAndComplianceCenterService.NewListRulesOptions(instanceID)
				listRulesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listRulesOptionsModel.SetLimit(int64(10))
				listRulesOptionsModel.SetStart("testString")
				listRulesOptionsModel.SetType("system_defined")
				listRulesOptionsModel.SetSearch("testString")
				listRulesOptionsModel.SetServiceName("testString")
				listRulesOptionsModel.SetSort("updated_on")
				listRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRulesOptionsModel).ToNot(BeNil())
				Expect(listRulesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listRulesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listRulesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listRulesOptionsModel.Type).To(Equal(core.StringPtr("system_defined")))
				Expect(listRulesOptionsModel.Search).To(Equal(core.StringPtr("testString")))
				Expect(listRulesOptionsModel.ServiceName).To(Equal(core.StringPtr("testString")))
				Expect(listRulesOptionsModel.Sort).To(Equal(core.StringPtr("updated_on")))
				Expect(listRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListScanReportsOptions successfully`, func() {
				// Construct an instance of the ListScanReportsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				reportID := "testString"
				listScanReportsOptionsModel := securityAndComplianceCenterService.NewListScanReportsOptions(instanceID, reportID)
				listScanReportsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScanReportsOptionsModel.SetReportID("testString")
				listScanReportsOptionsModel.SetScopeID("testString")
				listScanReportsOptionsModel.SetSubscopeID("testString")
				listScanReportsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listScanReportsOptionsModel).ToNot(BeNil())
				Expect(listScanReportsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listScanReportsOptionsModel.ReportID).To(Equal(core.StringPtr("testString")))
				Expect(listScanReportsOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(listScanReportsOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(listScanReportsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListScopesOptions successfully`, func() {
				// Construct an instance of the ListScopesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listScopesOptionsModel := securityAndComplianceCenterService.NewListScopesOptions(instanceID)
				listScopesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listScopesOptionsModel.SetLimit(int64(10))
				listScopesOptionsModel.SetStart("testString")
				listScopesOptionsModel.SetName("testString")
				listScopesOptionsModel.SetDescription("testString")
				listScopesOptionsModel.SetEnvironment("testString")
				listScopesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listScopesOptionsModel).ToNot(BeNil())
				Expect(listScopesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listScopesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listScopesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listScopesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listScopesOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(listScopesOptionsModel.Environment).To(Equal(core.StringPtr("testString")))
				Expect(listScopesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListServicesOptions successfully`, func() {
				// Construct an instance of the ListServicesOptions model
				listServicesOptionsModel := securityAndComplianceCenterService.NewListServicesOptions()
				listServicesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listServicesOptionsModel).ToNot(BeNil())
				Expect(listServicesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSubscopesOptions successfully`, func() {
				// Construct an instance of the ListSubscopesOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				listSubscopesOptionsModel := securityAndComplianceCenterService.NewListSubscopesOptions(instanceID, scopeID)
				listSubscopesOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listSubscopesOptionsModel.SetScopeID("testString")
				listSubscopesOptionsModel.SetLimit(int64(10))
				listSubscopesOptionsModel.SetStart("testString")
				listSubscopesOptionsModel.SetName("testString")
				listSubscopesOptionsModel.SetDescription("testString")
				listSubscopesOptionsModel.SetEnvironment("testString")
				listSubscopesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSubscopesOptionsModel).ToNot(BeNil())
				Expect(listSubscopesOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listSubscopesOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(listSubscopesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(10))))
				Expect(listSubscopesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSubscopesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listSubscopesOptionsModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(listSubscopesOptionsModel.Environment).To(Equal(core.StringPtr("testString")))
				Expect(listSubscopesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListTargetsOptions successfully`, func() {
				// Construct an instance of the ListTargetsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				listTargetsOptionsModel := securityAndComplianceCenterService.NewListTargetsOptions(instanceID)
				listTargetsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				listTargetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listTargetsOptionsModel).ToNot(BeNil())
				Expect(listTargetsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(listTargetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewPostTestEventOptions successfully`, func() {
				// Construct an instance of the PostTestEventOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				postTestEventOptionsModel := securityAndComplianceCenterService.NewPostTestEventOptions(instanceID)
				postTestEventOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				postTestEventOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(postTestEventOptionsModel).ToNot(BeNil())
				Expect(postTestEventOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(postTestEventOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewProfileAttachmentBase successfully`, func() {
				attachmentParameters := []securityandcompliancecenterapiv3.Parameter{}
				description := "testString"
				name := "testString"
				var notifications *securityandcompliancecenterapiv3.AttachmentNotifications = nil
				schedule := "daily"
				scope := []securityandcompliancecenterapiv3.MultiCloudScopePayload{}
				status := "enabled"
				_, err := securityAndComplianceCenterService.NewProfileAttachmentBase(attachmentParameters, description, name, notifications, schedule, scope, status)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewReplaceCustomControlLibraryOptions successfully`, func() {
				// Construct an instance of the AssessmentPrototype model
				assessmentPrototypeModel := new(securityandcompliancecenterapiv3.Assessment)
				Expect(assessmentPrototypeModel).ToNot(BeNil())
				assessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				assessmentPrototypeModel.AssessmentDescription = core.StringPtr("testString")
				Expect(assessmentPrototypeModel.AssessmentID).To(Equal(core.StringPtr("testString")))
				Expect(assessmentPrototypeModel.AssessmentDescription).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlSpecificationPrototype model
				controlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ControlSpecification)
				Expect(controlSpecificationPrototypeModel).ToNot(BeNil())
				controlSpecificationPrototypeModel.ComponentID = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Environment = core.StringPtr("ibm-cloud")
				controlSpecificationPrototypeModel.Description = core.StringPtr("testString")
				controlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}
				Expect(controlSpecificationPrototypeModel.ComponentID).To(Equal(core.StringPtr("testString")))
				Expect(controlSpecificationPrototypeModel.Environment).To(Equal(core.StringPtr("ibm-cloud")))
				Expect(controlSpecificationPrototypeModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(controlSpecificationPrototypeModel.Assessments).To(Equal([]securityandcompliancecenterapiv3.Assessment{*assessmentPrototypeModel}))

				// Construct an instance of the ControlDoc model
				controlDocModel := new(securityandcompliancecenterapiv3.ControlDoc)
				Expect(controlDocModel).ToNot(BeNil())
				controlDocModel.ControlDocsID = core.StringPtr("testString")
				controlDocModel.ControlDocsType = core.StringPtr("testString")
				Expect(controlDocModel.ControlDocsID).To(Equal(core.StringPtr("testString")))
				Expect(controlDocModel.ControlDocsType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ControlPrototype model
				controlPrototypeModel := new(securityandcompliancecenterapiv3.Control)
				Expect(controlPrototypeModel).ToNot(BeNil())
				controlPrototypeModel.ControlName = core.StringPtr("testString")
				controlPrototypeModel.ControlDescription = core.StringPtr("testString")
				controlPrototypeModel.ControlCategory = core.StringPtr("testString")
				controlPrototypeModel.ControlRequirement = core.BoolPtr(true)
				controlPrototypeModel.ControlParent = core.StringPtr("testString")
				controlPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}
				controlPrototypeModel.ControlDocs = controlDocModel
				controlPrototypeModel.Status = core.StringPtr("testString")
				Expect(controlPrototypeModel.ControlName).To(Equal(core.StringPtr("testString")))
				Expect(controlPrototypeModel.ControlDescription).To(Equal(core.StringPtr("testString")))
				Expect(controlPrototypeModel.ControlCategory).To(Equal(core.StringPtr("testString")))
				Expect(controlPrototypeModel.ControlRequirement).To(Equal(core.BoolPtr(true)))
				Expect(controlPrototypeModel.ControlParent).To(Equal(core.StringPtr("testString")))
				Expect(controlPrototypeModel.ControlSpecifications).To(Equal([]securityandcompliancecenterapiv3.ControlSpecification{*controlSpecificationPrototypeModel}))
				Expect(controlPrototypeModel.ControlDocs).To(Equal(controlDocModel))
				Expect(controlPrototypeModel.Status).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceCustomControlLibraryOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				controlLibraryID := "51ca566e-c559-412b-8d64-f05b57044c32"
				replaceCustomControlLibraryOptionsControlLibraryName := "testString"
				replaceCustomControlLibraryOptionsControlLibraryDescription := "testString"
				replaceCustomControlLibraryOptionsControlLibraryType := "custom"
				replaceCustomControlLibraryOptionsControlLibraryVersion := "testString"
				replaceCustomControlLibraryOptionsControls := []securityandcompliancecenterapiv3.Control{}
				replaceCustomControlLibraryOptionsModel := securityAndComplianceCenterService.NewReplaceCustomControlLibraryOptions(instanceID, controlLibraryID, replaceCustomControlLibraryOptionsControlLibraryName, replaceCustomControlLibraryOptionsControlLibraryDescription, replaceCustomControlLibraryOptionsControlLibraryType, replaceCustomControlLibraryOptionsControlLibraryVersion, replaceCustomControlLibraryOptionsControls)
				replaceCustomControlLibraryOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceCustomControlLibraryOptionsModel.SetControlLibraryID("51ca566e-c559-412b-8d64-f05b57044c32")
				replaceCustomControlLibraryOptionsModel.SetControlLibraryName("testString")
				replaceCustomControlLibraryOptionsModel.SetControlLibraryDescription("testString")
				replaceCustomControlLibraryOptionsModel.SetControlLibraryType("custom")
				replaceCustomControlLibraryOptionsModel.SetControlLibraryVersion("testString")
				replaceCustomControlLibraryOptionsModel.SetControls([]securityandcompliancecenterapiv3.Control{*controlPrototypeModel})
				replaceCustomControlLibraryOptionsModel.SetBssAccount("testString")
				replaceCustomControlLibraryOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceCustomControlLibraryOptionsModel).ToNot(BeNil())
				Expect(replaceCustomControlLibraryOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(replaceCustomControlLibraryOptionsModel.ControlLibraryID).To(Equal(core.StringPtr("51ca566e-c559-412b-8d64-f05b57044c32")))
				Expect(replaceCustomControlLibraryOptionsModel.ControlLibraryName).To(Equal(core.StringPtr("testString")))
				Expect(replaceCustomControlLibraryOptionsModel.ControlLibraryDescription).To(Equal(core.StringPtr("testString")))
				Expect(replaceCustomControlLibraryOptionsModel.ControlLibraryType).To(Equal(core.StringPtr("custom")))
				Expect(replaceCustomControlLibraryOptionsModel.ControlLibraryVersion).To(Equal(core.StringPtr("testString")))
				Expect(replaceCustomControlLibraryOptionsModel.Controls).To(Equal([]securityandcompliancecenterapiv3.Control{*controlPrototypeModel}))
				Expect(replaceCustomControlLibraryOptionsModel.BssAccount).To(Equal(core.StringPtr("testString")))
				Expect(replaceCustomControlLibraryOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceProfileAttachmentOptions successfully`, func() {
				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				Expect(parameterModel).ToNot(BeNil())
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")
				Expect(parameterModel.AssessmentType).To(Equal(core.StringPtr("testString")))
				Expect(parameterModel.AssessmentID).To(Equal(core.StringPtr("testString")))
				Expect(parameterModel.ParameterName).To(Equal(core.StringPtr("location")))
				Expect(parameterModel.ParameterDisplayName).To(Equal(core.StringPtr("Location")))
				Expect(parameterModel.ParameterType).To(Equal(core.StringPtr("string")))
				Expect(parameterModel.ParameterValue).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the AttachmentNotificationsControls model
				attachmentNotificationsControlsModel := new(securityandcompliancecenterapiv3.AttachmentNotificationsControls)
				Expect(attachmentNotificationsControlsModel).ToNot(BeNil())
				attachmentNotificationsControlsModel.ThresholdLimit = core.Int64Ptr(int64(15))
				attachmentNotificationsControlsModel.FailedControlIds = []string{"testString"}
				Expect(attachmentNotificationsControlsModel.ThresholdLimit).To(Equal(core.Int64Ptr(int64(15))))
				Expect(attachmentNotificationsControlsModel.FailedControlIds).To(Equal([]string{"testString"}))

				// Construct an instance of the AttachmentNotifications model
				attachmentNotificationsModel := new(securityandcompliancecenterapiv3.AttachmentNotifications)
				Expect(attachmentNotificationsModel).ToNot(BeNil())
				attachmentNotificationsModel.Enabled = core.BoolPtr(true)
				attachmentNotificationsModel.Controls = attachmentNotificationsControlsModel
				Expect(attachmentNotificationsModel.Enabled).To(Equal(core.BoolPtr(true)))
				Expect(attachmentNotificationsModel.Controls).To(Equal(attachmentNotificationsControlsModel))

				// Construct an instance of the ScopePropertyScopeID model
				scopePropertyModel := new(securityandcompliancecenterapiv3.ScopePropertyScopeID)
				Expect(scopePropertyModel).ToNot(BeNil())
				scopePropertyModel.Name = core.StringPtr("scope_id")
				scopePropertyModel.Value = core.StringPtr("testString")
				Expect(scopePropertyModel.Name).To(Equal(core.StringPtr("scope_id")))
				Expect(scopePropertyModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the MultiCloudScopePayload model
				multiCloudScopePayloadModel := new(securityandcompliancecenterapiv3.MultiCloudScopePayload)
				Expect(multiCloudScopePayloadModel).ToNot(BeNil())
				multiCloudScopePayloadModel.ID = core.StringPtr("testString")
				multiCloudScopePayloadModel.Environment = core.StringPtr("testString")
				multiCloudScopePayloadModel.Properties = []securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}
				Expect(multiCloudScopePayloadModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(multiCloudScopePayloadModel.Environment).To(Equal(core.StringPtr("testString")))
				Expect(multiCloudScopePayloadModel.Properties).To(Equal([]securityandcompliancecenterapiv3.ScopePropertyIntf{scopePropertyModel}))

				// Construct an instance of the ProfileAttachmentBase model
				profileAttachmentBaseModel := new(securityandcompliancecenterapiv3.ProfileAttachmentBase)
				Expect(profileAttachmentBaseModel).ToNot(BeNil())
				profileAttachmentBaseModel.AttachmentParameters = []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				profileAttachmentBaseModel.Description = core.StringPtr("testString")
				profileAttachmentBaseModel.Name = core.StringPtr("testString")
				profileAttachmentBaseModel.Notifications = attachmentNotificationsModel
				profileAttachmentBaseModel.Schedule = core.StringPtr("daily")
				profileAttachmentBaseModel.Scope = []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				profileAttachmentBaseModel.Status = core.StringPtr("enabled")
				Expect(profileAttachmentBaseModel.AttachmentParameters).To(Equal([]securityandcompliancecenterapiv3.Parameter{*parameterModel}))
				Expect(profileAttachmentBaseModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(profileAttachmentBaseModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(profileAttachmentBaseModel.Notifications).To(Equal(attachmentNotificationsModel))
				Expect(profileAttachmentBaseModel.Schedule).To(Equal(core.StringPtr("daily")))
				Expect(profileAttachmentBaseModel.Scope).To(Equal([]securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}))
				Expect(profileAttachmentBaseModel.Status).To(Equal(core.StringPtr("enabled")))

				// Construct an instance of the ReplaceProfileAttachmentOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				attachmentID := "testString"
				description := "testString"
				attachmentParameters := []securityandcompliancecenterapiv3.Parameter{*parameterModel}
				name := "testString"
				notifications := attachmentNotificationsModel
				schedule := "daily"
				scope := []securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel}
				status := "enabled"
				replaceProfileAttachmentOptionsModel := securityAndComplianceCenterService.NewReplaceProfileAttachmentOptions(instanceID, profileID, attachmentID, description, name, schedule, status, notifications, scope, attachmentParameters)
				replaceProfileAttachmentOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileAttachmentOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileAttachmentOptionsModel.SetAttachmentID("testString")
				replaceProfileAttachmentOptionsModel.SetAttachmentParameters([]securityandcompliancecenterapiv3.Parameter{*parameterModel})
				replaceProfileAttachmentOptionsModel.SetDescription("testString")
				replaceProfileAttachmentOptionsModel.SetName("testString")
				replaceProfileAttachmentOptionsModel.SetNotifications(attachmentNotificationsModel)
				replaceProfileAttachmentOptionsModel.SetSchedule("daily")
				replaceProfileAttachmentOptionsModel.SetScope([]securityandcompliancecenterapiv3.MultiCloudScopePayload{*multiCloudScopePayloadModel})
				replaceProfileAttachmentOptionsModel.SetStatus("enabled")
				replaceProfileAttachmentOptionsModel.SetAccountID("testString")
				replaceProfileAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceProfileAttachmentOptionsModel).ToNot(BeNil())
				Expect(replaceProfileAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(replaceProfileAttachmentOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(replaceProfileAttachmentOptionsModel.AttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileAttachmentOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceProfileOptions successfully`, func() {
				// Construct an instance of the ProfileAssessmentPrototype model
				profileAssessmentPrototypeModel := new(securityandcompliancecenterapiv3.ProfileAssessmentPrototype)
				Expect(profileAssessmentPrototypeModel).ToNot(BeNil())
				profileAssessmentPrototypeModel.AssessmentID = core.StringPtr("testString")
				Expect(profileAssessmentPrototypeModel.AssessmentID).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ProfileControlSpecificationPrototype model
				profileControlSpecificationPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype)
				Expect(profileControlSpecificationPrototypeModel).ToNot(BeNil())
				profileControlSpecificationPrototypeModel.ControlSpecificationID = core.StringPtr("testString")
				profileControlSpecificationPrototypeModel.Assessments = []securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}
				Expect(profileControlSpecificationPrototypeModel.ControlSpecificationID).To(Equal(core.StringPtr("testString")))
				Expect(profileControlSpecificationPrototypeModel.Assessments).To(Equal([]securityandcompliancecenterapiv3.ProfileAssessmentPrototype{*profileAssessmentPrototypeModel}))

				// Construct an instance of the ProfileControlsPrototype model
				profileControlsPrototypeModel := new(securityandcompliancecenterapiv3.ProfileControlsPrototype)
				Expect(profileControlsPrototypeModel).ToNot(BeNil())
				profileControlsPrototypeModel.ControlLibraryID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlID = core.StringPtr("testString")
				profileControlsPrototypeModel.ControlSpecifications = []securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}
				Expect(profileControlsPrototypeModel.ControlLibraryID).To(Equal(core.StringPtr("testString")))
				Expect(profileControlsPrototypeModel.ControlID).To(Equal(core.StringPtr("testString")))
				Expect(profileControlsPrototypeModel.ControlSpecifications).To(Equal([]securityandcompliancecenterapiv3.ProfileControlSpecificationPrototype{*profileControlSpecificationPrototypeModel}))

				// Construct an instance of the DefaultParametersPrototype model
				defaultParametersPrototypeModel := new(securityandcompliancecenterapiv3.DefaultParametersPrototype)
				Expect(defaultParametersPrototypeModel).ToNot(BeNil())
				defaultParametersPrototypeModel.AssessmentType = core.StringPtr("testString")
				defaultParametersPrototypeModel.AssessmentID = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersPrototypeModel.ParameterType = core.StringPtr("testString")
				Expect(defaultParametersPrototypeModel.AssessmentType).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersPrototypeModel.AssessmentID).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersPrototypeModel.ParameterName).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersPrototypeModel.ParameterDefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersPrototypeModel.ParameterDisplayName).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersPrototypeModel.ParameterType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceProfileOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				profileName := "Sample SCC Profile"
				profileDesc := "This sample profile can be deleted"
				replaceProfileOptionsModel := securityAndComplianceCenterService.NewReplaceProfileOptions(instanceID, profileID, profileName, profileDesc)
				replaceProfileOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileOptionsModel.SetProfileName("testString")
				replaceProfileOptionsModel.SetProfileDescription("testString")
				replaceProfileOptionsModel.SetProfileVersion("testString")
				replaceProfileOptionsModel.SetLatest(true)
				replaceProfileOptionsModel.SetVersionGroupLabel("testString")
				replaceProfileOptionsModel.SetControls([]securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel})
				replaceProfileOptionsModel.SetDefaultParameters([]securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel})
				replaceProfileOptionsModel.SetAccountID("testString")
				replaceProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceProfileOptionsModel).ToNot(BeNil())
				Expect(replaceProfileOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(replaceProfileOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(replaceProfileOptionsModel.ProfileName).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileOptionsModel.ProfileDescription).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileOptionsModel.ProfileVersion).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileOptionsModel.Latest).To(Equal(core.BoolPtr(true)))
				Expect(replaceProfileOptionsModel.VersionGroupLabel).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileOptionsModel.Controls).To(Equal([]securityandcompliancecenterapiv3.ProfileControlsPrototype{*profileControlsPrototypeModel}))
				Expect(replaceProfileOptionsModel.DefaultParameters).To(Equal([]securityandcompliancecenterapiv3.DefaultParametersPrototype{*defaultParametersPrototypeModel}))
				Expect(replaceProfileOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceProfileParametersOptions successfully`, func() {
				// Construct an instance of the DefaultParameters model
				defaultParametersModel := new(securityandcompliancecenterapiv3.DefaultParameters)
				Expect(defaultParametersModel).ToNot(BeNil())
				defaultParametersModel.AssessmentType = core.StringPtr("testString")
				defaultParametersModel.AssessmentID = core.StringPtr("testString")
				defaultParametersModel.ParameterName = core.StringPtr("testString")
				defaultParametersModel.ParameterDefaultValue = core.StringPtr("testString")
				defaultParametersModel.ParameterDisplayName = core.StringPtr("testString")
				defaultParametersModel.ParameterType = core.StringPtr("testString")
				Expect(defaultParametersModel.AssessmentType).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersModel.AssessmentID).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersModel.ParameterName).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersModel.ParameterDefaultValue).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersModel.ParameterDisplayName).To(Equal(core.StringPtr("testString")))
				Expect(defaultParametersModel.ParameterType).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the ReplaceProfileParametersOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				replaceProfileParametersOptionsModel := securityAndComplianceCenterService.NewReplaceProfileParametersOptions(instanceID, profileID)
				replaceProfileParametersOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceProfileParametersOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				replaceProfileParametersOptionsModel.SetID("testString")
				replaceProfileParametersOptionsModel.SetDefaultParameters([]securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel})
				replaceProfileParametersOptionsModel.SetAccountID("testString")
				replaceProfileParametersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceProfileParametersOptionsModel).ToNot(BeNil())
				Expect(replaceProfileParametersOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(replaceProfileParametersOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(replaceProfileParametersOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileParametersOptionsModel.DefaultParameters).To(Equal([]securityandcompliancecenterapiv3.DefaultParameters{*defaultParametersModel}))
				Expect(replaceProfileParametersOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(replaceProfileParametersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceRuleOptions successfully`, func() {
				// Construct an instance of the AdditionalTargetAttribute model
				additionalTargetAttributeModel := new(securityandcompliancecenterapiv3.AdditionalTargetAttribute)
				Expect(additionalTargetAttributeModel).ToNot(BeNil())
				additionalTargetAttributeModel.Name = core.StringPtr("location")
				additionalTargetAttributeModel.Operator = core.StringPtr("string_equals")
				additionalTargetAttributeModel.Value = core.StringPtr("us-south")
				Expect(additionalTargetAttributeModel.Name).To(Equal(core.StringPtr("location")))
				Expect(additionalTargetAttributeModel.Operator).To(Equal(core.StringPtr("string_equals")))
				Expect(additionalTargetAttributeModel.Value).To(Equal(core.StringPtr("us-south")))

				// Construct an instance of the RuleTargetPrototype model
				ruleTargetPrototypeModel := new(securityandcompliancecenterapiv3.RuleTargetPrototype)
				Expect(ruleTargetPrototypeModel).ToNot(BeNil())
				ruleTargetPrototypeModel.ServiceName = core.StringPtr("cloud-object-storage")
				ruleTargetPrototypeModel.ResourceKind = core.StringPtr("bucket")
				ruleTargetPrototypeModel.AdditionalTargetAttributes = []securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}
				Expect(ruleTargetPrototypeModel.ServiceName).To(Equal(core.StringPtr("cloud-object-storage")))
				Expect(ruleTargetPrototypeModel.ResourceKind).To(Equal(core.StringPtr("bucket")))
				Expect(ruleTargetPrototypeModel.AdditionalTargetAttributes).To(Equal([]securityandcompliancecenterapiv3.AdditionalTargetAttribute{*additionalTargetAttributeModel}))

				// Construct an instance of the ConditionItemConditionBase model
				conditionItemModel := new(securityandcompliancecenterapiv3.ConditionItemConditionBase)
				Expect(conditionItemModel).ToNot(BeNil())
				conditionItemModel.Description = core.StringPtr("testString")
				conditionItemModel.Property = core.StringPtr("hard_quota")
				conditionItemModel.Operator = core.StringPtr("num_equals")
				conditionItemModel.Value = core.StringPtr("${hard_quota}")
				Expect(conditionItemModel.Description).To(Equal(core.StringPtr("testString")))
				Expect(conditionItemModel.Property).To(Equal(core.StringPtr("hard_quota")))
				Expect(conditionItemModel.Operator).To(Equal(core.StringPtr("num_equals")))
				Expect(conditionItemModel.Value).To(Equal(core.StringPtr("${hard_quota}")))

				// Construct an instance of the RequiredConfigConditionListConditionListConditionAnd model
				requiredConfigModel := new(securityandcompliancecenterapiv3.RequiredConfigConditionListConditionListConditionAnd)
				Expect(requiredConfigModel).ToNot(BeNil())
				requiredConfigModel.Description = core.StringPtr("The Cloud Object Storage rule.")
				requiredConfigModel.And = []securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}
				Expect(requiredConfigModel.Description).To(Equal(core.StringPtr("The Cloud Object Storage rule.")))
				Expect(requiredConfigModel.And).To(Equal([]securityandcompliancecenterapiv3.ConditionItemIntf{conditionItemModel}))

				// Construct an instance of the RuleParameter model
				ruleParameterModel := new(securityandcompliancecenterapiv3.RuleParameter)
				Expect(ruleParameterModel).ToNot(BeNil())
				ruleParameterModel.Name = core.StringPtr("hard_quota")
				ruleParameterModel.DisplayName = core.StringPtr("The Cloud Object Storage bucket quota.")
				ruleParameterModel.Description = core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")
				ruleParameterModel.Type = core.StringPtr("numeric")
				Expect(ruleParameterModel.Name).To(Equal(core.StringPtr("hard_quota")))
				Expect(ruleParameterModel.DisplayName).To(Equal(core.StringPtr("The Cloud Object Storage bucket quota.")))
				Expect(ruleParameterModel.Description).To(Equal(core.StringPtr("The maximum bytes that are allocated to the Cloud Object Storage bucket.")))
				Expect(ruleParameterModel.Type).To(Equal(core.StringPtr("numeric")))

				// Construct an instance of the Import model
				importModel := new(securityandcompliancecenterapiv3.Import)
				Expect(importModel).ToNot(BeNil())
				importModel.Parameters = []securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}
				Expect(importModel.Parameters).To(Equal([]securityandcompliancecenterapiv3.RuleParameter{*ruleParameterModel}))

				// Construct an instance of the ReplaceRuleOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				ruleID := "rule-8d444f8c-fd1d-48de-bcaa-f43732568761"
				ifMatch := "testString"
				replaceRuleOptionsDescription := "Example rule"
				var replaceRuleOptionsTarget *securityandcompliancecenterapiv3.RuleTargetPrototype = nil
				var replaceRuleOptionsRequiredConfig securityandcompliancecenterapiv3.RequiredConfigIntf = nil
				replaceRuleOptionsModel := securityAndComplianceCenterService.NewReplaceRuleOptions(instanceID, ruleID, ifMatch, replaceRuleOptionsDescription, replaceRuleOptionsTarget, replaceRuleOptionsRequiredConfig)
				replaceRuleOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceRuleOptionsModel.SetRuleID("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")
				replaceRuleOptionsModel.SetIfMatch("testString")
				replaceRuleOptionsModel.SetDescription("Example rule")
				replaceRuleOptionsModel.SetTarget(ruleTargetPrototypeModel)
				replaceRuleOptionsModel.SetRequiredConfig(requiredConfigModel)
				replaceRuleOptionsModel.SetVersion("1.0.1")
				replaceRuleOptionsModel.SetImport(importModel)
				replaceRuleOptionsModel.SetLabels([]string{})
				replaceRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceRuleOptionsModel).ToNot(BeNil())
				Expect(replaceRuleOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(replaceRuleOptionsModel.RuleID).To(Equal(core.StringPtr("rule-8d444f8c-fd1d-48de-bcaa-f43732568761")))
				Expect(replaceRuleOptionsModel.IfMatch).To(Equal(core.StringPtr("testString")))
				Expect(replaceRuleOptionsModel.Description).To(Equal(core.StringPtr("Example rule")))
				Expect(replaceRuleOptionsModel.Target).To(Equal(ruleTargetPrototypeModel))
				Expect(replaceRuleOptionsModel.RequiredConfig).To(Equal(requiredConfigModel))
				Expect(replaceRuleOptionsModel.Version).To(Equal(core.StringPtr("1.0.1")))
				Expect(replaceRuleOptionsModel.Import).To(Equal(importModel))
				Expect(replaceRuleOptionsModel.Labels).To(Equal([]string{}))
				Expect(replaceRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceTargetOptions successfully`, func() {
				// Construct an instance of the Account model
				accountModel := new(securityandcompliancecenterapiv3.Account)
				Expect(accountModel).ToNot(BeNil())
				accountModel.ID = core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")
				accountModel.Name = core.StringPtr("NIST")
				accountModel.Type = core.StringPtr("account_type")
				Expect(accountModel.ID).To(Equal(core.StringPtr("531fc3e28bfc43c5a2cea07786d93f5c")))
				Expect(accountModel.Name).To(Equal(core.StringPtr("NIST")))
				Expect(accountModel.Type).To(Equal(core.StringPtr("account_type")))

				// Construct an instance of the Tags model
				tagsModel := new(securityandcompliancecenterapiv3.Tags)
				Expect(tagsModel).ToNot(BeNil())
				tagsModel.User = []string{"testString"}
				tagsModel.Access = []string{"testString"}
				tagsModel.Service = []string{"testString"}
				Expect(tagsModel.User).To(Equal([]string{"testString"}))
				Expect(tagsModel.Access).To(Equal([]string{"testString"}))
				Expect(tagsModel.Service).To(Equal([]string{"testString"}))

				// Construct an instance of the Resource model
				resourceModel := new(securityandcompliancecenterapiv3.Resource)
				Expect(resourceModel).ToNot(BeNil())
				resourceModel.ReportID = core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")
				resourceModel.HomeAccountID = core.StringPtr("2411ffdc16844b07b42521c3443f456d")
				resourceModel.ID = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")
				resourceModel.ResourceName = core.StringPtr("jeff's key")
				resourceModel.Account = accountModel
				resourceModel.ComponentID = core.StringPtr("cloud-object_storage")
				resourceModel.ComponentName = core.StringPtr("cloud-object_storage")
				resourceModel.Environment = core.StringPtr("ibm cloud")
				resourceModel.Tags = tagsModel
				resourceModel.Status = core.StringPtr("compliant")
				resourceModel.TotalCount = core.Int64Ptr(int64(140))
				resourceModel.PassCount = core.Int64Ptr(int64(123))
				resourceModel.FailureCount = core.Int64Ptr(int64(12))
				resourceModel.ErrorCount = core.Int64Ptr(int64(5))
				resourceModel.SkippedCount = core.Int64Ptr(int64(7))
				resourceModel.CompletedCount = core.Int64Ptr(int64(135))
				resourceModel.ServiceName = core.StringPtr("pm-20")
				resourceModel.InstanceCRN = core.StringPtr("testString")
				Expect(resourceModel.ReportID).To(Equal(core.StringPtr("30b434b3-cb08-4845-af10-7a8fc682b6a8")))
				Expect(resourceModel.HomeAccountID).To(Equal(core.StringPtr("2411ffdc16844b07b42521c3443f456d")))
				Expect(resourceModel.ID).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/5af747ca19a8a278b1b6e4eec20df507:03502a50-4ea9-463c-80e5-e27ed838cdb6::")))
				Expect(resourceModel.ResourceName).To(Equal(core.StringPtr("jeff's key")))
				Expect(resourceModel.Account).To(Equal(accountModel))
				Expect(resourceModel.ComponentID).To(Equal(core.StringPtr("cloud-object_storage")))
				Expect(resourceModel.ComponentName).To(Equal(core.StringPtr("cloud-object_storage")))
				Expect(resourceModel.Environment).To(Equal(core.StringPtr("ibm cloud")))
				Expect(resourceModel.Tags).To(Equal(tagsModel))
				Expect(resourceModel.Status).To(Equal(core.StringPtr("compliant")))
				Expect(resourceModel.TotalCount).To(Equal(core.Int64Ptr(int64(140))))
				Expect(resourceModel.PassCount).To(Equal(core.Int64Ptr(int64(123))))
				Expect(resourceModel.FailureCount).To(Equal(core.Int64Ptr(int64(12))))
				Expect(resourceModel.ErrorCount).To(Equal(core.Int64Ptr(int64(5))))
				Expect(resourceModel.SkippedCount).To(Equal(core.Int64Ptr(int64(7))))
				Expect(resourceModel.CompletedCount).To(Equal(core.Int64Ptr(int64(135))))
				Expect(resourceModel.ServiceName).To(Equal(core.StringPtr("pm-20")))
				Expect(resourceModel.InstanceCRN).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the Credential model
				credentialModel := new(securityandcompliancecenterapiv3.Credential)
				Expect(credentialModel).ToNot(BeNil())
				credentialModel.SecretCRN = core.StringPtr("dummy")
				credentialModel.Resources = []securityandcompliancecenterapiv3.Resource{*resourceModel}
				Expect(credentialModel.SecretCRN).To(Equal(core.StringPtr("dummy")))
				Expect(credentialModel.Resources).To(Equal([]securityandcompliancecenterapiv3.Resource{*resourceModel}))

				// Construct an instance of the ReplaceTargetOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				targetID := "testString"
				replaceTargetOptionsAccountID := "be200c80cabc456e91139e4152327823"
				replaceTargetOptionsTrustedProfileID := "Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3"
				replaceTargetOptionsName := "Target accountA"
				replaceTargetOptionsModel := securityAndComplianceCenterService.NewReplaceTargetOptions(instanceID, targetID, replaceTargetOptionsAccountID, replaceTargetOptionsTrustedProfileID, replaceTargetOptionsName)
				replaceTargetOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				replaceTargetOptionsModel.SetTargetID("testString")
				replaceTargetOptionsModel.SetAccountID("be200c80cabc456e91139e4152327823")
				replaceTargetOptionsModel.SetTrustedProfileID("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")
				replaceTargetOptionsModel.SetName("Target accountA")
				replaceTargetOptionsModel.SetCredentials([]securityandcompliancecenterapiv3.Credential{*credentialModel})
				replaceTargetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceTargetOptionsModel).ToNot(BeNil())
				Expect(replaceTargetOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(replaceTargetOptionsModel.TargetID).To(Equal(core.StringPtr("testString")))
				Expect(replaceTargetOptionsModel.AccountID).To(Equal(core.StringPtr("be200c80cabc456e91139e4152327823")))
				Expect(replaceTargetOptionsModel.TrustedProfileID).To(Equal(core.StringPtr("Profile-a0a4c149-4fed-47ff-bfb2-680bcfaa64d3")))
				Expect(replaceTargetOptionsModel.Name).To(Equal(core.StringPtr("Target accountA")))
				Expect(replaceTargetOptionsModel.Credentials).To(Equal([]securityandcompliancecenterapiv3.Credential{*credentialModel}))
				Expect(replaceTargetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRuleTarget successfully`, func() {
				serviceName := "testString"
				resourceKind := "testString"
				_model, err := securityAndComplianceCenterService.NewRuleTarget(serviceName, resourceKind)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRuleTargetPrototype successfully`, func() {
				serviceName := "testString"
				resourceKind := "testString"
				_model, err := securityAndComplianceCenterService.NewRuleTargetPrototype(serviceName, resourceKind)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewUpdateProviderTypeInstanceOptions successfully`, func() {
				// Construct an instance of the UpdateProviderTypeInstanceOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				providerTypeID := "testString"
				providerTypeInstanceID := "testString"
				providerTypeInstanceName := "testString"
				updateProviderTypeInstanceOptionsModel := securityAndComplianceCenterService.NewUpdateProviderTypeInstanceOptions(instanceID, providerTypeID, providerTypeInstanceID, providerTypeInstanceName)
				updateProviderTypeInstanceOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateProviderTypeInstanceOptionsModel.SetProviderTypeID("testString")
				updateProviderTypeInstanceOptionsModel.SetProviderTypeInstanceID("testString")
				updateProviderTypeInstanceOptionsModel.SetName("workload-protection-instance-1")
				updateProviderTypeInstanceOptionsModel.SetAttributes(map[string]interface{}{"key1": "testString"})
				updateProviderTypeInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateProviderTypeInstanceOptionsModel).ToNot(BeNil())
				Expect(updateProviderTypeInstanceOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(updateProviderTypeInstanceOptionsModel.ProviderTypeID).To(Equal(core.StringPtr("testString")))
				Expect(updateProviderTypeInstanceOptionsModel.ProviderTypeInstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateProviderTypeInstanceOptionsModel.Name).To(Equal(core.StringPtr("workload-protection-instance-1")))
				Expect(updateProviderTypeInstanceOptionsModel.Attributes).To(Equal(map[string]interface{}{"key1": "testString"}))
				Expect(updateProviderTypeInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateScopeOptions successfully`, func() {
				// Construct an instance of the UpdateScopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				updateScopeOptionsModel := securityAndComplianceCenterService.NewUpdateScopeOptions(instanceID, scopeID)
				updateScopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateScopeOptionsModel.SetScopeID("testString")
				updateScopeOptionsModel.SetName("updated name of scope")
				updateScopeOptionsModel.SetDescription("updated scope description")
				updateScopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateScopeOptionsModel).ToNot(BeNil())
				Expect(updateScopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(updateScopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(updateScopeOptionsModel.Name).To(Equal(core.StringPtr("updated name of scope")))
				Expect(updateScopeOptionsModel.Description).To(Equal(core.StringPtr("updated scope description")))
				Expect(updateScopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSettingsOptions successfully`, func() {
				// Construct an instance of the ObjectStoragePrototype model
				objectStoragePrototypeModel := new(securityandcompliancecenterapiv3.ObjectStoragePrototype)
				Expect(objectStoragePrototypeModel).ToNot(BeNil())
				objectStoragePrototypeModel.Bucket = core.StringPtr("px-scan-results")
				objectStoragePrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")
				Expect(objectStoragePrototypeModel.Bucket).To(Equal(core.StringPtr("px-scan-results")))
				Expect(objectStoragePrototypeModel.InstanceCRN).To(Equal(core.StringPtr("crn:v1:staging:public:cloud-object-storage:global:a/ff88f007f9ff4622aac4fbc0eda36255:7199ae60-a214-4dd8-9bf7-ce571de49d01::")))

				// Construct an instance of the EventNotificationsPrototype model
				eventNotificationsPrototypeModel := new(securityandcompliancecenterapiv3.EventNotificationsPrototype)
				Expect(eventNotificationsPrototypeModel).ToNot(BeNil())
				eventNotificationsPrototypeModel.InstanceCRN = core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")
				eventNotificationsPrototypeModel.SourceDescription = core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")
				eventNotificationsPrototypeModel.SourceName = core.StringPtr("scc-sdk-integration")
				Expect(eventNotificationsPrototypeModel.InstanceCRN).To(Equal(core.StringPtr("crn:v1:staging:public:event-notifications:us-south:a/ff88f007f9ff4622aac4fbc0eda36255:b8b07245-0bbe-4478-b11c-0dce523105fd::")))
				Expect(eventNotificationsPrototypeModel.SourceDescription).To(Equal(core.StringPtr("This source is used for integration with IBM Cloud Security and Compliance Center.")))
				Expect(eventNotificationsPrototypeModel.SourceName).To(Equal(core.StringPtr("scc-sdk-integration")))

				// Construct an instance of the UpdateSettingsOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				updateSettingsOptionsModel := securityAndComplianceCenterService.NewUpdateSettingsOptions(instanceID)
				updateSettingsOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSettingsOptionsModel.SetObjectStorage(objectStoragePrototypeModel)
				updateSettingsOptionsModel.SetEventNotifications(eventNotificationsPrototypeModel)
				updateSettingsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSettingsOptionsModel).ToNot(BeNil())
				Expect(updateSettingsOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(updateSettingsOptionsModel.ObjectStorage).To(Equal(objectStoragePrototypeModel))
				Expect(updateSettingsOptionsModel.EventNotifications).To(Equal(eventNotificationsPrototypeModel))
				Expect(updateSettingsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSubscopeOptions successfully`, func() {
				// Construct an instance of the UpdateSubscopeOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				scopeID := "testString"
				subscopeID := "testString"
				updateSubscopeOptionsModel := securityAndComplianceCenterService.NewUpdateSubscopeOptions(instanceID, scopeID, subscopeID)
				updateSubscopeOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				updateSubscopeOptionsModel.SetScopeID("testString")
				updateSubscopeOptionsModel.SetSubscopeID("testString")
				updateSubscopeOptionsModel.SetName("updated name of scope")
				updateSubscopeOptionsModel.SetDescription("updated scope description")
				updateSubscopeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSubscopeOptionsModel).ToNot(BeNil())
				Expect(updateSubscopeOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(updateSubscopeOptionsModel.ScopeID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubscopeOptionsModel.SubscopeID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubscopeOptionsModel.Name).To(Equal(core.StringPtr("updated name of scope")))
				Expect(updateSubscopeOptionsModel.Description).To(Equal(core.StringPtr("updated scope description")))
				Expect(updateSubscopeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpgradeAttachmentOptions successfully`, func() {
				// Construct an instance of the Parameter model
				parameterModel := new(securityandcompliancecenterapiv3.Parameter)
				Expect(parameterModel).ToNot(BeNil())
				parameterModel.AssessmentType = core.StringPtr("testString")
				parameterModel.AssessmentID = core.StringPtr("testString")
				parameterModel.ParameterName = core.StringPtr("location")
				parameterModel.ParameterDisplayName = core.StringPtr("Location")
				parameterModel.ParameterType = core.StringPtr("string")
				parameterModel.ParameterValue = core.StringPtr("testString")
				Expect(parameterModel.AssessmentType).To(Equal(core.StringPtr("testString")))
				Expect(parameterModel.AssessmentID).To(Equal(core.StringPtr("testString")))
				Expect(parameterModel.ParameterName).To(Equal(core.StringPtr("location")))
				Expect(parameterModel.ParameterDisplayName).To(Equal(core.StringPtr("Location")))
				Expect(parameterModel.ParameterType).To(Equal(core.StringPtr("string")))
				Expect(parameterModel.ParameterValue).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the UpgradeAttachmentOptions model
				instanceID := "acd7032c-15a3-484f-bf5b-67d41534d940"
				profileID := "48279384-3d29-4089-8259-8ed354774b4a"
				attachmentID := "testString"
				upgradeAttachmentOptionsModel := securityAndComplianceCenterService.NewUpgradeAttachmentOptions(instanceID, profileID, attachmentID)
				upgradeAttachmentOptionsModel.SetInstanceID("acd7032c-15a3-484f-bf5b-67d41534d940")
				upgradeAttachmentOptionsModel.SetProfileID("48279384-3d29-4089-8259-8ed354774b4a")
				upgradeAttachmentOptionsModel.SetAttachmentID("testString")
				upgradeAttachmentOptionsModel.SetAttachmentParameters([]securityandcompliancecenterapiv3.Parameter{*parameterModel})
				upgradeAttachmentOptionsModel.SetAccountID("testString")
				upgradeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(upgradeAttachmentOptionsModel).ToNot(BeNil())
				Expect(upgradeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("acd7032c-15a3-484f-bf5b-67d41534d940")))
				Expect(upgradeAttachmentOptionsModel.ProfileID).To(Equal(core.StringPtr("48279384-3d29-4089-8259-8ed354774b4a")))
				Expect(upgradeAttachmentOptionsModel.AttachmentID).To(Equal(core.StringPtr("testString")))
				Expect(upgradeAttachmentOptionsModel.AttachmentParameters).To(Equal([]securityandcompliancecenterapiv3.Parameter{*parameterModel}))
				Expect(upgradeAttachmentOptionsModel.AccountID).To(Equal(core.StringPtr("testString")))
				Expect(upgradeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewConditionItemConditionBase successfully`, func() {
				property := "testString"
				operator := "string_equals"
				_model, err := securityAndComplianceCenterService.NewConditionItemConditionBase(property, operator)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRequiredConfigConditionBase successfully`, func() {
				property := "testString"
				operator := "string_equals"
				_model, err := securityAndComplianceCenterService.NewRequiredConfigConditionBase(property, operator)
				Expect(_model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return io.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
